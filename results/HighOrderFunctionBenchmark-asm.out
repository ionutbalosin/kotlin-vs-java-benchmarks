# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction
# Parameters: (factor = 1, param = 1000000)

# Run progress: 0.00% complete, ETA 00:04:00
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 12.532 ms/op
# Warmup Iteration   2: 8.357 ms/op
# Warmup Iteration   3: 6.767 ms/op
# Warmup Iteration   4: 6.746 ms/op
# Warmup Iteration   5: 6.412 ms/op
Iteration   1: 6.392 ms/op
Iteration   2: 6.367 ms/op
Iteration   3: 6.354 ms/op
Iteration   4: 6.356 ms/op
Iteration   5: 6.414 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 4.17% complete, ETA 00:04:30
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.234 ms/op
# Warmup Iteration   2: 6.467 ms/op
# Warmup Iteration   3: 6.379 ms/op
# Warmup Iteration   4: 6.427 ms/op
# Warmup Iteration   5: 6.431 ms/op
Iteration   1: 6.514 ms/op
Iteration   2: 6.612 ms/op
Iteration   3: 6.414 ms/op
Iteration   4: 6.603 ms/op
Iteration   5: 6.331 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 8.33% complete, ETA 00:04:14
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.299 ms/op
# Warmup Iteration   2: 6.444 ms/op
# Warmup Iteration   3: 6.395 ms/op
# Warmup Iteration   4: 6.408 ms/op
# Warmup Iteration   5: 6.396 ms/op
Iteration   1: 6.394 ms/op
Iteration   2: 6.433 ms/op
Iteration   3: 6.424 ms/op
Iteration   4: 6.375 ms/op
Iteration   5: 6.387 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction":
  6.425 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (6.331, 6.425, 6.612), stdev = 0.086
  CI (99.9%): [6.333, 6.516] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·asm":
PrintAssembly processed: 45854 total address lines.
Perf output processed (skipped 6.182 seconds):
 Column 1: cycles (5507 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (206 bytes) 

             0x00007f6d5c2540c8: xor    r11d,r11d          ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007f6d5c2540cb: mov    rax,r11
         │   0x00007f6d5c2540ce: add    rsp,0x40
         │   0x00007f6d5c2540d2: pop    rbp
         │   0x00007f6d5c2540d3: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007f6d5c2540da: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007f6d5c2540dd: ret    
         │   0x00007f6d5c2540de: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.49%  │↗  0x00007f6d5c2540e0: mov    QWORD PTR [r15+0x118],r9
  2.03%  ││  0x00007f6d5c2540e7: prefetchw BYTE PTR [r9+0xc0]
  7.63%  ││  0x00007f6d5c2540ef: mov    r9,QWORD PTR [rbx+0xb8]
  3.21%  ││  0x00007f6d5c2540f6: mov    QWORD PTR [rax],r9
  6.74%  ││  0x00007f6d5c2540f9: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  2.18%  ││  0x00007f6d5c254100: mov    DWORD PTR [rax+0xc],0x0
  1.63%  ││  0x00007f6d5c254107: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.58%  ││  0x00007f6d5c25410f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.29%  ││  0x00007f6d5c254113: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  6.90%  ││  0x00007f6d5c254117: cmp    r8,rcx
         ╰│  0x00007f6d5c25411a: je     0x00007f6d5c2540cb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.20%   │  0x00007f6d5c25411c: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.44%   │  0x00007f6d5c254120: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.58%   │  0x00007f6d5c254127: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.25%   │  0x00007f6d5c25412a: cmp    r8,0xffffffffffffff80
          │  0x00007f6d5c25412e: jl     0x00007f6d5c2542b7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.20%   │  0x00007f6d5c254134: cmp    r8,0x7f
          │  0x00007f6d5c254138: jle    0x00007f6d5c254208
  0.47%   │  0x00007f6d5c25413e: mov    rax,QWORD PTR [r15+0x118]
  1.47%   │  0x00007f6d5c254145: mov    r9,rax
  3.21%   │  0x00007f6d5c254148: add    r9,0x18
  0.29%   │  0x00007f6d5c25414c: cmp    r9,QWORD PTR [r15+0x128]
          │  0x00007f6d5c254153: jae    0x00007f6d5c254274  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.53%   │  0x00007f6d5c254159: mov    QWORD PTR [r15+0x118],r9
  3.30%   │  0x00007f6d5c254160: prefetchw BYTE PTR [r9+0xc0]
  8.19%   │  0x00007f6d5c254168: mov    r9,QWORD PTR [rbx+0xb8]
  3.18%   │  0x00007f6d5c25416f: mov    QWORD PTR [rax],r9
  3.74%   │  0x00007f6d5c254172: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.71%   │  0x00007f6d5c254179: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  2.69%   │  0x00007f6d5c254180: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.80%   │  0x00007f6d5c254184: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.82%   │  0x00007f6d5c254188: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  6.12%   │  0x00007f6d5c25418c: cmp    rdi,0xffffffffffffff80
          │  0x00007f6d5c254190: jl     0x00007f6d5c2542f2  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.90%   │  0x00007f6d5c254196: cmp    rdi,0x7f
          │  0x00007f6d5c25419a: jle    0x00007f6d5c25423e
  2.27%   │  0x00007f6d5c2541a0: mov    rax,QWORD PTR [r15+0x118]
  1.16%   │  0x00007f6d5c2541a7: mov    r9,rax
  0.25%   │  0x00007f6d5c2541aa: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.76%   │  0x00007f6d5c2541ae: cmp    r9,QWORD PTR [r15+0x128]
          ╰  0x00007f6d5c2541b5: jb     0x00007f6d5c2540e0
             0x00007f6d5c2541bb: mov    QWORD PTR [rsp+0x20],rdi
             0x00007f6d5c2541c0: mov    QWORD PTR [rsp+0x18],rbx
             0x00007f6d5c2541c5: mov    QWORD PTR [rsp+0x10],r8
             0x00007f6d5c2541ca: mov    QWORD PTR [rsp+0x8],r10
             0x00007f6d5c2541cf: mov    QWORD PTR [rsp],r11
             0x00007f6d5c2541d3: mov    rbp,rcx
             0x00007f6d5c2541d6: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007f6d5c2541e0: data16 xchg ax,ax
....................................................................................................
 88.21%  <total for region 1>

....[Hottest Regions]...............................................................................
 88.21%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (206 bytes) 
  3.36%           libjvm.so  SpinPause (2 bytes) 
  3.00%              kernel  [unknown] (6 bytes) 
  0.40%              kernel  [unknown] (28 bytes) 
  0.27%              kernel  [unknown] (56 bytes) 
  0.18%              kernel  [unknown] (5 bytes) 
  0.16%              kernel  [unknown] (3 bytes) 
  0.15%              kernel  [unknown] (29 bytes) 
  0.13%           libjvm.so  _ZN15G1FromCardCache5clearEj (19 bytes) 
  0.13%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (17 bytes) 
  0.13%           libjvm.so  _ZN15RSHashTableIter8has_nextERm (31 bytes) 
  0.09%              kernel  [unknown] (7 bytes) 
  0.07%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread (0 bytes) 
  0.07%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv (4 bytes) 
  0.07%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord (0 bytes) 
  0.05%              kernel  [unknown] (45 bytes) 
  0.05%              kernel  [unknown] (0 bytes) 
  0.05%         interpreter  method entry point (kind = zerolocals)  (8 bytes) 
  0.05%           libjvm.so  _ZNK13InstanceKlass12klass_holderEv (7 bytes) 
  0.05%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj (0 bytes) 
  3.29%  <...other 143 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.23%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 
  5.01%              kernel  [unknown] 
  3.36%           libjvm.so  SpinPause 
  0.16%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.15%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.13%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.13%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.11%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.11%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.09%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.09%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord 
  0.07%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread 
  0.07%         interpreter  method entry point (kind = zerolocals)  
  0.05%           libjvm.so  _ZN42RegisterHumongousWithInCSetFastTestClosure14do_heap_regionEP10HeapRegion 
  0.05%           libjvm.so  _ZN14HSpaceCounters11update_usedEm 
  0.05%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj 
  0.05%           libjvm.so  _ZN15G1CollectedHeap17allocate_new_tlabEmmPm 
  0.05%           libjvm.so  _ZN24HeapRegionRemSetIteratorC2EP16HeapRegionRemSet 
  0.05%           libjvm.so  _ZNK13InstanceKlass12klass_holderEv 
  0.05%              [vdso]  [unknown] 
  1.89%  <...other 78 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 88.23%                  c2
  6.10%           libjvm.so
  5.01%              kernel
  0.31%         interpreter
  0.16%        libc-2.28.so
  0.09%              [vdso]
  0.04%        runtime stub
  0.02%  libpthread-2.28.so
  0.02%          ld-2.28.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45876 total address lines.
Perf output processed (skipped 6.043 seconds):
 Column 1: cycles (5398 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (206 bytes) 

             0x00007fdc5ccd8cc8: xor    r11d,r11d          ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007fdc5ccd8ccb: mov    rax,r11
         │   0x00007fdc5ccd8cce: add    rsp,0x40
         │   0x00007fdc5ccd8cd2: pop    rbp
         │   0x00007fdc5ccd8cd3: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007fdc5ccd8cda: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007fdc5ccd8cdd: ret    
         │   0x00007fdc5ccd8cde: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.09%  │↗  0x00007fdc5ccd8ce0: mov    QWORD PTR [r15+0x118],r9
  2.30%  ││  0x00007fdc5ccd8ce7: prefetchw BYTE PTR [r9+0xc0]
  7.30%  ││  0x00007fdc5ccd8cef: mov    r9,QWORD PTR [rbx+0xb8]
  3.09%  ││  0x00007fdc5ccd8cf6: mov    QWORD PTR [rax],r9
  6.21%  ││  0x00007fdc5ccd8cf9: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  2.13%  ││  0x00007fdc5ccd8d00: mov    DWORD PTR [rax+0xc],0x0
  1.43%  ││  0x00007fdc5ccd8d07: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.02%  ││  0x00007fdc5ccd8d0f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.30%  ││  0x00007fdc5ccd8d13: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  7.63%  ││  0x00007fdc5ccd8d17: cmp    r8,rcx
         ╰│  0x00007fdc5ccd8d1a: je     0x00007fdc5ccd8ccb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.19%   │  0x00007fdc5ccd8d1c: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.46%   │  0x00007fdc5ccd8d20: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.43%   │  0x00007fdc5ccd8d27: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.63%   │  0x00007fdc5ccd8d2a: cmp    r8,0xffffffffffffff80
          │  0x00007fdc5ccd8d2e: jl     0x00007fdc5ccd8eb7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.22%   │  0x00007fdc5ccd8d34: cmp    r8,0x7f
          │  0x00007fdc5ccd8d38: jle    0x00007fdc5ccd8e08
  0.46%   │  0x00007fdc5ccd8d3e: mov    rax,QWORD PTR [r15+0x118]
  1.41%   │  0x00007fdc5ccd8d45: mov    r9,rax
  2.87%   │  0x00007fdc5ccd8d48: add    r9,0x18
  0.22%   │  0x00007fdc5ccd8d4c: cmp    r9,QWORD PTR [r15+0x128]
          │  0x00007fdc5ccd8d53: jae    0x00007fdc5ccd8e74  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.35%   │  0x00007fdc5ccd8d59: mov    QWORD PTR [r15+0x118],r9
  3.50%   │  0x00007fdc5ccd8d60: prefetchw BYTE PTR [r9+0xc0]
  8.08%   │  0x00007fdc5ccd8d68: mov    r9,QWORD PTR [rbx+0xb8]
  3.30%   │  0x00007fdc5ccd8d6f: mov    QWORD PTR [rax],r9
  4.09%   │  0x00007fdc5ccd8d72: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.69%   │  0x00007fdc5ccd8d79: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  3.56%   │  0x00007fdc5ccd8d80: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.76%   │  0x00007fdc5ccd8d84: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.74%   │  0x00007fdc5ccd8d88: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.65%   │  0x00007fdc5ccd8d8c: cmp    rdi,0xffffffffffffff80
          │  0x00007fdc5ccd8d90: jl     0x00007fdc5ccd8ef2  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.98%   │  0x00007fdc5ccd8d96: cmp    rdi,0x7f
          │  0x00007fdc5ccd8d9a: jle    0x00007fdc5ccd8e3e
  2.04%   │  0x00007fdc5ccd8da0: mov    rax,QWORD PTR [r15+0x118]
  1.37%   │  0x00007fdc5ccd8da7: mov    r9,rax
  0.22%   │  0x00007fdc5ccd8daa: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.78%   │  0x00007fdc5ccd8dae: cmp    r9,QWORD PTR [r15+0x128]
          ╰  0x00007fdc5ccd8db5: jb     0x00007fdc5ccd8ce0
             0x00007fdc5ccd8dbb: mov    QWORD PTR [rsp+0x20],rdi
             0x00007fdc5ccd8dc0: mov    QWORD PTR [rsp+0x18],rbx
             0x00007fdc5ccd8dc5: mov    QWORD PTR [rsp+0x10],r8
             0x00007fdc5ccd8dca: mov    QWORD PTR [rsp+0x8],r10
             0x00007fdc5ccd8dcf: mov    QWORD PTR [rsp],r11
             0x00007fdc5ccd8dd3: mov    rbp,rcx
             0x00007fdc5ccd8dd6: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007fdc5ccd8de0: data16 xchg ax,ax
....................................................................................................
 88.50%  <total for region 1>

....[Hottest Regions]...............................................................................
 88.50%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (206 bytes) 
  2.95%           libjvm.so  SpinPause (2 bytes) 
  2.74%              kernel  [unknown] (6 bytes) 
  0.31%              kernel  [unknown] (3 bytes) 
  0.22%              kernel  [unknown] (20 bytes) 
  0.11%              kernel  [unknown] (2 bytes) 
  0.11%              kernel  [unknown] (0 bytes) 
  0.11%              kernel  [unknown] (20 bytes) 
  0.11%           libjvm.so  _ZN15RSHashTableIter8has_nextERm (31 bytes) 
  0.09%              kernel  [unknown] (29 bytes) 
  0.09%              kernel  [unknown] (0 bytes) 
  0.09%           libjvm.so  _ZN15G1FromCardCache5clearEj (11 bytes) 
  0.09%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (17 bytes) 
  0.07%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (5 bytes) 
  0.07%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord (0 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (11 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (6 bytes) 
  4.02%  <...other 164 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.51%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 
  5.59%              kernel  [unknown] 
  2.95%           libjvm.so  SpinPause 
  0.17%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.13%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.13%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.13%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.13%           libjvm.so  _ZN15G1CollectedHeap17allocate_new_tlabEmmPm 
  0.11%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.09%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord 
  0.09%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.07%           libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.07%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.07%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.06%           libjvm.so  _ZN13SharedRuntime27on_slowpath_allocation_exitEP10JavaThread 
  0.06%           libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv 
  0.06%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj 
  0.06%           libjvm.so  _ZN23G1FreeCollectionSetTask32G1SerialFreeCollectionSetClosure14do_heap_regionEP10HeapRegion 
  0.06%           libjvm.so  _ZN7Monitor6unlockEv 
  0.04%           libjvm.so  _ZN14FreeRegionList11add_orderedEPS_ 
  1.41%  <...other 59 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 88.51%                  c2
  5.59%              kernel
  5.58%           libjvm.so
  0.17%        libc-2.28.so
  0.06%         interpreter
  0.04%  libpthread-2.28.so
  0.04%              [vdso]
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45857 total address lines.
Perf output processed (skipped 6.043 seconds):
 Column 1: cycles (5246 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (229 bytes) 

             0x00007f38d8cd75c8: xor    r11d,r11d          ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007f38d8cd75cb: mov    rax,r11
         │   0x00007f38d8cd75ce: add    rsp,0x40
         │   0x00007f38d8cd75d2: pop    rbp
         │   0x00007f38d8cd75d3: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007f38d8cd75da: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007f38d8cd75dd: ret    
         │   0x00007f38d8cd75de: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.36%  │↗  0x00007f38d8cd75e0: mov    QWORD PTR [r15+0x118],r9
  1.96%  ││  0x00007f38d8cd75e7: prefetchw BYTE PTR [r9+0xc0]
  6.96%  ││  0x00007f38d8cd75ef: mov    r9,QWORD PTR [rbx+0xb8]
  3.39%  ││  0x00007f38d8cd75f6: mov    QWORD PTR [rax],r9
  6.25%  ││  0x00007f38d8cd75f9: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.83%  ││  0x00007f38d8cd7600: mov    DWORD PTR [rax+0xc],0x0
  1.58%  ││  0x00007f38d8cd7607: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.25%  ││  0x00007f38d8cd760f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.10%  ││  0x00007f38d8cd7613: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  8.94%  ││  0x00007f38d8cd7617: cmp    r8,rcx
         ╰│  0x00007f38d8cd761a: je     0x00007f38d8cd75cb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.30%   │  0x00007f38d8cd761c: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.55%   │  0x00007f38d8cd7620: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.69%   │  0x00007f38d8cd7627: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.47%   │  0x00007f38d8cd762a: cmp    r8,0xffffffffffffff80
          │  0x00007f38d8cd762e: jl     0x00007f38d8cd77b7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.25%   │  0x00007f38d8cd7634: cmp    r8,0x7f
          │  0x00007f38d8cd7638: jle    0x00007f38d8cd7708
  0.30%   │  0x00007f38d8cd763e: mov    rax,QWORD PTR [r15+0x118]
  1.37%   │  0x00007f38d8cd7645: mov    r9,rax
  2.92%   │  0x00007f38d8cd7648: add    r9,0x18
  0.50%   │  0x00007f38d8cd764c: cmp    r9,QWORD PTR [r15+0x128]
          │  0x00007f38d8cd7653: jae    0x00007f38d8cd7774  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.63%   │  0x00007f38d8cd7659: mov    QWORD PTR [r15+0x118],r9
  3.37%   │  0x00007f38d8cd7660: prefetchw BYTE PTR [r9+0xc0]
  7.76%   │  0x00007f38d8cd7668: mov    r9,QWORD PTR [rbx+0xb8]
  3.79%   │  0x00007f38d8cd766f: mov    QWORD PTR [rax],r9
  4.00%   │  0x00007f38d8cd7672: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  2.04%   │  0x00007f38d8cd7679: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  3.22%   │  0x00007f38d8cd7680: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.57%   │  0x00007f38d8cd7684: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.04%   │  0x00007f38d8cd7688: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  6.23%   │  0x00007f38d8cd768c: cmp    rdi,0xffffffffffffff80
          │  0x00007f38d8cd7690: jl     0x00007f38d8cd77f2  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.00%   │  0x00007f38d8cd7696: cmp    rdi,0x7f
          │  0x00007f38d8cd769a: jle    0x00007f38d8cd773e
  2.46%   │  0x00007f38d8cd76a0: mov    rax,QWORD PTR [r15+0x118]
  1.60%   │  0x00007f38d8cd76a7: mov    r9,rax
  0.32%   │  0x00007f38d8cd76aa: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.85%   │  0x00007f38d8cd76ae: cmp    r9,QWORD PTR [r15+0x128]
          ╰  0x00007f38d8cd76b5: jb     0x00007f38d8cd75e0
             0x00007f38d8cd76bb: mov    QWORD PTR [rsp+0x20],rdi
             0x00007f38d8cd76c0: mov    QWORD PTR [rsp+0x18],rbx
  0.02%      0x00007f38d8cd76c5: mov    QWORD PTR [rsp+0x10],r8
             0x00007f38d8cd76ca: mov    QWORD PTR [rsp+0x8],r10
             0x00007f38d8cd76cf: mov    QWORD PTR [rsp],r11
             0x00007f38d8cd76d3: mov    rbp,rcx
             0x00007f38d8cd76d6: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007f38d8cd76e0: data16 xchg ax,ax
             0x00007f38d8cd76e3: call   0x00007f38d8c9ed00  ; ImmutableOopMap{[8]=Oop }
                                                           ;*new {reexecute=0 rethrow=0 return_oop=1}
                                                           ; - java.lang.Long::valueOf@31 (line 1180)
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
....................................................................................................
 91.90%  <total for region 1>

....[Hottest Regions]...............................................................................
 91.90%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (229 bytes) 
  3.05%           libjvm.so  SpinPause (2 bytes) 
  0.63%              kernel  [unknown] (6 bytes) 
  0.27%              kernel  [unknown] (20 bytes) 
  0.21%              kernel  [unknown] (29 bytes) 
  0.11%              kernel  [unknown] (11 bytes) 
  0.11%              [vdso]  [unknown] (7 bytes) 
  0.10%              kernel  [unknown] (17 bytes) 
  0.10%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (8 bytes) 
  0.10%        libc-2.28.so  __memset_avx2_unaligned_erms (19 bytes) 
  0.08%           libjvm.so  _ZNK13InstanceKlass12klass_holderEv (7 bytes) 
  0.08%        libc-2.28.so  __memset_avx2_unaligned_erms (8 bytes) 
  0.06%              kernel  [unknown] (5 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (7 bytes) 
  0.06%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread (0 bytes) 
  0.06%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj (21 bytes) 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (19 bytes) 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (17 bytes) 
  2.80%  <...other 122 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 91.94%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 
  3.05%           libjvm.so  SpinPause 
  2.25%              kernel  [unknown] 
  0.19%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.17%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.11%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.11%              [vdso]  [unknown] 
  0.10%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.08%           libjvm.so  _ZNK13InstanceKlass12klass_holderEv 
  0.06%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread 
  0.06%           libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE 
  0.06%           libjvm.so  _ZN10HeapRegion25report_region_type_changeEN21G1HeapRegionTraceType4TypeE 
  0.06%           libjvm.so  _ZN13InstanceKlass17allocate_instanceEP6Thread 
  0.06%           libjvm.so  _ZN11StringTable25possibly_parallel_oops_doEPN10OopStorage8ParStateILb0ELb0EEEP10OopClosure 
  0.06%           libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.06%           libjvm.so  _ZN11OopMapCache6lookupERK12methodHandleiP17InterpreterOopMap 
  0.06%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj 
  0.06%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.04%           libjvm.so  _ZNK5Klass12class_loaderEv 
  0.04%           libjvm.so  _ZNK11G1CardTable11is_in_youngEP7oopDesc 
  1.39%  <...other 61 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 91.94%                  c2
  5.30%           libjvm.so
  2.25%              kernel
  0.29%        libc-2.28.so
  0.11%              [vdso]
  0.08%         interpreter
  0.02%  libpthread-2.28.so
....................................................................................................
 99.98%  <totals>



# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 12.50% complete, ETA 00:04:00
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.416 ms/op
# Warmup Iteration   2: 6.462 ms/op
# Warmup Iteration   3: 6.429 ms/op
# Warmup Iteration   4: 6.422 ms/op
# Warmup Iteration   5: 6.347 ms/op
Iteration   1: 6.355 ms/op
Iteration   2: 6.406 ms/op
Iteration   3: 6.408 ms/op
Iteration   4: 6.370 ms/op
Iteration   5: 6.394 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 16.67% complete, ETA 00:03:48
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.132 ms/op
# Warmup Iteration   2: 6.452 ms/op
# Warmup Iteration   3: 6.837 ms/op
# Warmup Iteration   4: 6.354 ms/op
# Warmup Iteration   5: 6.399 ms/op
Iteration   1: 6.352 ms/op
Iteration   2: 6.329 ms/op
Iteration   3: 6.454 ms/op
Iteration   4: 6.354 ms/op
Iteration   5: 6.403 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 20.83% complete, ETA 00:03:36
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.518 ms/op
# Warmup Iteration   2: 6.448 ms/op
# Warmup Iteration   3: 6.383 ms/op
# Warmup Iteration   4: 6.428 ms/op
# Warmup Iteration   5: 6.391 ms/op
Iteration   1: 6.358 ms/op
Iteration   2: 6.382 ms/op
Iteration   3: 6.420 ms/op
Iteration   4: 6.396 ms/op
Iteration   5: 6.400 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline":
  6.385 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (6.329, 6.385, 6.454), stdev = 0.032
  CI (99.9%): [6.351, 6.420] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·asm":
PrintAssembly processed: 45853 total address lines.
Perf output processed (skipped 5.991 seconds):
 Column 1: cycles (5501 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 (206 bytes) 

                                                          ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
            0x00007fe5fccd7d4f: mov    rax,r11
            0x00007fe5fccd7d52: add    rsp,0x40
            0x00007fe5fccd7d56: pop    rbp
            0x00007fe5fccd7d57: mov    r10,QWORD PTR [r15+0x108]
            0x00007fe5fccd7d5e: test   DWORD PTR [r10],eax  ;   {poll_return}
            0x00007fe5fccd7d61: ret    
            0x00007fe5fccd7d62: data16 nop WORD PTR [rax+rax*1+0x0]
            0x00007fe5fccd7d6c: data16 data16 xchg ax,ax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  2.29%  ↗  0x00007fe5fccd7d70: mov    QWORD PTR [r15+0x118],r9
  0.38%  │  0x00007fe5fccd7d77: prefetchw BYTE PTR [r9+0xc0]
  8.11%  │  0x00007fe5fccd7d7f: mov    r9,QWORD PTR [rbx+0xb8]
  1.44%  │  0x00007fe5fccd7d86: mov    QWORD PTR [rax],r9
  8.23%  │  0x00007fe5fccd7d89: mov    DWORD PTR [rax+0x8],0x13c38
         │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  2.04%  │  0x00007fe5fccd7d90: mov    DWORD PTR [rax+0xc],0x0
  1.62%  │  0x00007fe5fccd7d97: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@31 (line 1180)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  2.53%  │  0x00007fe5fccd7d9f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  2.65%  │  0x00007fe5fccd7da3: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  8.31%  │  0x00007fe5fccd7da7: cmp    r8,rcx
         │  0x00007fe5fccd7daa: je     0x00007fe5fccd7d4f  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
  0.15%  │  0x00007fe5fccd7dac: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.42%  │  0x00007fe5fccd7db0: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.71%  │  0x00007fe5fccd7db7: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
         │                                                ;   {poll}
  3.00%  │  0x00007fe5fccd7dba: cmp    r8,0xffffffffffffff80
         │  0x00007fe5fccd7dbe: jl     0x00007fe5fccd7f43  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@9 (line 1177)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  0.18%  │  0x00007fe5fccd7dc4: cmp    r8,0x7f
         │  0x00007fe5fccd7dc8: jle    0x00007fe5fccd7e98
  0.51%  │  0x00007fe5fccd7dce: mov    rax,QWORD PTR [r15+0x118]
  1.56%  │  0x00007fe5fccd7dd5: mov    r9,rax
  3.25%  │  0x00007fe5fccd7dd8: add    r9,0x18
  0.40%  │  0x00007fe5fccd7ddc: cmp    r9,QWORD PTR [r15+0x128]
         │  0x00007fe5fccd7de3: jae    0x00007fe5fccd7f01  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.64%  │  0x00007fe5fccd7de9: mov    QWORD PTR [r15+0x118],r9
  4.89%  │  0x00007fe5fccd7df0: prefetchw BYTE PTR [r9+0xc0]
  6.34%  │  0x00007fe5fccd7df8: mov    r9,QWORD PTR [rbx+0xb8]
  4.82%  │  0x00007fe5fccd7dff: mov    QWORD PTR [rax],r9
  2.91%  │  0x00007fe5fccd7e02: mov    DWORD PTR [rax+0x8],0x13c38
         │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.65%  │  0x00007fe5fccd7e09: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@31 (line 1180)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  3.18%  │  0x00007fe5fccd7e10: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  0.51%  │  0x00007fe5fccd7e14: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::longValue@1 (line 1353)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@5 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  1.80%  │  0x00007fe5fccd7e18: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  5.73%  │  0x00007fe5fccd7e1c: cmp    rdi,0xffffffffffffff80
         │  0x00007fe5fccd7e20: jl     0x00007fe5fccd7f7e  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@9 (line 1177)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  3.13%  │  0x00007fe5fccd7e26: cmp    rdi,0x7f
         │  0x00007fe5fccd7e2a: jle    0x00007fe5fccd7ecd
  1.91%  │  0x00007fe5fccd7e30: mov    rax,QWORD PTR [r15+0x118]
  1.29%  │  0x00007fe5fccd7e37: mov    r9,rax
  0.36%  │  0x00007fe5fccd7e3a: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  1.45%  │  0x00007fe5fccd7e3e: cmp    r9,QWORD PTR [r15+0x128]
         ╰  0x00007fe5fccd7e45: jb     0x00007fe5fccd7d70
            0x00007fe5fccd7e4b: mov    QWORD PTR [rsp+0x20],rdi
            0x00007fe5fccd7e50: mov    QWORD PTR [rsp+0x18],rbx
            0x00007fe5fccd7e55: mov    QWORD PTR [rsp+0x10],r8
            0x00007fe5fccd7e5a: mov    QWORD PTR [rsp+0x8],r10
            0x00007fe5fccd7e5f: mov    QWORD PTR [rsp],r11
            0x00007fe5fccd7e63: mov    rbp,rcx
            0x00007fe5fccd7e66: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
            0x00007fe5fccd7e70: data16 xchg ax,ax
....................................................................................................
 88.38%  <total for region 1>

....[Hottest Regions]...............................................................................
 88.38%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 (206 bytes) 
  3.05%              kernel  [unknown] (6 bytes) 
  3.00%           libjvm.so  SpinPause (2 bytes) 
  0.44%              kernel  [unknown] (68 bytes) 
  0.38%              kernel  [unknown] (50 bytes) 
  0.31%              kernel  [unknown] (70 bytes) 
  0.13%           libjvm.so  _ZN15G1FromCardCache5clearEj (66 bytes) 
  0.11%              kernel  [unknown] (13 bytes) 
  0.11%              kernel  [unknown] (3 bytes) 
  0.11%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (24 bytes) 
  0.11%           libjvm.so  _ZN15RSHashTableIter8has_nextERm (31 bytes) 
  0.09%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (30 bytes) 
  0.09%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord (0 bytes) 
  0.09%           libjvm.so  _ZN7Monitor6unlockEv (27 bytes) 
  0.07%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv (9 bytes) 
  0.07%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (17 bytes) 
  0.05%              kernel  [unknown] (0 bytes) 
  0.05%              kernel  [unknown] (0 bytes) 
  0.05%              kernel  [unknown] (8 bytes) 
  0.05%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread (0 bytes) 
  3.22%  <...other 148 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.40%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 
  5.34%              kernel  [unknown] 
  3.00%           libjvm.so  SpinPause 
  0.18%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.18%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.13%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.11%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.11%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.09%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.09%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord 
  0.09%           libjvm.so  _ZN7Monitor6unlockEv 
  0.07%           libjvm.so  _ZN16G1ParCopyClosureIL9G1Barrier0EL6G1Mark0EE6do_oopEPP7oopDesc 
  0.05%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread 
  0.05%          ld-2.28.so  __tls_get_addr 
  0.05%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.05%           libjvm.so  _ZN12ConstantPool21impl_signature_ref_atEib 
  0.05%           libjvm.so  _ZN13SharedRuntime27on_slowpath_allocation_exitEP10JavaThread 
  0.05%           libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.05%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.04%  libpthread-2.28.so  do_futex_wait.constprop.1 
  1.76%  <...other 80 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 88.40%                  c2
  5.76%           libjvm.so
  5.34%              kernel
  0.18%        libc-2.28.so
  0.13%         interpreter
  0.05%  libpthread-2.28.so
  0.05%              [vdso]
  0.05%          ld-2.28.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45865 total address lines.
Perf output processed (skipped 6.171 seconds):
 Column 1: cycles (5399 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 (206 bytes) 

                                                          ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
            0x00007fc928cd8c4f: mov    rax,r11
            0x00007fc928cd8c52: add    rsp,0x40
            0x00007fc928cd8c56: pop    rbp
            0x00007fc928cd8c57: mov    r10,QWORD PTR [r15+0x108]
            0x00007fc928cd8c5e: test   DWORD PTR [r10],eax  ;   {poll_return}
            0x00007fc928cd8c61: ret    
            0x00007fc928cd8c62: data16 nop WORD PTR [rax+rax*1+0x0]
            0x00007fc928cd8c6c: data16 data16 xchg ax,ax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  2.50%  ↗  0x00007fc928cd8c70: mov    QWORD PTR [r15+0x118],r9
  0.57%  │  0x00007fc928cd8c77: prefetchw BYTE PTR [r9+0xc0]
  7.91%  │  0x00007fc928cd8c7f: mov    r9,QWORD PTR [rbx+0xb8]
  1.96%  │  0x00007fc928cd8c86: mov    QWORD PTR [rax],r9
  7.11%  │  0x00007fc928cd8c89: mov    DWORD PTR [rax+0x8],0x13c38
         │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.57%  │  0x00007fc928cd8c90: mov    DWORD PTR [rax+0xc],0x0
  1.76%  │  0x00007fc928cd8c97: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@31 (line 1180)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  2.17%  │  0x00007fc928cd8c9f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  2.30%  │  0x00007fc928cd8ca3: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  8.48%  │  0x00007fc928cd8ca7: cmp    r8,rcx
         │  0x00007fc928cd8caa: je     0x00007fc928cd8c4f  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
  0.17%  │  0x00007fc928cd8cac: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.43%  │  0x00007fc928cd8cb0: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.46%  │  0x00007fc928cd8cb7: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
         │                                                ;   {poll}
  3.45%  │  0x00007fc928cd8cba: cmp    r8,0xffffffffffffff80
         │  0x00007fc928cd8cbe: jl     0x00007fc928cd8e43  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@9 (line 1177)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  0.17%  │  0x00007fc928cd8cc4: cmp    r8,0x7f
         │  0x00007fc928cd8cc8: jle    0x00007fc928cd8d98
  0.41%  │  0x00007fc928cd8cce: mov    rax,QWORD PTR [r15+0x118]
  1.72%  │  0x00007fc928cd8cd5: mov    r9,rax
  3.15%  │  0x00007fc928cd8cd8: add    r9,0x18
  0.28%  │  0x00007fc928cd8cdc: cmp    r9,QWORD PTR [r15+0x128]
         │  0x00007fc928cd8ce3: jae    0x00007fc928cd8e01  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.54%  │  0x00007fc928cd8ce9: mov    QWORD PTR [r15+0x118],r9
  4.80%  │  0x00007fc928cd8cf0: prefetchw BYTE PTR [r9+0xc0]
  6.65%  │  0x00007fc928cd8cf8: mov    r9,QWORD PTR [rbx+0xb8]
  5.22%  │  0x00007fc928cd8cff: mov    QWORD PTR [rax],r9
  3.30%  │  0x00007fc928cd8d02: mov    DWORD PTR [rax+0x8],0x13c38
         │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.78%  │  0x00007fc928cd8d09: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@31 (line 1180)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  3.33%  │  0x00007fc928cd8d10: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  0.72%  │  0x00007fc928cd8d14: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::longValue@1 (line 1353)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@5 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  1.72%  │  0x00007fc928cd8d18: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  5.82%  │  0x00007fc928cd8d1c: cmp    rdi,0xffffffffffffff80
         │  0x00007fc928cd8d20: jl     0x00007fc928cd8e7e  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@9 (line 1177)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  4.15%  │  0x00007fc928cd8d26: cmp    rdi,0x7f
         │  0x00007fc928cd8d2a: jle    0x00007fc928cd8dcd
  2.41%  │  0x00007fc928cd8d30: mov    rax,QWORD PTR [r15+0x118]
  1.28%  │  0x00007fc928cd8d37: mov    r9,rax
  0.26%  │  0x00007fc928cd8d3a: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  1.61%  │  0x00007fc928cd8d3e: cmp    r9,QWORD PTR [r15+0x128]
         ╰  0x00007fc928cd8d45: jb     0x00007fc928cd8c70
            0x00007fc928cd8d4b: mov    QWORD PTR [rsp+0x20],rdi
            0x00007fc928cd8d50: mov    QWORD PTR [rsp+0x18],rbx
            0x00007fc928cd8d55: mov    QWORD PTR [rsp+0x10],r8
            0x00007fc928cd8d5a: mov    QWORD PTR [rsp+0x8],r10
            0x00007fc928cd8d5f: mov    QWORD PTR [rsp],r11
            0x00007fc928cd8d63: mov    rbp,rcx
            0x00007fc928cd8d66: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
            0x00007fc928cd8d70: data16 xchg ax,ax
....................................................................................................
 90.15%  <total for region 1>

....[Hottest Regions]...............................................................................
 90.15%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 (206 bytes) 
  2.22%              kernel  [unknown] (6 bytes) 
  1.32%           libjvm.so  SpinPause (0 bytes) 
  0.52%              kernel  [unknown] (69 bytes) 
  0.48%              kernel  [unknown] (67 bytes) 
  0.41%              kernel  [unknown] (56 bytes) 
  0.22%              kernel  [unknown] (13 bytes) 
  0.19%              kernel  [unknown] (17 bytes) 
  0.19%              kernel  [unknown] (18 bytes) 
  0.17%              kernel  [unknown] (4 bytes) 
  0.13%           libjvm.so  _ZN7Monitor6unlockEv (27 bytes) 
  0.11%              kernel  [unknown] (0 bytes) 
  0.09%           libjvm.so  _ZN15G1FromCardCache5clearEj (12 bytes) 
  0.09%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (45 bytes) 
  0.09%        libc-2.28.so  __memset_avx2_unaligned_erms (12 bytes) 
  0.07%              kernel  [unknown] (24 bytes) 
  0.07%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv (4 bytes) 
  0.07%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj (21 bytes) 
  0.07%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (5 bytes) 
  0.07%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (4 bytes) 
  3.24%  <...other 129 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 90.18%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 
  5.45%              kernel  [unknown] 
  1.32%           libjvm.so  SpinPause 
  0.22%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.15%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.13%           libjvm.so  _ZN7Monitor6unlockEv 
  0.11%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.11%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord 
  0.09%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.09%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.07%           libjvm.so  _ZN7Monitor4lockEv 
  0.07%           libjvm.so  _ZN22ThreadLocalAllocBuffer4fillEP8HeapWordS1_m 
  0.07%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj 
  0.07%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.06%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.06%           libjvm.so  _ZNK8G1Policy30predict_region_elapsed_time_msEP10HeapRegionb 
  0.06%           libjvm.so  _ZN14FreeRegionList11add_orderedEPS_ 
  0.06%           libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE 
  0.06%           libjvm.so  _ZN24HeapRegionRemSetIteratorC2EP16HeapRegionRemSet 
  0.06%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  1.50%  <...other 66 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 90.18%                  c2
  5.45%              kernel
  3.83%           libjvm.so
  0.22%        libc-2.28.so
  0.19%         interpreter
  0.07%              [vdso]
  0.04%  libpthread-2.28.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45846 total address lines.
Perf output processed (skipped 5.967 seconds):
 Column 1: cycles (5396 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 (206 bytes) 

                                                          ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
            0x00007fd124cda34f: mov    rax,r11
            0x00007fd124cda352: add    rsp,0x40
            0x00007fd124cda356: pop    rbp
            0x00007fd124cda357: mov    r10,QWORD PTR [r15+0x108]
            0x00007fd124cda35e: test   DWORD PTR [r10],eax  ;   {poll_return}
            0x00007fd124cda361: ret    
            0x00007fd124cda362: data16 nop WORD PTR [rax+rax*1+0x0]
            0x00007fd124cda36c: data16 data16 xchg ax,ax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  2.26%  ↗  0x00007fd124cda370: mov    QWORD PTR [r15+0x118],r9
  0.43%  │  0x00007fd124cda377: prefetchw BYTE PTR [r9+0xc0]
  8.93%  │  0x00007fd124cda37f: mov    r9,QWORD PTR [rbx+0xb8]
  1.59%  │  0x00007fd124cda386: mov    QWORD PTR [rax],r9
  7.71%  │  0x00007fd124cda389: mov    DWORD PTR [rax+0x8],0x13c38
         │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.80%  │  0x00007fd124cda390: mov    DWORD PTR [rax+0xc],0x0
  1.35%  │  0x00007fd124cda397: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@31 (line 1180)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  2.45%  │  0x00007fd124cda39f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  2.41%  │  0x00007fd124cda3a3: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  8.60%  │  0x00007fd124cda3a7: cmp    r8,rcx
         │  0x00007fd124cda3aa: je     0x00007fd124cda34f  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
  0.26%  │  0x00007fd124cda3ac: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.52%  │  0x00007fd124cda3b0: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.50%  │  0x00007fd124cda3b7: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
         │                                                ;   {poll}
  3.34%  │  0x00007fd124cda3ba: cmp    r8,0xffffffffffffff80
         │  0x00007fd124cda3be: jl     0x00007fd124cda543  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@9 (line 1177)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  0.07%  │  0x00007fd124cda3c4: cmp    r8,0x7f
         │  0x00007fd124cda3c8: jle    0x00007fd124cda498
  0.37%  │  0x00007fd124cda3ce: mov    rax,QWORD PTR [r15+0x118]
  1.69%  │  0x00007fd124cda3d5: mov    r9,rax
  3.50%  │  0x00007fd124cda3d8: add    r9,0x18
  0.24%  │  0x00007fd124cda3dc: cmp    r9,QWORD PTR [r15+0x128]
         │  0x00007fd124cda3e3: jae    0x00007fd124cda501  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  0.46%  │  0x00007fd124cda3e9: mov    QWORD PTR [r15+0x118],r9
  4.60%  │  0x00007fd124cda3f0: prefetchw BYTE PTR [r9+0xc0]
  7.10%  │  0x00007fd124cda3f8: mov    r9,QWORD PTR [rbx+0xb8]
  4.89%  │  0x00007fd124cda3ff: mov    QWORD PTR [rax],r9
  2.52%  │  0x00007fd124cda402: mov    DWORD PTR [rax+0x8],0x13c38
         │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.37%  │  0x00007fd124cda409: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@31 (line 1180)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  3.48%  │  0x00007fd124cda410: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@39 (line 145)
  0.57%  │  0x00007fd124cda414: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::longValue@1 (line 1353)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@5 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  1.61%  │  0x00007fd124cda418: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  6.49%  │  0x00007fd124cda41c: cmp    rdi,0xffffffffffffff80
         │  0x00007fd124cda420: jl     0x00007fd124cda57e  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.lang.Long::valueOf@9 (line 1177)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@11 (line 22)
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  3.72%  │  0x00007fd124cda426: cmp    rdi,0x7f
         │  0x00007fd124cda42a: jle    0x00007fd124cda4cd
  2.04%  │  0x00007fd124cda430: mov    rax,QWORD PTR [r15+0x118]
  1.19%  │  0x00007fd124cda437: mov    r9,rax
  0.33%  │  0x00007fd124cda43a: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@70 (line 144)
  1.50%  │  0x00007fd124cda43e: cmp    r9,QWORD PTR [r15+0x128]
         ╰  0x00007fd124cda445: jb     0x00007fd124cda370
            0x00007fd124cda44b: mov    QWORD PTR [rsp+0x20],rdi
            0x00007fd124cda450: mov    QWORD PTR [rsp+0x18],rbx
            0x00007fd124cda455: mov    QWORD PTR [rsp+0x10],r8
            0x00007fd124cda45a: mov    QWORD PTR [rsp+0x8],r10
            0x00007fd124cda45f: mov    QWORD PTR [rsp],r11
            0x00007fd124cda463: mov    rbp,rcx
            0x00007fd124cda466: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
            0x00007fd124cda470: data16 xchg ax,ax
....................................................................................................
 89.90%  <total for region 1>

....[Hottest Regions]...............................................................................
 89.90%              c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 (206 bytes) 
  2.87%          kernel  [unknown] (6 bytes) 
  2.56%       libjvm.so  SpinPause (2 bytes) 
  0.24%          kernel  [unknown] (39 bytes) 
  0.17%          kernel  [unknown] (6 bytes) 
  0.15%          kernel  [unknown] (68 bytes) 
  0.15%          kernel  [unknown] (18 bytes) 
  0.11%          kernel  [unknown] (5 bytes) 
  0.11%          kernel  [unknown] (49 bytes) 
  0.09%       libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (22 bytes) 
  0.07%          kernel  [unknown] (4 bytes) 
  0.07%          kernel  [unknown] (3 bytes) 
  0.07%       libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (4 bytes) 
  0.06%          kernel  [unknown] (0 bytes) 
  0.06%       libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv (14 bytes) 
  0.06%       libjvm.so  _ZN15G1FromCardCache5clearEj (19 bytes) 
  0.06%       libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (22 bytes) 
  0.06%       libjvm.so  _ZNK17OtherRegionsTable8occupiedEv (0 bytes) 
  0.06%       libjvm.so  _ZN19JfrAllocationTracerC1EP8HeapWordmP6Thread (6 bytes) 
  0.06%       libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread (0 bytes) 
  3.02%  <...other 136 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.92%              c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 124 
  4.63%          kernel  [unknown] 
  2.56%       libjvm.so  SpinPause 
  0.19%       libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.09%       libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.09%       libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.09%       libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.09%    libc-2.28.so  __memset_avx2_unaligned_erms 
  0.09%       libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.07%       libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.06%       libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE 
  0.06%       libjvm.so  _ZN19JfrAllocationTracerC1EP8HeapWordmP6Thread 
  0.06%       libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.06%          [vdso]  [unknown] 
  0.06%       libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.04%       libjvm.so  _ZN18MutatorAllocRegion6retireEb 
  0.04%       libjvm.so  _ZNK15G1CollectionSet12iterate_fromEP17HeapRegionClosurejj 
  0.04%       libjvm.so  _ZN12LeakProfiler10is_runningEv 
  0.04%       libjvm.so  _ZN22G1BlockOffsetTablePart21zero_bottom_entry_rawEv 
  0.04%       libjvm.so  _ZN29CompositeElapsedCounterSource3nowEv 
  1.69%  <...other 75 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 89.92%              c2
  4.91%       libjvm.so
  4.63%          kernel
  0.22%    libc-2.28.so
  0.09%          [vdso]
  0.09%     interpreter
  0.04%  libz.so.1.2.11
  0.04%      ld-2.28.so
  0.02%    runtime stub
  0.02%  perf-32704.map
....................................................................................................
 99.98%  <totals>



# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 25.00% complete, ETA 00:03:25
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.668 ms/op
# Warmup Iteration   2: 6.416 ms/op
# Warmup Iteration   3: 6.399 ms/op
# Warmup Iteration   4: 6.413 ms/op
# Warmup Iteration   5: 6.407 ms/op
Iteration   1: 6.432 ms/op
Iteration   2: 6.410 ms/op
Iteration   3: 6.419 ms/op
Iteration   4: 6.493 ms/op
Iteration   5: 6.459 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 29.17% complete, ETA 00:03:13
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.953 ms/op
# Warmup Iteration   2: 6.610 ms/op
# Warmup Iteration   3: 6.450 ms/op
# Warmup Iteration   4: 6.384 ms/op
# Warmup Iteration   5: 6.467 ms/op
Iteration   1: 6.451 ms/op
Iteration   2: 6.472 ms/op
Iteration   3: 6.474 ms/op
Iteration   4: 6.378 ms/op
Iteration   5: 6.434 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 33.33% complete, ETA 00:03:02
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.311 ms/op
# Warmup Iteration   2: 6.425 ms/op
# Warmup Iteration   3: 6.422 ms/op
# Warmup Iteration   4: 6.377 ms/op
# Warmup Iteration   5: 6.450 ms/op
Iteration   1: 6.606 ms/op
Iteration   2: 6.378 ms/op
Iteration   3: 6.358 ms/op
Iteration   4: 6.396 ms/op
Iteration   5: 6.407 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda":
  6.438 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (6.358, 6.438, 6.606), stdev = 0.061
  CI (99.9%): [6.373, 6.503] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·asm":
PrintAssembly processed: 45959 total address lines.
Perf output processed (skipped 6.036 seconds):
 Column 1: cycles (5413 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 (219 bytes) 

             0x00007f55a0cd71c8: xor    r11d,r11d          ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007f55a0cd71cb: mov    rax,r11
         │   0x00007f55a0cd71ce: add    rsp,0x40
         │   0x00007f55a0cd71d2: pop    rbp
         │   0x00007f55a0cd71d3: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007f55a0cd71da: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007f55a0cd71dd: ret    
         │   0x00007f55a0cd71de: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  3.27%  │↗  0x00007f55a0cd71e0: mov    QWORD PTR [r15+0x118],r9
  2.33%  ││  0x00007f55a0cd71e7: prefetchw BYTE PTR [r9+0xc0]
  5.19%  ││  0x00007f55a0cd71ef: mov    r9,QWORD PTR [rbx+0xb8]
  2.94%  ││  0x00007f55a0cd71f6: mov    QWORD PTR [rax],r9
  5.62%  ││  0x00007f55a0cd71f9: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  0.91%  ││  0x00007f55a0cd7200: mov    DWORD PTR [rax+0xc],0x0
  0.94%  ││  0x00007f55a0cd7207: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.05%  ││  0x00007f55a0cd720f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.36%  ││  0x00007f55a0cd7213: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  7.74%  ││  0x00007f55a0cd7217: cmp    rcx,r8
         ╰│  0x00007f55a0cd721a: je     0x00007f55a0cd71cb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.17%   │  0x00007f55a0cd721c: add    rcx,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.26%   │  0x00007f55a0cd7220: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.24%   │  0x00007f55a0cd7227: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  2.66%   │  0x00007f55a0cd722a: cmp    rcx,0xffffffffffffff80
          │  0x00007f55a0cd722e: jl     0x00007f55a0cd73c3  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.17%   │  0x00007f55a0cd7234: cmp    rcx,0x7f
          │  0x00007f55a0cd7238: jle    0x00007f55a0cd7314
  0.26%   │  0x00007f55a0cd723e: mov    rax,QWORD PTR [r15+0x118]
  2.05%   │  0x00007f55a0cd7245: mov    r9,rax
  2.96%   │  0x00007f55a0cd7248: add    r9,0x18
  0.18%   │  0x00007f55a0cd724c: cmp    r9,QWORD PTR [r15+0x128]
          │  0x00007f55a0cd7253: jae    0x00007f55a0cd7380  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.46%   │  0x00007f55a0cd7259: mov    QWORD PTR [r15+0x118],r9
  3.20%   │  0x00007f55a0cd7260: prefetchw BYTE PTR [r9+0xc0]
  7.17%   │  0x00007f55a0cd7268: mov    r9,QWORD PTR [rbx+0xb8]
  2.46%   │  0x00007f55a0cd726f: mov    QWORD PTR [rax],r9
  3.34%   │  0x00007f55a0cd7272: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.66%   │  0x00007f55a0cd7279: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  2.49%   │  0x00007f55a0cd7280: mov    QWORD PTR [rax+0x10],rcx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.39%   │  0x00007f55a0cd7284: mov    edi,DWORD PTR [r10+0x10]  ;*getfield this$0 {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@4 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.41%   │  0x00007f55a0cd7288: movsxd r9,DWORD PTR [r12+rdi*8+0xc]
          │                                                ; implicit exception: dispatches to 0x00007f55a0cd754a
  1.42%   │  0x00007f55a0cd728d: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.03%   │  0x00007f55a0cd7291: imul   rdi,rdi
  5.49%   │  0x00007f55a0cd7295: imul   rdi,r9             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.54%   │  0x00007f55a0cd7299: cmp    rdi,0xffffffffffffff80
          │  0x00007f55a0cd729d: jl     0x00007f55a0cd73fe  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.09%   │  0x00007f55a0cd72a3: cmp    rdi,0x7f
          │  0x00007f55a0cd72a7: jle    0x00007f55a0cd734a
  3.01%   │  0x00007f55a0cd72ad: mov    rax,QWORD PTR [r15+0x118]
  1.44%   │  0x00007f55a0cd72b4: mov    r9,rax
  0.26%   │  0x00007f55a0cd72b7: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.13%   │  0x00007f55a0cd72bb: cmp    r9,QWORD PTR [r15+0x128]
          ╰  0x00007f55a0cd72c2: jb     0x00007f55a0cd71e0
             0x00007f55a0cd72c8: mov    QWORD PTR [rsp+0x20],rdi
             0x00007f55a0cd72cd: mov    QWORD PTR [rsp+0x18],rcx
             0x00007f55a0cd72d2: mov    QWORD PTR [rsp+0x10],r11
             0x00007f55a0cd72d7: mov    QWORD PTR [rsp+0x8],rbx
             0x00007f55a0cd72dc: mov    QWORD PTR [rsp],r10
             0x00007f55a0cd72e0: mov    rbp,r8
             0x00007f55a0cd72e3: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007f55a0cd72ed: xchg   ax,ax
....................................................................................................
 89.27%  <total for region 1>

....[Hottest Regions]...............................................................................
 89.27%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 (219 bytes) 
  2.90%           libjvm.so  SpinPause (2 bytes) 
  2.85%              kernel  [unknown] (6 bytes) 
  0.28%              kernel  [unknown] (69 bytes) 
  0.26%              kernel  [unknown] (21 bytes) 
  0.20%              kernel  [unknown] (28 bytes) 
  0.17%              kernel  [unknown] (9 bytes) 
  0.13%              kernel  [unknown] (14 bytes) 
  0.11%              kernel  [unknown] (0 bytes) 
  0.07%              kernel  [unknown] (29 bytes) 
  0.07%           libjvm.so  _ZN13SharedRuntime27on_slowpath_allocation_exitEP10JavaThread (9 bytes) 
  0.07%           libjvm.so  _ZN11StringTable25possibly_parallel_oops_doEPN10OopStorage8ParStateILb0ELb0EEEP10OopClosure (41 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (1 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (39 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv (0 bytes) 
  3.16%  <...other 129 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.27%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 
  5.04%              kernel  [unknown] 
  2.90%           libjvm.so  SpinPause 
  0.11%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.11%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.11%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord 
  0.09%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.07%           libjvm.so  _ZN13SharedRuntime27on_slowpath_allocation_exitEP10JavaThread 
  0.07%           libjvm.so  _ZN11StringTable25possibly_parallel_oops_doEPN10OopStorage8ParStateILb0ELb0EEEP10OopClosure 
  0.07%         interpreter  method entry point (kind = zerolocals)  
  0.06%         interpreter  invoke return entry points  
  0.06%           libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.06%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.06%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.06%           libjvm.so  _ZN24HeapRegionRemSetIterator8has_nextERm 
  0.06%              [vdso]  [unknown] 
  0.06%           libjvm.so  _ZN7Monitor6unlockEv 
  0.06%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.06%           libjvm.so  _ZN15G1CollectedHeap23attempt_allocation_slowEm 
  1.57%  <...other 66 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 89.27%                  c2
  5.15%           libjvm.so
  5.04%              kernel
  0.22%         interpreter
  0.15%        libc-2.28.so
  0.09%              [vdso]
  0.02%        runtime stub
  0.02%  libpthread-2.28.so
  0.02%          ld-2.28.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45969 total address lines.
Perf output processed (skipped 6.181 seconds):
 Column 1: cycles (5349 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 (219 bytes) 

             0x00007f276ccd4c48: xor    r8d,r8d            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007f276ccd4c4b: mov    rax,r8
         │   0x00007f276ccd4c4e: add    rsp,0x40
         │   0x00007f276ccd4c52: pop    rbp
         │   0x00007f276ccd4c53: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007f276ccd4c5a: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007f276ccd4c5d: ret    
         │   0x00007f276ccd4c5e: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  3.10%  │↗  0x00007f276ccd4c60: mov    QWORD PTR [r15+0x118],r10
  2.24%  ││  0x00007f276ccd4c67: prefetchw BYTE PTR [r10+0xc0]
  4.77%  ││  0x00007f276ccd4c6f: mov    r10,QWORD PTR [rbx+0xb8]
  3.05%  ││  0x00007f276ccd4c76: mov    QWORD PTR [rax],r10
  5.38%  ││  0x00007f276ccd4c79: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  0.69%  ││  0x00007f276ccd4c80: mov    DWORD PTR [rax+0xc],0x0
  0.54%  ││  0x00007f276ccd4c87: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.18%  ││  0x00007f276ccd4c8f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.05%  ││  0x00007f276ccd4c93: add    r8,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  7.68%  ││  0x00007f276ccd4c97: cmp    rcx,r11
         ╰│  0x00007f276ccd4c9a: je     0x00007f276ccd4c4b  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.13%   │  0x00007f276ccd4c9c: add    rcx,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.22%   │  0x00007f276ccd4ca0: mov    r10,QWORD PTR [r15+0x108]
          │                                                ; ImmutableOopMap{r9=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.42%   │  0x00007f276ccd4ca7: test   DWORD PTR [r10],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.12%   │  0x00007f276ccd4caa: cmp    rcx,0xffffffffffffff80
          │  0x00007f276ccd4cae: jl     0x00007f276ccd4e43  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.19%   │  0x00007f276ccd4cb4: cmp    rcx,0x7f
          │  0x00007f276ccd4cb8: jle    0x00007f276ccd4d94
  0.36%   │  0x00007f276ccd4cbe: mov    rax,QWORD PTR [r15+0x118]
  2.02%   │  0x00007f276ccd4cc5: mov    r10,rax
  2.64%   │  0x00007f276ccd4cc8: add    r10,0x18
  0.24%   │  0x00007f276ccd4ccc: cmp    r10,QWORD PTR [r15+0x128]
          │  0x00007f276ccd4cd3: jae    0x00007f276ccd4e02  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.39%   │  0x00007f276ccd4cd9: mov    QWORD PTR [r15+0x118],r10
  2.73%   │  0x00007f276ccd4ce0: prefetchw BYTE PTR [r10+0xc0]
  7.87%   │  0x00007f276ccd4ce8: mov    r10,QWORD PTR [rbx+0xb8]
  2.22%   │  0x00007f276ccd4cef: mov    QWORD PTR [rax],r10
  3.57%   │  0x00007f276ccd4cf2: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.68%   │  0x00007f276ccd4cf9: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  3.18%   │  0x00007f276ccd4d00: mov    QWORD PTR [rax+0x10],rcx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.67%   │  0x00007f276ccd4d04: mov    edi,DWORD PTR [r9+0x10]  ;*getfield this$0 {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@4 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.56%   │  0x00007f276ccd4d08: movsxd r10,DWORD PTR [r12+rdi*8+0xc]
          │                                                ; implicit exception: dispatches to 0x00007f276ccd4fd2
  1.50%   │  0x00007f276ccd4d0d: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.14%   │  0x00007f276ccd4d11: imul   rdi,rdi
  5.96%   │  0x00007f276ccd4d15: imul   rdi,r10            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.76%   │  0x00007f276ccd4d19: cmp    rdi,0xffffffffffffff80
          │  0x00007f276ccd4d1d: jl     0x00007f276ccd4e7e  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.77%   │  0x00007f276ccd4d23: cmp    rdi,0x7f
          │  0x00007f276ccd4d27: jle    0x00007f276ccd4dcb
  3.57%   │  0x00007f276ccd4d2d: mov    rax,QWORD PTR [r15+0x118]
  1.36%   │  0x00007f276ccd4d34: mov    r10,rax
  0.24%   │  0x00007f276ccd4d37: add    r10,0x18           ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.07%   │  0x00007f276ccd4d3b: cmp    r10,QWORD PTR [r15+0x128]
          ╰  0x00007f276ccd4d42: jb     0x00007f276ccd4c60
             0x00007f276ccd4d48: mov    QWORD PTR [rsp+0x20],rdi
             0x00007f276ccd4d4d: mov    QWORD PTR [rsp+0x18],rcx
             0x00007f276ccd4d52: mov    QWORD PTR [rsp+0x10],r8
             0x00007f276ccd4d57: mov    QWORD PTR [rsp+0x8],rbx
             0x00007f276ccd4d5c: mov    QWORD PTR [rsp],r9
             0x00007f276ccd4d60: mov    rbp,r11
             0x00007f276ccd4d63: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007f276ccd4d6d: xchg   ax,ax
....................................................................................................
 90.28%  <total for region 1>

....[Hottest Regions]...............................................................................
 90.28%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 (219 bytes) 
  3.76%           libjvm.so  SpinPause (2 bytes) 
  2.34%              kernel  [unknown] (6 bytes) 
  0.09%           libjvm.so  _ZN17G1RemSetScanState20G1ClearCardTableTask4workEj (10 bytes) 
  0.07%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (5 bytes) 
  0.07%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv (25 bytes) 
  0.06%              kernel  [unknown] (28 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv (0 bytes) 
  0.06%           libjvm.so  _ZN15G1FromCardCache5clearEj (19 bytes) 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (0 bytes) 
  0.06%           libjvm.so  _ZN13InstanceKlass17allocate_instanceEP6Thread (21 bytes) 
  0.06%           libjvm.so  _ZN12MemAllocator10Allocation31notify_allocation_jvmti_samplerEv (25 bytes) 
  0.06%           libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE (14 bytes) 
  0.06%           libjvm.so  _ZNK6AbsSeq3dsdEv (0 bytes) 
  0.06%  libpthread-2.28.so  pthread_cond_wait@@GLIBC_2.3.2 (0 bytes) 
  0.04%              kernel  [unknown] (13 bytes) 
  0.04%              kernel  [unknown] (18 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  2.67%  <...other 127 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 90.28%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 
  3.76%           libjvm.so  SpinPause 
  3.35%              kernel  [unknown] 
  0.15%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.09%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.09%           libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE 
  0.09%           libjvm.so  _ZN17G1RemSetScanState20G1ClearCardTableTask4workEj 
  0.07%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.07%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord 
  0.07%           libjvm.so  _ZNK8G1Policy20predict_yg_surv_rateEiP13SurvRateGroup 
  0.07%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.06%           libjvm.so  _ZNK6AbsSeq3dsdEv 
  0.06%  libpthread-2.28.so  pthread_cond_wait@@GLIBC_2.3.2 
  0.06%           libjvm.so  _ZN13InstanceKlass17allocate_instanceEP6Thread 
  0.06%           libjvm.so  _ZN12MemAllocator10Allocation31notify_allocation_jvmti_samplerEv 
  0.06%              [vdso]  __vdso_clock_gettime 
  0.06%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.04%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread 
  0.04%           libjvm.so  _ZN5Rdtsc15elapsed_counterEv 
  0.04%           libjvm.so  _ZN10HandleMark10initializeEP6Thread 
  1.44%  <...other 67 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 90.28%                  c2
  5.93%           libjvm.so
  3.35%              kernel
  0.13%  libpthread-2.28.so
  0.11%         interpreter
  0.09%              [vdso]
  0.07%        libc-2.28.so
  0.02%        runtime stub
  0.02%          ld-2.28.so
....................................................................................................
100.00%  <totals>

PrintAssembly processed: 45937 total address lines.
Perf output processed (skipped 6.106 seconds):
 Column 1: cycles (5332 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 (219 bytes) 

             0x00007ff96ccd71c8: xor    r11d,r11d          ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007ff96ccd71cb: mov    rax,r11
         │   0x00007ff96ccd71ce: add    rsp,0x40
         │   0x00007ff96ccd71d2: pop    rbp
         │   0x00007ff96ccd71d3: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007ff96ccd71da: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007ff96ccd71dd: ret    
         │   0x00007ff96ccd71de: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  3.73%  │↗  0x00007ff96ccd71e0: mov    QWORD PTR [r15+0x118],r9
  2.19%  ││  0x00007ff96ccd71e7: prefetchw BYTE PTR [r9+0xc0]
  5.06%  ││  0x00007ff96ccd71ef: mov    r9,QWORD PTR [rbx+0xb8]
  3.34%  ││  0x00007ff96ccd71f6: mov    QWORD PTR [rax],r9
  6.10%  ││  0x00007ff96ccd71f9: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  0.88%  ││  0x00007ff96ccd7200: mov    DWORD PTR [rax+0xc],0x0
  1.05%  ││  0x00007ff96ccd7207: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.05%  ││  0x00007ff96ccd720f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.36%  ││  0x00007ff96ccd7213: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  7.73%  ││  0x00007ff96ccd7217: cmp    rcx,r8
         ╰│  0x00007ff96ccd721a: je     0x00007ff96ccd71cb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.13%   │  0x00007ff96ccd721c: add    rcx,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.39%   │  0x00007ff96ccd7220: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.13%   │  0x00007ff96ccd7227: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.00%   │  0x00007ff96ccd722a: cmp    rcx,0xffffffffffffff80
          │  0x00007ff96ccd722e: jl     0x00007ff96ccd73c3  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.34%   │  0x00007ff96ccd7234: cmp    rcx,0x7f
          │  0x00007ff96ccd7238: jle    0x00007ff96ccd7314
  0.36%   │  0x00007ff96ccd723e: mov    rax,QWORD PTR [r15+0x118]
  1.56%   │  0x00007ff96ccd7245: mov    r9,rax
  2.74%   │  0x00007ff96ccd7248: add    r9,0x18
  0.21%   │  0x00007ff96ccd724c: cmp    r9,QWORD PTR [r15+0x128]
          │  0x00007ff96ccd7253: jae    0x00007ff96ccd7380  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.47%   │  0x00007ff96ccd7259: mov    QWORD PTR [r15+0x118],r9
  3.06%   │  0x00007ff96ccd7260: prefetchw BYTE PTR [r9+0xc0]
  7.37%   │  0x00007ff96ccd7268: mov    r9,QWORD PTR [rbx+0xb8]
  2.27%   │  0x00007ff96ccd726f: mov    QWORD PTR [rax],r9
  3.30%   │  0x00007ff96ccd7272: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.99%   │  0x00007ff96ccd7279: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  2.40%   │  0x00007ff96ccd7280: mov    QWORD PTR [rax+0x10],rcx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.49%   │  0x00007ff96ccd7284: mov    edi,DWORD PTR [r10+0x10]  ;*getfield this$0 {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@4 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.47%   │  0x00007ff96ccd7288: movsxd r9,DWORD PTR [r12+rdi*8+0xc]
          │                                                ; implicit exception: dispatches to 0x00007ff96ccd754a
  1.54%   │  0x00007ff96ccd728d: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.36%   │  0x00007ff96ccd7291: imul   rdi,rdi
  6.06%   │  0x00007ff96ccd7295: imul   rdi,r9             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.82%   │  0x00007ff96ccd7299: cmp    rdi,0xffffffffffffff80
          │  0x00007ff96ccd729d: jl     0x00007ff96ccd73fe  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.21%   │  0x00007ff96ccd72a3: cmp    rdi,0x7f
          │  0x00007ff96ccd72a7: jle    0x00007ff96ccd734a
  3.15%   │  0x00007ff96ccd72ad: mov    rax,QWORD PTR [r15+0x118]
  1.63%   │  0x00007ff96ccd72b4: mov    r9,rax
  0.15%   │  0x00007ff96ccd72b7: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.75%   │  0x00007ff96ccd72bb: cmp    r9,QWORD PTR [r15+0x128]
          ╰  0x00007ff96ccd72c2: jb     0x00007ff96ccd71e0
             0x00007ff96ccd72c8: mov    QWORD PTR [rsp+0x20],rdi
             0x00007ff96ccd72cd: mov    QWORD PTR [rsp+0x18],rcx
             0x00007ff96ccd72d2: mov    QWORD PTR [rsp+0x10],r11
             0x00007ff96ccd72d7: mov    QWORD PTR [rsp+0x8],rbx
             0x00007ff96ccd72dc: mov    QWORD PTR [rsp],r10
             0x00007ff96ccd72e0: mov    rbp,r8
             0x00007ff96ccd72e3: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007ff96ccd72ed: xchg   ax,ax
....................................................................................................
 90.81%  <total for region 1>

....[Hottest Regions]...............................................................................
 90.81%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 (219 bytes) 
  2.89%           libjvm.so  SpinPause (2 bytes) 
  1.29%              kernel  [unknown] (6 bytes) 
  0.34%              kernel  [unknown] (68 bytes) 
  0.23%              kernel  [unknown] (50 bytes) 
  0.13%           libjvm.so  _ZN15G1FromCardCache5clearEj (16 bytes) 
  0.11%              kernel  [unknown] (1 bytes) 
  0.09%              kernel  [unknown] (5 bytes) 
  0.09%          ld-2.28.so  __tls_get_addr (32 bytes) 
  0.08%              kernel  [unknown] (0 bytes) 
  0.08%              kernel  [unknown] (0 bytes) 
  0.08%              kernel  [unknown] (0 bytes) 
  0.08%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (19 bytes) 
  0.08%           libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv (7 bytes) 
  0.06%              kernel  [unknown] (27 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%        libc-2.28.so  __memset_avx2_unaligned_erms (6 bytes) 
  0.04%              kernel  [unknown] (6 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.04%              kernel  [unknown] (15 bytes) 
  3.34%  <...other 151 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 90.85%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 125 
  3.69%              kernel  [unknown] 
  2.89%           libjvm.so  SpinPause 
  0.13%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.11%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.09%          ld-2.28.so  __tls_get_addr 
  0.09%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.08%           libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv 
  0.08%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.06%           libjvm.so  _ZN11RSHashTable5clearEv 
  0.06%           libjvm.so  _ZN29G1ParEvacuateFollowersClosure7do_voidEv 
  0.06%           libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.06%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.06%           libjvm.so  _ZN5frame19oops_interpreted_doEP10OopClosurePK11RegisterMapb 
  0.04%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.04%           libjvm.so  _ZNK8G1Policy30predict_region_elapsed_time_msEP10HeapRegionb 
  0.04%           libjvm.so  _ZNK15G1CollectionSet12iterate_fromEP17HeapRegionClosurejj 
  0.04%           libjvm.so  _ZN20ClassLoaderDataGraph12roots_cld_doEP10CLDClosureS1_ 
  0.04%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.04%           libjvm.so  _ZN10HandleMark10initializeEP6Thread 
  1.46%  <...other 69 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 90.87%                  c2
  4.95%           libjvm.so
  3.69%              kernel
  0.17%        libc-2.28.so
  0.13%          ld-2.28.so
  0.06%  libpthread-2.28.so
  0.06%         interpreter
  0.04%        runtime stub
  0.02%              [vdso]
....................................................................................................
 99.98%  <totals>



# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 37.50% complete, ETA 00:02:50
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.608 ms/op
# Warmup Iteration   2: 0.597 ms/op
# Warmup Iteration   3: 0.598 ms/op
# Warmup Iteration   4: 0.596 ms/op
# Warmup Iteration   5: 0.596 ms/op
Iteration   1: 0.598 ms/op
Iteration   2: 0.594 ms/op
Iteration   3: 0.593 ms/op
Iteration   4: 0.591 ms/op
Iteration   5: 0.591 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 41.67% complete, ETA 00:02:39
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.591 ms/op
# Warmup Iteration   2: 0.572 ms/op
# Warmup Iteration   3: 0.570 ms/op
# Warmup Iteration   4: 0.570 ms/op
# Warmup Iteration   5: 0.570 ms/op
Iteration   1: 0.568 ms/op
Iteration   2: 0.568 ms/op
Iteration   3: 0.643 ms/op
Iteration   4: 0.648 ms/op
Iteration   5: 0.649 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 45.83% complete, ETA 00:02:27
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.663 ms/op
# Warmup Iteration   2: 0.627 ms/op
# Warmup Iteration   3: 0.627 ms/op
# Warmup Iteration   4: 0.624 ms/op
# Warmup Iteration   5: 0.622 ms/op
Iteration   1: 0.621 ms/op
Iteration   2: 0.623 ms/op
Iteration   3: 0.620 ms/op
Iteration   4: 0.619 ms/op
Iteration   5: 0.618 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline":
  0.610 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.568, 0.610, 0.649), stdev = 0.026
  CI (99.9%): [0.582, 0.637] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·asm":
PrintAssembly processed: 45453 total address lines.
Perf output processed (skipped 6.121 seconds):
 Column 1: cycles (5097 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 124 (28 bytes) 

             0x00007fc354cd6371: mov    QWORD PTR [r10+0x30],rax  ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@40 (line 193)
             0x00007fc354cd6375: mov    QWORD PTR [r10+0x20],0x0  ;*invokevirtual sumOfSquares_capturingLambda_inline {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
             0x00007fc354cd637d: add    rsp,0x20
             0x00007fc354cd6381: pop    rbp
             0x00007fc354cd6382: mov    r10,QWORD PTR [r15+0x108]
             0x00007fc354cd6389: test   DWORD PTR [r10],eax  ;   {poll_return}
             0x00007fc354cd638c: ret    
             0x00007fc354cd638d: data16 xchg ax,ax
  1.63%  ↗   0x00007fc354cd6390: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
  0.06%  │   0x00007fc354cd6394: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
  0.77%  │   0x00007fc354cd639b: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 26.78%  │   0x00007fc354cd639e: mov    r9,r8
  1.61%  │   0x00007fc354cd63a1: imul   r9,r8
  0.08%  │   0x00007fc354cd63a5: imul   r9,r11
  1.31%  │   0x00007fc354cd63a9: add    rdx,r9             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
 26.58%  │   0x00007fc354cd63ac: cmp    r8,r10
         ╰   0x00007fc354cd63af: jne    0x00007fc354cd6390
          ╭  0x00007fc354cd63b1: jmp    0x00007fc354cd63b5
          │  0x00007fc354cd63b3: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007fc354cd63b5: mov    rsi,QWORD PTR [rsp]
             0x00007fc354cd63b9: xchg   ax,ax
             0x00007fc354cd63bb: call   0x00007fc354c68f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 58.82%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 (28 bytes) 

               0x00007fc354cd5266: mov    rax,r11
         ╭     0x00007fc354cd5269: jmp    0x00007fc354cd5284
         │     0x00007fc354cd526b: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                   ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
         │ ↗↗  0x00007fc354cd526d: add    rsp,0x10
         │ ││  0x00007fc354cd5271: pop    rbp
         │ ││  0x00007fc354cd5272: mov    r10,QWORD PTR [r15+0x108]
         │ ││  0x00007fc354cd5279: test   DWORD PTR [r10],eax  ;   {poll_return}
         │ ││  0x00007fc354cd527c: ret    
         │ ││  0x00007fc354cd527d: data16 xchg ax,ax
  0.04%  │↗││  0x00007fc354cd5280: add    r8,0x1             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
  8.50%  ↘│││  0x00007fc354cd5284: mov    r9,r8
  0.04%   │││  0x00007fc354cd5287: imul   r9,r8
 10.77%   │││  0x00007fc354cd528b: mov    r14,QWORD PTR [r15+0x108]
          │││                                                ; ImmutableOopMap{rsi=Oop }
          │││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
  0.02%   │││  0x00007fc354cd5292: test   DWORD PTR [r14],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
          │││                                                ;   {poll}
  8.36%   │││  0x00007fc354cd5295: imul   r9,r11
  0.02%   │││  0x00007fc354cd5299: add    rax,r9             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
 10.71%   │││  0x00007fc354cd529c: cmp    r8,r10
          ╰││  0x00007fc354cd529f: jne    0x00007fc354cd5280  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
           ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
           ╰│  0x00007fc354cd52a1: jmp    0x00007fc354cd526d
            │  0x00007fc354cd52a3: mov    rax,r11
            ╰  0x00007fc354cd52a6: jmp    0x00007fc354cd526d
               0x00007fc354cd52a8: hlt    
               0x00007fc354cd52a9: hlt    
               0x00007fc354cd52aa: hlt    
               0x00007fc354cd52ab: hlt    
....................................................................................................
 38.45%  <total for region 2>

....[Hottest Regions]...............................................................................
 58.82%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 124 (28 bytes) 
 38.45%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 (28 bytes) 
  1.65%              kernel  [unknown] (6 bytes) 
  0.12%              kernel  [unknown] (26 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 124 (0 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.51%  <...other 26 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 58.88%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 124 
 38.45%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 
  2.24%              kernel  [unknown] 
  0.02%           libjvm.so  _ZN7nmethod21print_code_comment_onEP12outputStreamiPhS2_ 
  0.02%           libjvm.so  _ZN12PhaseChaitin6SelectEv 
  0.02%           libjvm.so  _ZN14PhaseIdealLoop14get_early_ctrlEP4Node 
  0.02%           libjvm.so  _ZN5Parse7do_callEv 
  0.02%           libjvm.so  _ZN17SignatureIterator18iterate_parametersEv 
  0.02%         interpreter  fast_aload_0  220 fast_aload_0  
  0.02%           libjvm.so  _ZN12PhaseChaitin19interfere_with_liveEjP8IndexSet 
  0.02%         interpreter  bipush  16 bipush  
  0.02%           libjvm.so  _ZN12PhaseChaitin16gather_lrg_masksEb 
  0.02%           libjvm.so  _ZN10oopFactory12new_objArrayEP5KlassiP6Thread 
  0.02%  libpthread-2.28.so  __libc_write 
  0.02%         interpreter  if_acmpne  166 if_acmpne  
  0.02%      hsdis-amd64.so  print_insn 
  0.02%        libc-2.28.so  _int_free 
  0.02%           libjvm.so  _ZN7NTarjan3DFSEPS_R9VectorSetP14PhaseIdealLoopPj 
  0.02%           libjvm.so  _ZNK8AddPNode11bottom_typeEv 
  0.02%  libpthread-2.28.so  __pthread_disable_asynccancel 
  0.08%  <...other 4 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 97.33%                  c2
  2.24%              kernel
  0.24%           libjvm.so
  0.08%         interpreter
  0.06%  libpthread-2.28.so
  0.02%        libc-2.28.so
  0.02%      hsdis-amd64.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45454 total address lines.
Perf output processed (skipped 6.038 seconds):
 Column 1: cycles (5070 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 124 (28 bytes) 

             0x00007fcae8cd6371: mov    QWORD PTR [r10+0x30],rax  ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@40 (line 193)
             0x00007fcae8cd6375: mov    QWORD PTR [r10+0x20],0x0  ;*invokevirtual sumOfSquares_capturingLambda_inline {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
             0x00007fcae8cd637d: add    rsp,0x20
             0x00007fcae8cd6381: pop    rbp
             0x00007fcae8cd6382: mov    r10,QWORD PTR [r15+0x108]
             0x00007fcae8cd6389: test   DWORD PTR [r10],eax  ;   {poll_return}
             0x00007fcae8cd638c: ret    
             0x00007fcae8cd638d: data16 xchg ax,ax
  1.28%  ↗   0x00007fcae8cd6390: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
  0.06%  │   0x00007fcae8cd6394: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
  1.40%  │   0x00007fcae8cd639b: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 27.02%  │   0x00007fcae8cd639e: mov    r9,r8
  1.56%  │   0x00007fcae8cd63a1: imul   r9,r8
  0.06%  │   0x00007fcae8cd63a5: imul   r9,r11
  1.26%  │   0x00007fcae8cd63a9: add    rdx,r9             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
 26.47%  │   0x00007fcae8cd63ac: cmp    r8,r10
         ╰   0x00007fcae8cd63af: jne    0x00007fcae8cd6390
          ╭  0x00007fcae8cd63b1: jmp    0x00007fcae8cd63b5
          │  0x00007fcae8cd63b3: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007fcae8cd63b5: mov    rsi,QWORD PTR [rsp]
             0x00007fcae8cd63b9: xchg   ax,ax
             0x00007fcae8cd63bb: call   0x00007fcae8c68f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 59.11%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 (24 bytes) 

              0x00007fcae8cd526b: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
          ↗↗  0x00007fcae8cd526d: add    rsp,0x10
          ││  0x00007fcae8cd5271: pop    rbp
          ││  0x00007fcae8cd5272: mov    r10,QWORD PTR [r15+0x108]
          ││  0x00007fcae8cd5279: test   DWORD PTR [r10],eax  ;   {poll_return}
          ││  0x00007fcae8cd527c: ret    
          ││  0x00007fcae8cd527d: data16 xchg ax,ax
         ↗││  0x00007fcae8cd5280: add    r8,0x1             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
  8.88%  │││  0x00007fcae8cd5284: mov    r9,r8
  0.02%  │││  0x00007fcae8cd5287: imul   r9,r8
 10.04%  │││  0x00007fcae8cd528b: mov    r14,QWORD PTR [r15+0x108]
         │││                                                ; ImmutableOopMap{rsi=Oop }
         │││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
  0.04%  │││  0x00007fcae8cd5292: test   DWORD PTR [r14],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │││                                                ;   {poll}
  9.15%  │││  0x00007fcae8cd5295: imul   r9,r11
  0.02%  │││  0x00007fcae8cd5299: add    rax,r9             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
 10.61%  │││  0x00007fcae8cd529c: cmp    r8,r10
         ╰││  0x00007fcae8cd529f: jne    0x00007fcae8cd5280  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
          ╰│  0x00007fcae8cd52a1: jmp    0x00007fcae8cd526d
           │  0x00007fcae8cd52a3: mov    rax,r11
           ╰  0x00007fcae8cd52a6: jmp    0x00007fcae8cd526d
              0x00007fcae8cd52a8: hlt    
              0x00007fcae8cd52a9: hlt    
              0x00007fcae8cd52aa: hlt    
              0x00007fcae8cd52ab: hlt    
....................................................................................................
 38.76%  <total for region 2>

....[Hottest Regions]...............................................................................
 59.11%            c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 124 (28 bytes) 
 38.76%            c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 (24 bytes) 
  1.03%        kernel  [unknown] (6 bytes) 
  0.06%   interpreter  method entry point (kind = zerolocals)  (4 bytes) 
  0.04%        kernel  [unknown] (0 bytes) 
  0.04%        kernel  [unknown] (5 bytes) 
  0.04%        kernel  [unknown] (0 bytes) 
  0.04%        kernel  [unknown] (3 bytes) 
  0.04%   interpreter  method entry point (kind = zerolocals)  (3 bytes) 
  0.04%            c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 124 (17 bytes) 
  0.04%     libjvm.so  _ZN12CounterDecay9do_methodEP6Method (12 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.57%  <...other 29 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 59.15%            c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 124 
 38.76%            c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 
  1.52%        kernel  [unknown] 
  0.12%   interpreter  method entry point (kind = zerolocals)  
  0.04%     libjvm.so  _ZN12CounterDecay9do_methodEP6Method 
  0.02%   interpreter  invoke return entry points  
  0.02%     libjvm.so  _ZN7RegMask13smear_to_setsEi 
  0.02%  libc-2.28.so  __strchr_avx2 
  0.02%     libjvm.so  _ZNK7RegMask16is_aligned_pairsEv 
  0.02%   interpreter  iconst_1  4 iconst_1  
  0.02%     libjvm.so  _ZN4Node17raise_bottom_typeEPK4Type 
  0.02%     libjvm.so  _ZN7ciKlass13is_subtype_ofEPS_ 
  0.02%     libjvm.so  _ZN15ciObjectFactory18get_unloaded_klassEP7ciKlassP8ciSymbolb 
  0.02%     libjvm.so  _ZN7Monitor5IWaitEP6Threadl 
  0.02%   interpreter  aload  25 aload  
  0.02%   interpreter  fast_igetfield  208 fast_igetfield  
  0.02%     libjvm.so  _ZN20ThreadInVMfromNativeD1Ev 
  0.02%     libjvm.so  _ZNK8CodeBlob10is_nmethodEv 
  0.02%     libjvm.so  _ZNK15ClassFileParser29verify_legal_method_signatureEPK6SymbolS2_P6Thread 
  0.02%     libjvm.so  _ZN2os13PlatformEvent4parkEl 
  0.10%  <...other 5 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 97.91%            c2
  1.52%        kernel
  0.32%     libjvm.so
  0.20%   interpreter
  0.04%  libc-2.28.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45520 total address lines.
Perf output processed (skipped 5.980 seconds):
 Column 1: cycles (5125 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 (28 bytes) 

               0x00007fc3e8cd4ce6: mov    rax,r11
         ╭     0x00007fc3e8cd4ce9: jmp    0x00007fc3e8cd4d04
         │     0x00007fc3e8cd4ceb: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                   ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
         │ ↗↗  0x00007fc3e8cd4ced: add    rsp,0x10
         │ ││  0x00007fc3e8cd4cf1: pop    rbp
         │ ││  0x00007fc3e8cd4cf2: mov    r10,QWORD PTR [r15+0x108]
         │ ││  0x00007fc3e8cd4cf9: test   DWORD PTR [r10],eax  ;   {poll_return}
         │ ││  0x00007fc3e8cd4cfc: ret    
         │ ││  0x00007fc3e8cd4cfd: data16 xchg ax,ax
  0.14%  │↗││  0x00007fc3e8cd4d00: add    r8,0x1             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
 13.93%  ↘│││  0x00007fc3e8cd4d04: mov    r9,r8
  0.04%   │││  0x00007fc3e8cd4d07: imul   r9,r8
 14.24%   │││  0x00007fc3e8cd4d0b: mov    r14,QWORD PTR [r15+0x108]
          │││                                                ; ImmutableOopMap{rsi=Oop }
          │││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
  0.16%   │││  0x00007fc3e8cd4d12: test   DWORD PTR [r14],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
          │││                                                ;   {poll}
 15.04%   │││  0x00007fc3e8cd4d15: imul   r9,r11
          │││  0x00007fc3e8cd4d19: add    rax,r9             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
 14.30%   │││  0x00007fc3e8cd4d1c: cmp    r8,r10
          ╰││  0x00007fc3e8cd4d1f: jne    0x00007fc3e8cd4d00  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
           ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
           ╰│  0x00007fc3e8cd4d21: jmp    0x00007fc3e8cd4ced
            │  0x00007fc3e8cd4d23: mov    rax,r11
            ╰  0x00007fc3e8cd4d26: jmp    0x00007fc3e8cd4ced
               0x00007fc3e8cd4d28: hlt    
               0x00007fc3e8cd4d29: hlt    
               0x00007fc3e8cd4d2a: hlt    
               0x00007fc3e8cd4d2b: hlt    
....................................................................................................
 57.85%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 125 (28 bytes) 

             0x00007fc3e8cd8f71: mov    QWORD PTR [r10+0x30],rax  ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@40 (line 193)
             0x00007fc3e8cd8f75: mov    QWORD PTR [r10+0x20],0x0  ;*invokevirtual sumOfSquares_capturingLambda_inline {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
             0x00007fc3e8cd8f7d: add    rsp,0x20
             0x00007fc3e8cd8f81: pop    rbp
             0x00007fc3e8cd8f82: mov    r10,QWORD PTR [r15+0x108]
             0x00007fc3e8cd8f89: test   DWORD PTR [r10],eax  ;   {poll_return}
             0x00007fc3e8cd8f8c: ret    
             0x00007fc3e8cd8f8d: data16 xchg ax,ax
  0.21%  ↗   0x00007fc3e8cd8f90: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
  0.18%  │   0x00007fc3e8cd8f94: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
  0.06%  │   0x00007fc3e8cd8f9b: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@72 (line 139)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 19.16%  │   0x00007fc3e8cd8f9e: mov    r9,r8
  0.27%  │   0x00007fc3e8cd8fa1: imul   r9,r8
  0.20%  │   0x00007fc3e8cd8fa5: imul   r9,r11
  0.08%  │   0x00007fc3e8cd8fa9: add    rdx,r9             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
 18.87%  │   0x00007fc3e8cd8fac: cmp    r8,r10
         ╰   0x00007fc3e8cd8faf: jne    0x00007fc3e8cd8f90
          ╭  0x00007fc3e8cd8fb1: jmp    0x00007fc3e8cd8fb5
          │  0x00007fc3e8cd8fb3: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007fc3e8cd8fb5: mov    rsi,QWORD PTR [rsp]
             0x00007fc3e8cd8fb9: xchg   ax,ax
             0x00007fc3e8cd8fbb: call   0x00007fc3e8c68f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 39.02%  <total for region 2>

....[Hottest Regions]...............................................................................
 57.85%              c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 (28 bytes) 
 39.02%              c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 125 (28 bytes) 
  2.34%          kernel  [unknown] (6 bytes) 
  0.06%          kernel  [unknown] (1 bytes) 
  0.06%          kernel  [unknown] (0 bytes) 
  0.06%          kernel  [unknown] (0 bytes) 
  0.04%          kernel  [unknown] (9 bytes) 
  0.04%          kernel  [unknown] (0 bytes) 
  0.04%          kernel  [unknown] (28 bytes) 
  0.04%              c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 125 (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%     interpreter  method entry point (kind = zerolocals)  (0 bytes) 
  0.02%     interpreter  method entry point (kind = zerolocals)  (0 bytes) 
  0.02%     interpreter  getstatic  178 getstatic  (0 bytes) 
  0.23%  <...other 12 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 57.85%              c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 118 
 39.06%              c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_capturingLambda_inline_jmhTest::sumOfSquares_capturingLambda_inline_avgt_jmhStub, version 125 
  2.77%          kernel  [unknown] 
  0.04%     interpreter  method entry point (kind = zerolocals)  
  0.02%       libjvm.so  _ZN9PhaseLive7computeEj 
  0.02%     interpreter  getstatic  178 getstatic  
  0.02%       libjvm.so  _ZN9xmlStream10write_textEPKcm.part.15 
  0.02%       libjvm.so  _ZN20SafepointSynchronize5beginEv 
  0.02%    libc-2.28.so  vfprintf 
  0.02%       libjvm.so  _ZN8PhaseCFG14schedule_localEP5BlockR13GrowableArrayIiER9VectorSetPl 
  0.02%  hsdis-amd64.so  print_insn 
  0.02%       libjvm.so  _ZN12PhaseChaitin14cache_lrg_infoEv 
  0.02%       libjvm.so  _ZNK8BoolNode6OpcodeEv 
  0.02%       libjvm.so  _ZNK10TypeAryPtr18remove_speculativeEv 
  0.02%       libjvm.so  _ZN9ChunkPool8allocateEmN17AllocFailStrategy13AllocFailEnumE 
  0.02%       libjvm.so  _ZN13PhasePeephole12do_transformEv 
  0.02%     interpreter  invokeinterface  185 invokeinterface  
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 96.92%              c2
  2.77%          kernel
  0.18%       libjvm.so
  0.08%     interpreter
  0.02%    libc-2.28.so
  0.02%  hsdis-amd64.so
....................................................................................................
 99.98%  <totals>



# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 50.00% complete, ETA 00:02:16
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 7.892 ms/op
# Warmup Iteration   2: 6.619 ms/op
# Warmup Iteration   3: 6.422 ms/op
# Warmup Iteration   4: 7.135 ms/op
# Warmup Iteration   5: 6.305 ms/op
Iteration   1: 6.392 ms/op
Iteration   2: 6.387 ms/op
Iteration   3: 6.333 ms/op
Iteration   4: 6.371 ms/op
Iteration   5: 6.354 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 54.17% complete, ETA 00:02:04
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 7.637 ms/op
# Warmup Iteration   2: 7.066 ms/op
# Warmup Iteration   3: 6.380 ms/op
# Warmup Iteration   4: 6.370 ms/op
# Warmup Iteration   5: 6.372 ms/op
Iteration   1: 6.415 ms/op
Iteration   2: 6.410 ms/op
Iteration   3: 6.363 ms/op
Iteration   4: 6.375 ms/op
Iteration   5: 6.337 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 58.33% complete, ETA 00:01:53
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.286 ms/op
# Warmup Iteration   2: 6.401 ms/op
# Warmup Iteration   3: 6.343 ms/op
# Warmup Iteration   4: 6.365 ms/op
# Warmup Iteration   5: 6.393 ms/op
Iteration   1: 6.403 ms/op
Iteration   2: 6.365 ms/op
Iteration   3: 6.393 ms/op
Iteration   4: 6.388 ms/op
Iteration   5: 6.331 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda":
  6.375 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (6.331, 6.375, 6.415), stdev = 0.027
  CI (99.9%): [6.345, 6.404] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·asm":
PrintAssembly processed: 45831 total address lines.
Perf output processed (skipped 6.032 seconds):
 Column 1: cycles (5357 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (206 bytes) 

             0x00007ff428cd60c8: xor    r11d,r11d          ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007ff428cd60cb: mov    rax,r11
         │   0x00007ff428cd60ce: add    rsp,0x40
         │   0x00007ff428cd60d2: pop    rbp
         │   0x00007ff428cd60d3: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007ff428cd60da: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007ff428cd60dd: ret    
         │   0x00007ff428cd60de: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.05%  │↗  0x00007ff428cd60e0: mov    QWORD PTR [r15+0x118],r9
  1.83%  ││  0x00007ff428cd60e7: prefetchw BYTE PTR [r9+0xc0]
  7.32%  ││  0x00007ff428cd60ef: mov    r9,QWORD PTR [rbx+0xb8]
  3.57%  ││  0x00007ff428cd60f6: mov    QWORD PTR [rax],r9
  6.91%  ││  0x00007ff428cd60f9: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  2.02%  ││  0x00007ff428cd6100: mov    DWORD PTR [rax+0xc],0x0
  1.57%  ││  0x00007ff428cd6107: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.92%  ││  0x00007ff428cd610f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.50%  ││  0x00007ff428cd6113: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  9.11%  ││  0x00007ff428cd6117: cmp    r8,rcx
         ╰│  0x00007ff428cd611a: je     0x00007ff428cd60cb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.22%   │  0x00007ff428cd611c: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.37%   │  0x00007ff428cd6120: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.65%   │  0x00007ff428cd6127: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.58%   │  0x00007ff428cd612a: cmp    r8,0xffffffffffffff80
          │  0x00007ff428cd612e: jl     0x00007ff428cd62b7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.26%   │  0x00007ff428cd6134: cmp    r8,0x7f
          │  0x00007ff428cd6138: jle    0x00007ff428cd6208
  0.41%   │  0x00007ff428cd613e: mov    rax,QWORD PTR [r15+0x118]
  1.29%   │  0x00007ff428cd6145: mov    r9,rax
  2.71%   │  0x00007ff428cd6148: add    r9,0x18
  0.21%   │  0x00007ff428cd614c: cmp    r9,QWORD PTR [r15+0x128]
          │  0x00007ff428cd6153: jae    0x00007ff428cd6274  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.58%   │  0x00007ff428cd6159: mov    QWORD PTR [r15+0x118],r9
  3.68%   │  0x00007ff428cd6160: prefetchw BYTE PTR [r9+0xc0]
  7.37%   │  0x00007ff428cd6168: mov    r9,QWORD PTR [rbx+0xb8]
  3.58%   │  0x00007ff428cd616f: mov    QWORD PTR [rax],r9
  3.90%   │  0x00007ff428cd6172: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.79%   │  0x00007ff428cd6179: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  3.19%   │  0x00007ff428cd6180: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.78%   │  0x00007ff428cd6184: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.51%   │  0x00007ff428cd6188: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.88%   │  0x00007ff428cd618c: cmp    rdi,0xffffffffffffff80
          │  0x00007ff428cd6190: jl     0x00007ff428cd62f2  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.11%   │  0x00007ff428cd6196: cmp    rdi,0x7f
          │  0x00007ff428cd619a: jle    0x00007ff428cd623e
  2.18%   │  0x00007ff428cd61a0: mov    rax,QWORD PTR [r15+0x118]
  1.46%   │  0x00007ff428cd61a7: mov    r9,rax
  0.28%   │  0x00007ff428cd61aa: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.70%   │  0x00007ff428cd61ae: cmp    r9,QWORD PTR [r15+0x128]
          ╰  0x00007ff428cd61b5: jb     0x00007ff428cd60e0
             0x00007ff428cd61bb: mov    QWORD PTR [rsp+0x20],rdi
             0x00007ff428cd61c0: mov    QWORD PTR [rsp+0x18],rbx
             0x00007ff428cd61c5: mov    QWORD PTR [rsp+0x10],r8
             0x00007ff428cd61ca: mov    QWORD PTR [rsp+0x8],r10
             0x00007ff428cd61cf: mov    QWORD PTR [rsp],r11
             0x00007ff428cd61d3: mov    rbp,rcx
             0x00007ff428cd61d6: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007ff428cd61e0: data16 xchg ax,ax
....................................................................................................
 90.50%  <total for region 1>

....[Hottest Regions]...............................................................................
 90.50%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (206 bytes) 
  2.78%           libjvm.so  SpinPause (0 bytes) 
  2.17%              kernel  [unknown] (6 bytes) 
  0.19%              kernel  [unknown] (56 bytes) 
  0.15%              kernel  [unknown] (34 bytes) 
  0.09%              kernel  [unknown] (38 bytes) 
  0.09%           libjvm.so  _ZN13InstanceKlass17allocate_instanceEP6Thread (22 bytes) 
  0.09%           libjvm.so  _ZN7Monitor6unlockEv (54 bytes) 
  0.09%           libjvm.so  _ZN15RSHashTableIter8has_nextERm (25 bytes) 
  0.09%        libc-2.28.so  __memset_avx2_unaligned_erms (12 bytes) 
  0.07%              kernel  [unknown] (13 bytes) 
  0.07%              kernel  [unknown] (34 bytes) 
  0.07%  libpthread-2.28.so  __pthread_disable_asynccancel (16 bytes) 
  0.06%              kernel  [unknown] (3 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv (4 bytes) 
  0.06%           libjvm.so  _ZN15G1FromCardCache5clearEj (12 bytes) 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (0 bytes) 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (5 bytes) 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (26 bytes) 
  3.12%  <...other 134 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 90.50%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 
  3.70%              kernel  [unknown] 
  2.78%           libjvm.so  SpinPause 
  0.15%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.15%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.09%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.09%           libjvm.so  _ZN13InstanceKlass17allocate_instanceEP6Thread 
  0.09%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.09%           libjvm.so  _ZN7Monitor6unlockEv 
  0.07%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.07%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.07%  libpthread-2.28.so  __pthread_disable_asynccancel 
  0.07%              [vdso]  __vdso_clock_gettime 
  0.07%           libjvm.so  _ZN15G1CollectedHeap17allocate_new_tlabEmmPm 
  0.06%           libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE 
  0.06%           libjvm.so  _ZN5Rdtsc15elapsed_counterEv 
  0.06%           libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.06%         interpreter  method entry point (kind = zerolocals)  
  0.06%              [vdso]  [unknown] 
  0.06%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  1.62%  <...other 70 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 90.50%                  c2
  5.17%           libjvm.so
  3.70%              kernel
  0.22%        libc-2.28.so
  0.13%              [vdso]
  0.13%         interpreter
  0.11%  libpthread-2.28.so
  0.02%          libjava.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45829 total address lines.
Perf output processed (skipped 6.103 seconds):
 Column 1: cycles (5430 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (219 bytes) 

             0x00007fdc54cd7dc8: xor    r11d,r11d          ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007fdc54cd7dcb: mov    rax,r11
         │   0x00007fdc54cd7dce: add    rsp,0x40
         │   0x00007fdc54cd7dd2: pop    rbp
         │   0x00007fdc54cd7dd3: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007fdc54cd7dda: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007fdc54cd7ddd: ret    
         │   0x00007fdc54cd7dde: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.41%  │↗  0x00007fdc54cd7de0: mov    QWORD PTR [r15+0x118],r9
  1.88%  ││  0x00007fdc54cd7de7: prefetchw BYTE PTR [r9+0xc0]
  7.26%  ││  0x00007fdc54cd7def: mov    r9,QWORD PTR [rbx+0xb8]
  3.54%  ││  0x00007fdc54cd7df6: mov    QWORD PTR [rax],r9
  6.83%  ││  0x00007fdc54cd7df9: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.99%  ││  0x00007fdc54cd7e00: mov    DWORD PTR [rax+0xc],0x0
  2.01%  ││  0x00007fdc54cd7e07: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.19%  ││  0x00007fdc54cd7e0f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.04%  ││  0x00007fdc54cd7e13: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  7.99%  ││  0x00007fdc54cd7e17: cmp    r8,rcx
         ╰│  0x00007fdc54cd7e1a: je     0x00007fdc54cd7dcb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.28%   │  0x00007fdc54cd7e1c: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.29%   │  0x00007fdc54cd7e20: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.72%   │  0x00007fdc54cd7e27: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.59%   │  0x00007fdc54cd7e2a: cmp    r8,0xffffffffffffff80
          │  0x00007fdc54cd7e2e: jl     0x00007fdc54cd7fb7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.20%   │  0x00007fdc54cd7e34: cmp    r8,0x7f
          │  0x00007fdc54cd7e38: jle    0x00007fdc54cd7f08
  0.39%   │  0x00007fdc54cd7e3e: mov    rax,QWORD PTR [r15+0x118]
  1.55%   │  0x00007fdc54cd7e45: mov    r9,rax
  2.89%   │  0x00007fdc54cd7e48: add    r9,0x18
  0.29%   │  0x00007fdc54cd7e4c: cmp    r9,QWORD PTR [r15+0x128]
          │  0x00007fdc54cd7e53: jae    0x00007fdc54cd7f74  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.53%   │  0x00007fdc54cd7e59: mov    QWORD PTR [r15+0x118],r9
  3.19%   │  0x00007fdc54cd7e60: prefetchw BYTE PTR [r9+0xc0]
  7.92%   │  0x00007fdc54cd7e68: mov    r9,QWORD PTR [rbx+0xb8]
  3.33%   │  0x00007fdc54cd7e6f: mov    QWORD PTR [rax],r9
  4.11%   │  0x00007fdc54cd7e72: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.66%   │  0x00007fdc54cd7e79: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  2.93%   │  0x00007fdc54cd7e80: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.66%   │  0x00007fdc54cd7e84: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.82%   │  0x00007fdc54cd7e88: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.80%   │  0x00007fdc54cd7e8c: cmp    rdi,0xffffffffffffff80
          │  0x00007fdc54cd7e90: jl     0x00007fdc54cd7ff2  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.57%   │  0x00007fdc54cd7e96: cmp    rdi,0x7f
          │  0x00007fdc54cd7e9a: jle    0x00007fdc54cd7f3e
  2.04%   │  0x00007fdc54cd7ea0: mov    rax,QWORD PTR [r15+0x118]
  1.62%   │  0x00007fdc54cd7ea7: mov    r9,rax
  0.24%   │  0x00007fdc54cd7eaa: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.79%   │  0x00007fdc54cd7eae: cmp    r9,QWORD PTR [r15+0x128]
          ╰  0x00007fdc54cd7eb5: jb     0x00007fdc54cd7de0
  0.02%      0x00007fdc54cd7ebb: mov    QWORD PTR [rsp+0x20],rdi
             0x00007fdc54cd7ec0: mov    QWORD PTR [rsp+0x18],rbx
             0x00007fdc54cd7ec5: mov    QWORD PTR [rsp+0x10],r8
             0x00007fdc54cd7eca: mov    QWORD PTR [rsp+0x8],r10
             0x00007fdc54cd7ecf: mov    QWORD PTR [rsp],r11
             0x00007fdc54cd7ed3: mov    rbp,rcx
             0x00007fdc54cd7ed6: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007fdc54cd7ee0: data16 xchg ax,ax
             0x00007fdc54cd7ee3: call   0x00007fdc54c9ed00  ; ImmutableOopMap{[8]=Oop }
                                                           ;*new {reexecute=0 rethrow=0 return_oop=1}
                                                           ; - java.lang.Long::valueOf@31 (line 1180)
....................................................................................................
 89.58%  <total for region 1>

....[Hottest Regions]...............................................................................
 89.58%            c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (219 bytes) 
  3.48%     libjvm.so  SpinPause (0 bytes) 
  2.62%        kernel  [unknown] (6 bytes) 
  0.29%        kernel  [unknown] (59 bytes) 
  0.18%        kernel  [unknown] (24 bytes) 
  0.17%        kernel  [unknown] (59 bytes) 
  0.13%        kernel  [unknown] (14 bytes) 
  0.11%  libc-2.28.so  __memset_avx2_unaligned_erms (12 bytes) 
  0.09%        kernel  [unknown] (13 bytes) 
  0.09%        kernel  [unknown] (4 bytes) 
  0.07%        kernel  [unknown] (0 bytes) 
  0.07%        kernel  [unknown] (15 bytes) 
  0.07%     libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (4 bytes) 
  0.06%        kernel  [unknown] (0 bytes) 
  0.06%        kernel  [unknown] (12 bytes) 
  0.06%        kernel  [unknown] (0 bytes) 
  0.06%     libjvm.so  _ZN15G1FromCardCache5clearEj (8 bytes) 
  0.06%     libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (13 bytes) 
  0.06%     libjvm.so  _ZN13SharedRuntime27on_slowpath_allocation_exitEP10JavaThread (3 bytes) 
  0.06%  libc-2.28.so  __memset_avx2_unaligned_erms (27 bytes) 
  2.60%  <...other 126 warm regions...>
....................................................................................................
 99.94%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.59%            c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 
  4.59%        kernel  [unknown] 
  3.48%     libjvm.so  SpinPause 
  0.17%  libc-2.28.so  __memset_avx2_unaligned_erms 
  0.09%     libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.09%     libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.07%     libjvm.so  _ZN16G1ParCopyClosureIL9G1Barrier0EL6G1Mark0EE6do_oopEPP7oopDesc 
  0.06%     libjvm.so  _ZN18MutatorAllocRegion6retireEb 
  0.06%     libjvm.so  _ZN13SharedRuntime27on_slowpath_allocation_exitEP10JavaThread 
  0.06%     libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord 
  0.06%     libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.06%     libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.04%     libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.04%     libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread 
  0.04%     libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE 
  0.04%     libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.04%     libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.04%     libjvm.so  _ZN2os15elapsed_counterEv 
  0.04%   interpreter  method entry point (kind = zerolocals)  
  0.04%     libjvm.so  _ZNK13InstanceKlass12klass_holderEv 
  1.29%  <...other 65 warm methods...>
....................................................................................................
 99.94%  <totals>

....[Distribution by Source]........................................................................
 89.59%            c2
  5.40%     libjvm.so
  4.59%        kernel
  0.22%  libc-2.28.so
  0.15%   interpreter
....................................................................................................
 99.94%  <totals>

PrintAssembly processed: 45875 total address lines.
Perf output processed (skipped 6.056 seconds):
 Column 1: cycles (5322 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (219 bytes) 

             0x00007ff97ccd8cc8: xor    r11d,r11d          ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007ff97ccd8ccb: mov    rax,r11
         │   0x00007ff97ccd8cce: add    rsp,0x40
         │   0x00007ff97ccd8cd2: pop    rbp
         │   0x00007ff97ccd8cd3: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007ff97ccd8cda: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007ff97ccd8cdd: ret    
         │   0x00007ff97ccd8cde: xchg   ax,ax              ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.54%  │↗  0x00007ff97ccd8ce0: mov    QWORD PTR [r15+0x118],r9
  1.84%  ││  0x00007ff97ccd8ce7: prefetchw BYTE PTR [r9+0xc0]
  6.56%  ││  0x00007ff97ccd8cef: mov    r9,QWORD PTR [rbx+0xb8]
  3.44%  ││  0x00007ff97ccd8cf6: mov    QWORD PTR [rax],r9
  6.76%  ││  0x00007ff97ccd8cf9: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.88%  ││  0x00007ff97ccd8d00: mov    DWORD PTR [rax+0xc],0x0
  1.63%  ││  0x00007ff97ccd8d07: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.52%  ││  0x00007ff97ccd8d0f: mov    QWORD PTR [rax+0x10],rdi  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.09%  ││  0x00007ff97ccd8d13: add    r11,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  8.21%  ││  0x00007ff97ccd8d17: cmp    r8,rcx
         ╰│  0x00007ff97ccd8d1a: je     0x00007ff97ccd8ccb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.26%   │  0x00007ff97ccd8d1c: add    r8,0x1             ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.56%   │  0x00007ff97ccd8d20: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{r10=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.81%   │  0x00007ff97ccd8d27: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.51%   │  0x00007ff97ccd8d2a: cmp    r8,0xffffffffffffff80
          │  0x00007ff97ccd8d2e: jl     0x00007ff97ccd8eb7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.32%   │  0x00007ff97ccd8d34: cmp    r8,0x7f
          │  0x00007ff97ccd8d38: jle    0x00007ff97ccd8e08
  0.36%   │  0x00007ff97ccd8d3e: mov    rax,QWORD PTR [r15+0x118]
  1.65%   │  0x00007ff97ccd8d45: mov    r9,rax
  2.57%   │  0x00007ff97ccd8d48: add    r9,0x18
  0.24%   │  0x00007ff97ccd8d4c: cmp    r9,QWORD PTR [r15+0x128]
          │  0x00007ff97ccd8d53: jae    0x00007ff97ccd8e74  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.58%   │  0x00007ff97ccd8d59: mov    QWORD PTR [r15+0x118],r9
  3.21%   │  0x00007ff97ccd8d60: prefetchw BYTE PTR [r9+0xc0]
  8.62%   │  0x00007ff97ccd8d68: mov    r9,QWORD PTR [rbx+0xb8]
  3.74%   │  0x00007ff97ccd8d6f: mov    QWORD PTR [rax],r9
  4.11%   │  0x00007ff97ccd8d72: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.43%   │  0x00007ff97ccd8d79: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  3.10%   │  0x00007ff97ccd8d80: mov    QWORD PTR [rax+0x10],r8  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.92%   │  0x00007ff97ccd8d84: mov    rdi,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.14%   │  0x00007ff97ccd8d88: imul   rdi,rdi            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  6.09%   │  0x00007ff97ccd8d8c: cmp    rdi,0xffffffffffffff80
          │  0x00007ff97ccd8d90: jl     0x00007ff97ccd8ef2  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.27%   │  0x00007ff97ccd8d96: cmp    rdi,0x7f
          │  0x00007ff97ccd8d9a: jle    0x00007ff97ccd8e3e
  2.22%   │  0x00007ff97ccd8da0: mov    rax,QWORD PTR [r15+0x118]
  1.69%   │  0x00007ff97ccd8da7: mov    r9,rax
  0.28%   │  0x00007ff97ccd8daa: add    r9,0x18            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.39%   │  0x00007ff97ccd8dae: cmp    r9,QWORD PTR [r15+0x128]
          ╰  0x00007ff97ccd8db5: jb     0x00007ff97ccd8ce0
  0.02%      0x00007ff97ccd8dbb: mov    QWORD PTR [rsp+0x20],rdi
             0x00007ff97ccd8dc0: mov    QWORD PTR [rsp+0x18],rbx
             0x00007ff97ccd8dc5: mov    QWORD PTR [rsp+0x10],r8
             0x00007ff97ccd8dca: mov    QWORD PTR [rsp+0x8],r10
             0x00007ff97ccd8dcf: mov    QWORD PTR [rsp],r11
             0x00007ff97ccd8dd3: mov    rbp,rcx
             0x00007ff97ccd8dd6: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007ff97ccd8de0: data16 xchg ax,ax
             0x00007ff97ccd8de3: call   0x00007ff97cc9ed00  ; ImmutableOopMap{[8]=Oop }
                                                           ;*new {reexecute=0 rethrow=0 return_oop=1}
                                                           ; - java.lang.Long::valueOf@31 (line 1180)
....................................................................................................
 91.58%  <total for region 1>

....[Hottest Regions]...............................................................................
 91.58%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 (219 bytes) 
  3.01%              kernel  [unknown] (6 bytes) 
  1.73%           libjvm.so  SpinPause (0 bytes) 
  0.21%              kernel  [unknown] (67 bytes) 
  0.17%              kernel  [unknown] (24 bytes) 
  0.09%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (17 bytes) 
  0.08%              kernel  [unknown] (0 bytes) 
  0.08%           libjvm.so  _ZNK13InstanceKlass12klass_holderEv (0 bytes) 
  0.08%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj (21 bytes) 
  0.08%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (24 bytes) 
  0.08%           libjvm.so  _ZNK12MemAllocator8allocateEv (3 bytes) 
  0.08%           libjvm.so  _ZN7Monitor6unlockEv (0 bytes) 
  0.06%              kernel  [unknown] (14 bytes) 
  0.06%           libjvm.so  _ZN15G1FromCardCache5clearEj (19 bytes) 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (5 bytes) 
  0.06%           libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv (7 bytes) 
  0.06%  libpthread-2.28.so  __new_sem_wait_slow.constprop.0 (0 bytes) 
  0.04%              kernel  [unknown] (10 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  2.35%  <...other 113 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 91.58%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 124 
  4.00%              kernel  [unknown] 
  1.73%           libjvm.so  SpinPause 
  0.17%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.09%           libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE 
  0.09%           libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.09%           libjvm.so  _ZNK12ObjAllocator10initializeEP8HeapWord 
  0.09%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj 
  0.08%           libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv 
  0.08%           libjvm.so  _ZNK13InstanceKlass12klass_holderEv 
  0.08%           libjvm.so  _ZN7Monitor6unlockEv 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.06%  libpthread-2.28.so  __new_sem_wait_slow.constprop.0 
  0.06%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.06%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.04%           libjvm.so  _ZN12ConstantPool21impl_signature_ref_atEib 
  0.04%           libjvm.so  _ZN19CardTableBarrierSet27on_slowpath_allocation_exitEP10JavaThreadP7oopDesc 
  0.04%           libjvm.so  _ZN12TruncatedSeq3addEd 
  0.04%           libjvm.so  _ZN29CompositeElapsedCounterSource3nowEv 
  0.04%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread 
  1.48%  <...other 67 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 91.58%                  c2
  4.02%           libjvm.so
  4.00%              kernel
  0.19%        libc-2.28.so
  0.08%  libpthread-2.28.so
  0.06%         interpreter
  0.04%        runtime stub
  0.02%          ld-2.28.so
....................................................................................................
 99.98%  <totals>



# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 62.50% complete, ETA 00:01:41
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.596 ms/op
# Warmup Iteration   2: 0.569 ms/op
# Warmup Iteration   3: 0.568 ms/op
# Warmup Iteration   4: 0.644 ms/op
# Warmup Iteration   5: 0.648 ms/op
Iteration   1: 0.644 ms/op
Iteration   2: 0.641 ms/op
Iteration   3: 0.640 ms/op
Iteration   4: 0.644 ms/op
Iteration   5: 0.640 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 66.67% complete, ETA 00:01:30
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.601 ms/op
# Warmup Iteration   2: 0.579 ms/op
# Warmup Iteration   3: 0.580 ms/op
# Warmup Iteration   4: 0.579 ms/op
# Warmup Iteration   5: 0.578 ms/op
Iteration   1: 0.582 ms/op
Iteration   2: 0.579 ms/op
Iteration   3: 0.580 ms/op
Iteration   4: 0.581 ms/op
Iteration   5: 0.580 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 70.83% complete, ETA 00:01:19
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.665 ms/op
# Warmup Iteration   2: 0.637 ms/op
# Warmup Iteration   3: 0.636 ms/op
# Warmup Iteration   4: 0.636 ms/op
# Warmup Iteration   5: 0.635 ms/op
Iteration   1: 0.633 ms/op
Iteration   2: 0.634 ms/op
Iteration   3: 0.633 ms/op
Iteration   4: 0.635 ms/op
Iteration   5: 0.635 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline":
  0.619 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.579, 0.619, 0.644), stdev = 0.028
  CI (99.9%): [0.588, 0.649] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·asm":
PrintAssembly processed: 45438 total address lines.
Perf output processed (skipped 6.100 seconds):
 Column 1: cycles (5098 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 (40 bytes) 

               0x00007fcefccd4ddb: cmp    r10,0x1
         ╭     0x00007fcefccd4ddf: je     0x00007fcefccd4deb  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                   ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
         │     0x00007fcefccd4de1: mov    r11d,0x2           ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                   ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │╭    0x00007fcefccd4de7: jmp    0x00007fcefccd4e04
         ││    0x00007fcefccd4de9: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         ││                                                  ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
         ↘│ ↗  0x00007fcefccd4deb: add    rsp,0x10
          │ │  0x00007fcefccd4def: pop    rbp
  0.02%   │ │  0x00007fcefccd4df0: mov    r10,QWORD PTR [r15+0x108]
          │ │  0x00007fcefccd4df7: test   DWORD PTR [r10],eax  ;   {poll_return}
          │ │  0x00007fcefccd4dfa: ret    
          │ │  0x00007fcefccd4dfb: nop    DWORD PTR [rax+rax*1+0x0]
  3.75%   │↗│  0x00007fcefccd4e00: add    r11,0x1            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  2.88%   ↘││  0x00007fcefccd4e04: mov    r8,r11
 17.99%    ││  0x00007fcefccd4e07: imul   r8,r11
  4.20%    ││  0x00007fcefccd4e0b: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{}
           ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
           ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
  3.45%    ││  0x00007fcefccd4e12: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
           ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
           ││                                                ;   {poll}
 21.75%    ││  0x00007fcefccd4e15: add    rax,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
           ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  4.14%    ││  0x00007fcefccd4e18: cmp    r11,r10
           ╰│  0x00007fcefccd4e1b: jne    0x00007fcefccd4e00  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
            │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
            ╰  0x00007fcefccd4e1d: jmp    0x00007fcefccd4deb
               0x00007fcefccd4e1f: hlt    
             [Exception Handler]
             [Stub Code]
               0x00007fcefccd4e20: jmp    0x00007fcefcc9f680  ;   {no_reloc}
             [Deopt Handler Code]
               0x00007fcefccd4e25: call   0x00007fcefccd4e2a
....................................................................................................
 58.18%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (24 bytes) 

             0x00007fcefccd6f3c: mov    r10,QWORD PTR [rsp+0x38]
             0x00007fcefccd6f41: movzx  r10d,BYTE PTR [r10+0x94]  ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@30 (line 192)
                                                           ; implicit exception: dispatches to 0x00007fcefccd7086
             0x00007fcefccd6f49: test   r10d,r10d
             0x00007fcefccd6f4c: jne    0x00007fcefccd6fce  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@33 (line 192)
             0x00007fcefccd6f52: mov    ebp,0x1
             0x00007fcefccd6f57: jmp    0x00007fcefccd6fac
             0x00007fcefccd6f59: nop    DWORD PTR [rax+0x0]
 13.24%  ↗   0x00007fcefccd6f60: add    r11,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  2.39%  │   0x00007fcefccd6f64: mov    r8,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  1.77%  │   0x00007fcefccd6f6b: test   DWORD PTR [r8],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 15.22%  │   0x00007fcefccd6f6e: mov    r8,r11
  2.10%  │   0x00007fcefccd6f71: imul   r8,r11
  2.35%  │   0x00007fcefccd6f75: add    rdx,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  2.16%  │   0x00007fcefccd6f78: cmp    r11,r10
         ╰   0x00007fcefccd6f7b: jne    0x00007fcefccd6f60
          ╭  0x00007fcefccd6f7d: jmp    0x00007fcefccd6f81
          │  0x00007fcefccd6f7f: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007fcefccd6f81: mov    rsi,QWORD PTR [rsp]
             0x00007fcefccd6f85: xchg   ax,ax
             0x00007fcefccd6f87: call   0x00007fcefcc68f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 39.23%  <total for region 2>

....[Hottest Regions]...............................................................................
 58.18%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 (40 bytes) 
 39.23%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (24 bytes) 
  1.59%              kernel  [unknown] (6 bytes) 
  0.08%              kernel  [unknown] (27 bytes) 
  0.08%              kernel  [unknown] (0 bytes) 
  0.04%              kernel  [unknown] (14 bytes) 
  0.04%         interpreter  invokevirtual  182 invokevirtual  (0 bytes) 
  0.04%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (10 bytes) 
  0.04%           libjvm.so  _ZNK13WatcherThread5sleepEv (0 bytes) 
  0.04%  libpthread-2.28.so  __pthread_mutex_lock (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.43%  <...other 22 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 58.18%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 
 39.27%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 
  2.00%              kernel  [unknown] 
  0.04%  libpthread-2.28.so  __pthread_mutex_lock 
  0.04%           libjvm.so  _ZNK13WatcherThread5sleepEv 
  0.04%         interpreter  invokevirtual  182 invokevirtual  
  0.02%           libjvm.so  _ZN7VMError17is_error_reportedEv 
  0.02%           libjvm.so  _ZN7Matcher11find_sharedEP4Node 
  0.02%           libjvm.so  _ZN10JavaThread13pd_last_frameEv 
  0.02%           libjvm.so  _ZN25PhaseConservativeCoalesce8coalesceEP5Block 
  0.02%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.02%           libjvm.so  _ZN7Monitor5IWaitEP6Threadl 
  0.02%           libjvm.so  _ZN10fileStream5writeEPKcm 
  0.02%           libjvm.so  _ZN18HighResTimeSampler11take_sampleEv 
  0.02%           libjvm.so  _ZNK9MultiNode6is_CFGEv 
  0.02%         interpreter  aload_1  43 aload_1  
  0.02%         interpreter  lload  22 lload  
  0.02%         interpreter  fast_aload_0  220 fast_aload_0  
  0.02%           libjvm.so  _ZNK15ImmutableOopMap8print_onEP12outputStream 
  0.02%           libjvm.so  _ZNK5Arena8containsEPKv 
  0.14%  <...other 7 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 97.45%                  c2
  2.00%              kernel
  0.33%           libjvm.so
  0.14%         interpreter
  0.04%  libpthread-2.28.so
  0.02%        libc-2.28.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45462 total address lines.
Perf output processed (skipped 6.076 seconds):
 Column 1: cycles (5140 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (24 bytes) 

             0x00007f6fdccd6f3c: mov    r10,QWORD PTR [rsp+0x38]
             0x00007f6fdccd6f41: movzx  r10d,BYTE PTR [r10+0x94]  ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@30 (line 192)
                                                           ; implicit exception: dispatches to 0x00007f6fdccd7086
             0x00007f6fdccd6f49: test   r10d,r10d
             0x00007f6fdccd6f4c: jne    0x00007f6fdccd6fce  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@33 (line 192)
             0x00007f6fdccd6f52: mov    ebp,0x1
             0x00007f6fdccd6f57: jmp    0x00007f6fdccd6fac
             0x00007f6fdccd6f59: nop    DWORD PTR [rax+0x0]
 19.18%  ↗   0x00007f6fdccd6f60: add    r11,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  3.27%  │   0x00007f6fdccd6f64: mov    r8,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  3.17%  │   0x00007f6fdccd6f6b: test   DWORD PTR [r8],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 22.45%  │   0x00007f6fdccd6f6e: mov    r8,r11
  3.42%  │   0x00007f6fdccd6f71: imul   r8,r11
  3.44%  │   0x00007f6fdccd6f75: add    rdx,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  3.40%  │   0x00007f6fdccd6f78: cmp    r11,r10
         ╰   0x00007f6fdccd6f7b: jne    0x00007f6fdccd6f60
          ╭  0x00007f6fdccd6f7d: jmp    0x00007f6fdccd6f81
          │  0x00007f6fdccd6f7f: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007f6fdccd6f81: mov    rsi,QWORD PTR [rsp]
             0x00007f6fdccd6f85: xchg   ax,ax
             0x00007f6fdccd6f87: call   0x00007f6fdcc68f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 58.35%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 (24 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
             0x00007f6fdccd4de7: jmp    0x00007f6fdccd4e04
             0x00007f6fdccd4de9: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
          ↗  0x00007f6fdccd4deb: add    rsp,0x10
          │  0x00007f6fdccd4def: pop    rbp
          │  0x00007f6fdccd4df0: mov    r10,QWORD PTR [r15+0x108]
          │  0x00007f6fdccd4df7: test   DWORD PTR [r10],eax  ;   {poll_return}
          │  0x00007f6fdccd4dfa: ret    
          │  0x00007f6fdccd4dfb: nop    DWORD PTR [rax+rax*1+0x0]
  2.10%  ↗│  0x00007f6fdccd4e00: add    r11,0x1            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  1.50%  ││  0x00007f6fdccd4e04: mov    r8,r11
 13.19%  ││  0x00007f6fdccd4e07: imul   r8,r11
  2.47%  ││  0x00007f6fdccd4e0b: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{}
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
  2.12%  ││  0x00007f6fdccd4e12: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         ││                                                ;   {poll}
 14.44%  ││  0x00007f6fdccd4e15: add    rax,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  1.75%  ││  0x00007f6fdccd4e18: cmp    r11,r10
         ╰│  0x00007f6fdccd4e1b: jne    0x00007f6fdccd4e00  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
          ╰  0x00007f6fdccd4e1d: jmp    0x00007f6fdccd4deb
             0x00007f6fdccd4e1f: hlt    
           [Exception Handler]
           [Stub Code]
             0x00007f6fdccd4e20: jmp    0x00007f6fdcc9f680  ;   {no_reloc}
           [Deopt Handler Code]
             0x00007f6fdccd4e25: call   0x00007f6fdccd4e2a
....................................................................................................
 37.57%  <total for region 2>

....[Hottest Regions]...............................................................................
 58.35%              c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (24 bytes) 
 37.57%              c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 (24 bytes) 
  3.04%          kernel  [unknown] (6 bytes) 
  0.06%          kernel  [unknown] (0 bytes) 
  0.06%              c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (14 bytes) 
  0.04%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.02%          kernel  [unknown] (0 bytes) 
  0.60%  <...other 31 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 58.40%              c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 
 37.57%              c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 
  3.64%          kernel  [unknown] 
  0.06%     interpreter  method entry point (kind = zerolocals)  
  0.02%     interpreter  invokevirtual  182 invokevirtual  
  0.02%     interpreter  aload_1  43 aload_1  
  0.02%       libjvm.so  _ZN7Matcher10ReduceOperEP5StateiRP4NodeP8MachNode 
  0.02%       libjvm.so  _ZN12PhaseChaitin16gather_lrg_masksEb 
  0.02%       libjvm.so  _ZN12outputStream15update_positionEPKcm 
  0.02%     interpreter  iload_3  29 iload_3  
  0.02%       libjvm.so  _ZNK7RegMask13is_bound_pairEv 
  0.02%       libjvm.so  _ZNK8CmpPNode3subEPK4TypeS2_ 
  0.02%     interpreter  return  177 return  
  0.02%  hsdis-amd64.so  print_insn 
  0.02%       libjvm.so  _ZN12outputStream7move_toEiii 
  0.02%     interpreter  arraylength  190 arraylength  
  0.02%       libjvm.so  _ZNK10NativeCall11destinationEv 
  0.02%       libjvm.so  _ZNK4Type4hashEv 
  0.02%       libjvm.so  _ZN15ciObjectFactory12get_metadataEP8Metadata 
  0.02%       libjvm.so  _ZN16PhaseBlockLayout10find_edgesEv 
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 95.97%              c2
  3.64%          kernel
  0.19%       libjvm.so
  0.16%     interpreter
  0.02%  hsdis-amd64.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45436 total address lines.
Perf output processed (skipped 6.023 seconds):
 Column 1: cycles (5141 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 (24 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
             0x00007f6a6ccd8b67: jmp    0x00007f6a6ccd8b84
             0x00007f6a6ccd8b69: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
          ↗  0x00007f6a6ccd8b6b: add    rsp,0x10
          │  0x00007f6a6ccd8b6f: pop    rbp
          │  0x00007f6a6ccd8b70: mov    r10,QWORD PTR [r15+0x108]
          │  0x00007f6a6ccd8b77: test   DWORD PTR [r10],eax  ;   {poll_return}
          │  0x00007f6a6ccd8b7a: ret    
          │  0x00007f6a6ccd8b7b: nop    DWORD PTR [rax+rax*1+0x0]
  2.70%  ↗│  0x00007f6a6ccd8b80: add    r11,0x1            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  2.80%  ││  0x00007f6a6ccd8b84: mov    r8,r11
 19.51%  ││  0x00007f6a6ccd8b87: imul   r8,r11
  4.47%  ││  0x00007f6a6ccd8b8b: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{}
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
  2.96%  ││  0x00007f6a6ccd8b92: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         ││                                                ;   {poll}
 21.82%  ││  0x00007f6a6ccd8b95: add    rax,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  3.44%  ││  0x00007f6a6ccd8b98: cmp    r11,r10
         ╰│  0x00007f6a6ccd8b9b: jne    0x00007f6a6ccd8b80  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
          ╰  0x00007f6a6ccd8b9d: jmp    0x00007f6a6ccd8b6b
             0x00007f6a6ccd8b9f: hlt    
           [Exception Handler]
           [Stub Code]
             0x00007f6a6ccd8ba0: jmp    0x00007f6a6cc9f680  ;   {no_reloc}
           [Deopt Handler Code]
             0x00007f6a6ccd8ba5: call   0x00007f6a6ccd8baa
....................................................................................................
 57.71%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (24 bytes) 

             0x00007f6a6ccd67bc: mov    r10,QWORD PTR [rsp+0x38]
             0x00007f6a6ccd67c1: movzx  r10d,BYTE PTR [r10+0x94]  ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@30 (line 192)
                                                           ; implicit exception: dispatches to 0x00007f6a6ccd6906
             0x00007f6a6ccd67c9: test   r10d,r10d
             0x00007f6a6ccd67cc: jne    0x00007f6a6ccd684e  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@33 (line 192)
             0x00007f6a6ccd67d2: mov    ebp,0x1
             0x00007f6a6ccd67d7: jmp    0x00007f6a6ccd682c
             0x00007f6a6ccd67d9: nop    DWORD PTR [rax+0x0]
 12.64%  ↗   0x00007f6a6ccd67e0: add    r11,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  2.31%  │   0x00007f6a6ccd67e4: mov    r8,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  1.73%  │   0x00007f6a6ccd67eb: test   DWORD PTR [r8],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@66 (line 129)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 15.68%  │   0x00007f6a6ccd67ee: mov    r8,r11
  2.35%  │   0x00007f6a6ccd67f1: imul   r8,r11
  1.77%  │   0x00007f6a6ccd67f5: add    rdx,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
  2.43%  │   0x00007f6a6ccd67f8: cmp    r11,r10
         ╰   0x00007f6a6ccd67fb: jne    0x00007f6a6ccd67e0
          ╭  0x00007f6a6ccd67fd: jmp    0x00007f6a6ccd6801
          │  0x00007f6a6ccd67ff: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007f6a6ccd6801: mov    rsi,QWORD PTR [rsp]
             0x00007f6a6ccd6805: xchg   ax,ax
             0x00007f6a6ccd6807: call   0x00007f6a6cc68f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 38.92%  <total for region 2>

....[Hottest Regions]...............................................................................
 57.71%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 (24 bytes) 
 38.92%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (24 bytes) 
  2.90%              kernel  [unknown] (6 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.04%              kernel  [unknown] (1 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.04%           libjvm.so  _ZN9PhaseLive7computeEj (4 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%         interpreter  lconst_1  10 lconst_1  (0 bytes) 
  0.02%         interpreter  fast_iputfield  217 fast_iputfield  (0 bytes) 
  0.02%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 (0 bytes) 
  0.02%           libjvm.so  _ZN13InstanceKlass17find_method_indexEPK5ArrayIP6MethodEPK6SymbolS8_N5Klass18OverpassLookupModeENS9_16StaticLookupModeENS9_17PrivateLookupModeE.constprop.269 (0 bytes) 
  0.02%           libjvm.so  _ZN14PhaseIdealLoop12is_dominatorEP4NodeS1_ (0 bytes) 
  0.02%           libjvm.so  _ZN9StoreNode5IdealEP8PhaseGVNb (0 bytes) 
  0.02%           libjvm.so  _ZN7Compile11fill_bufferEP10CodeBufferPj (0 bytes) 
  0.02%           libjvm.so  _ZN7Compile17build_start_stateEP9StartNodePK8TypeFunc (0 bytes) 
  0.02%        libc-2.28.so  vfprintf (0 bytes) 
  0.02%  <...other 1 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 57.71%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 118 
 38.94%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_lambda_inline_jmhTest::sumOfSquares_lambda_inline_avgt_jmhStub, version 124 
  3.11%              kernel  [unknown] 
  0.04%           libjvm.so  _ZN9PhaseLive7computeEj 
  0.02%           libjvm.so  _ZN7Compile11fill_bufferEP10CodeBufferPj 
  0.02%           libjvm.so  _ZN14PhaseIdealLoop12is_dominatorEP4NodeS1_ 
  0.02%           libjvm.so  _ZN9StoreNode5IdealEP8PhaseGVNb 
  0.02%         interpreter  lconst_1  10 lconst_1  
  0.02%         interpreter  fast_iputfield  217 fast_iputfield  
  0.02%        libc-2.28.so  vfprintf 
  0.02%           libjvm.so  _ZN13InstanceKlass17find_method_indexEPK5ArrayIP6MethodEPK6SymbolS8_N5Klass18OverpassLookupModeENS9_16StaticLookupModeENS9_17PrivateLookupModeE.constprop.269 
  0.02%           libjvm.so  _ZN7Compile17build_start_stateEP9StartNodePK8TypeFunc 
  0.02%  libpthread-2.28.so  __pthread_disable_asynccancel 
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 96.65%                  c2
  3.11%              kernel
  0.14%           libjvm.so
  0.04%         interpreter
  0.02%        libc-2.28.so
  0.02%  libpthread-2.28.so
....................................................................................................
 99.98%  <totals>



# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef
# Parameters: (factor = 1, param = 1000000)

# Run progress: 75.00% complete, ETA 00:01:07
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.319 ms/op
# Warmup Iteration   2: 6.721 ms/op
# Warmup Iteration   3: 6.377 ms/op
# Warmup Iteration   4: 6.378 ms/op
# Warmup Iteration   5: 6.322 ms/op
Iteration   1: 6.333 ms/op
Iteration   2: 6.461 ms/op
Iteration   3: 6.565 ms/op
Iteration   4: 6.389 ms/op
Iteration   5: 6.368 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 79.17% complete, ETA 00:00:56
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.635 ms/op
# Warmup Iteration   2: 6.458 ms/op
# Warmup Iteration   3: 6.363 ms/op
# Warmup Iteration   4: 6.360 ms/op
# Warmup Iteration   5: 6.402 ms/op
Iteration   1: 6.373 ms/op
Iteration   2: 6.385 ms/op
Iteration   3: 6.388 ms/op
Iteration   4: 6.422 ms/op
Iteration   5: 6.431 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 83.33% complete, ETA 00:00:45
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 8.061 ms/op
# Warmup Iteration   2: 6.390 ms/op
# Warmup Iteration   3: 6.417 ms/op
# Warmup Iteration   4: 6.621 ms/op
# Warmup Iteration   5: 6.376 ms/op
Iteration   1: 6.415 ms/op
Iteration   2: 6.382 ms/op
Iteration   3: 6.383 ms/op
Iteration   4: 6.434 ms/op
Iteration   5: 6.417 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef":
  6.410 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (6.333, 6.410, 6.565), stdev = 0.053
  CI (99.9%): [6.353, 6.467] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·asm":
PrintAssembly processed: 46315 total address lines.
Perf output processed (skipped 5.998 seconds):
 Column 1: cycles (5361 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 (228 bytes) 

             0x00007f884447c8f8: jmp    0x00007f884447c950
             0x00007f884447c8fa: xor    r9d,r9d            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007f884447c8fd: mov    rax,r9
         │   0x00007f884447c900: add    rsp,0x40
         │   0x00007f884447c904: pop    rbp
         │   0x00007f884447c905: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007f884447c90c: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007f884447c90f: ret                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.59%  │↗  0x00007f884447c910: mov    QWORD PTR [r15+0x118],r11
  0.30%  ││  0x00007f884447c917: prefetchw BYTE PTR [r11+0xc0]
  6.53%  ││  0x00007f884447c91f: mov    r11,QWORD PTR [rdi+0xb8]
  4.74%  ││  0x00007f884447c926: mov    QWORD PTR [rax],r11
  7.09%  ││  0x00007f884447c929: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.16%  ││  0x00007f884447c930: mov    DWORD PTR [rax+0xc],0x0
  1.32%  ││  0x00007f884447c937: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.72%  ││  0x00007f884447c93f: mov    QWORD PTR [rax+0x10],rbx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.65%  ││  0x00007f884447c943: add    r9,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  8.17%  ││  0x00007f884447c947: cmp    rcx,r10
         ╰│  0x00007f884447c94a: je     0x00007f884447c8fd  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.22%   │  0x00007f884447c94c: add    rcx,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.26%   │  0x00007f884447c950: mov    r11,QWORD PTR [r15+0x108]
          │                                                ; ImmutableOopMap{r8=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.76%   │  0x00007f884447c957: test   DWORD PTR [r11],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.13%   │  0x00007f884447c95a: cmp    rcx,0xffffffffffffff80
          │  0x00007f884447c95e: jl     0x00007f884447caf7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.24%   │  0x00007f884447c964: cmp    rcx,0x7f
          │  0x00007f884447c968: jle    0x00007f884447ca4c
  0.19%   │  0x00007f884447c96e: mov    rax,QWORD PTR [r15+0x118]
  1.60%   │  0x00007f884447c975: mov    r11,rax
  2.93%   │  0x00007f884447c978: add    r11,0x18
  0.30%   │  0x00007f884447c97c: cmp    r11,QWORD PTR [r15+0x128]
          │  0x00007f884447c983: jae    0x00007f884447cab6  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.35%   │  0x00007f884447c989: mov    QWORD PTR [r15+0x118],r11
  3.69%   │  0x00007f884447c990: prefetchw BYTE PTR [r11+0xc0]
  6.72%   │  0x00007f884447c998: mov    r11,QWORD PTR [rdi+0xb8]
  3.81%   │  0x00007f884447c99f: mov    QWORD PTR [rax],r11
  5.93%   │  0x00007f884447c9a2: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.53%   │  0x00007f884447c9a9: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  2.89%   │  0x00007f884447c9b0: mov    QWORD PTR [rax+0x10],rcx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.80%   │  0x00007f884447c9b4: mov    rbx,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.56%   │  0x00007f884447c9b8: mov    edx,DWORD PTR [r8+0x10]  ;*getfield receiver {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@1
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.52%   │  0x00007f884447c9bc: mov    r11d,DWORD PTR [r12+rdx*8+0x8]
          │                                                ; implicit exception: dispatches to 0x00007f884447cc12
  2.85%   │  0x00007f884447c9c1: cmp    r11d,0xdecc0       ;   {metadata(&apos;org/ib/benchmark/generated/HighOrderFunctionKtBenchmark_jmhType&apos;)}
          │  0x00007f884447c9c8: jne    0x00007f884447cbea  ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@4
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.65%   │  0x00007f884447c9ce: imul   rbx,rbx            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.50%   │  0x00007f884447c9d2: cmp    rbx,0xffffffffffffff80
          │  0x00007f884447c9d6: jl     0x00007f884447cb32  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.59%   │  0x00007f884447c9dc: cmp    rbx,0x7f
          │  0x00007f884447c9e0: jle    0x00007f884447ca82
  2.46%   │  0x00007f884447c9e6: mov    rax,QWORD PTR [r15+0x118]
  0.95%   │  0x00007f884447c9ed: mov    r11,rax
  0.19%   │  0x00007f884447c9f0: add    r11,0x18           ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.55%   │  0x00007f884447c9f4: cmp    r11,QWORD PTR [r15+0x128]
          ╰  0x00007f884447c9fb: jb     0x00007f884447c910
             0x00007f884447ca01: mov    QWORD PTR [rsp+0x20],rbx
             0x00007f884447ca06: mov    QWORD PTR [rsp+0x18],rcx
             0x00007f884447ca0b: mov    QWORD PTR [rsp+0x10],rdi
             0x00007f884447ca10: mov    QWORD PTR [rsp+0x8],r9
             0x00007f884447ca15: mov    QWORD PTR [rsp],r8
             0x00007f884447ca19: mov    rbp,r10
             0x00007f884447ca1c: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007f884447ca26: nop
....................................................................................................
 90.45%  <total for region 1>

....[Hottest Regions]...............................................................................
 90.45%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 (228 bytes) 
  2.44%           libjvm.so  SpinPause (0 bytes) 
  1.55%              kernel  [unknown] (6 bytes) 
  0.21%              kernel  [unknown] (32 bytes) 
  0.17%              kernel  [unknown] (69 bytes) 
  0.15%              kernel  [unknown] (18 bytes) 
  0.13%              kernel  [unknown] (9 bytes) 
  0.13%           libjvm.so  _ZN15RSHashTableIter8has_nextERm (31 bytes) 
  0.09%              kernel  [unknown] (27 bytes) 
  0.09%              kernel  [unknown] (0 bytes) 
  0.09%              kernel  [unknown] (0 bytes) 
  0.09%           libjvm.so  _ZN15G1CollectedHeap10new_regionEmbb (27 bytes) 
  0.09%        libc-2.28.so  __memset_avx2_unaligned_erms (8 bytes) 
  0.07%              kernel  [unknown] (0 bytes) 
  0.07%              kernel  [unknown] (0 bytes) 
  0.07%           libjvm.so  _ZL18compare_region_idxjj (24 bytes) 
  0.07%           libjvm.so  _ZN15G1FromCardCache5clearEj (8 bytes) 
  0.07%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (34 bytes) 
  0.07%              [vdso]  [unknown] (2 bytes) 
  0.06%              kernel  [unknown] (3 bytes) 
  3.81%  <...other 163 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 90.45%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 
  3.67%              kernel  [unknown] 
  2.44%           libjvm.so  SpinPause 
  0.17%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.15%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.11%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.09%           libjvm.so  _ZN15G1CollectedHeap10new_regionEmbb 
  0.09%           libjvm.so  _ZN15G1CollectedHeap17allocate_new_tlabEmmPm 
  0.07%           libjvm.so  _ZL18compare_region_idxjj 
  0.07%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.07%              [vdso]  [unknown] 
  0.06%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.06%           libjvm.so  _ZN13CollectedHeap12obj_allocateEP5KlassiP6Thread 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.06%           libjvm.so  _ZN15G1CollectionSet15add_eden_regionEP10HeapRegion 
  0.06%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj 
  0.06%           libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.06%           libjvm.so  _ZN30G1EvacPhaseWithTrimTimeTrackerD2Ev 
  0.06%           libjvm.so  _ZN22G1BlockOffsetTablePart21zero_bottom_entry_rawEv 
  0.06%           libjvm.so  _ZNK13InstanceKlass12klass_holderEv 
  2.09%  <...other 87 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 90.47%                  c2
  5.35%           libjvm.so
  3.67%              kernel
  0.22%        libc-2.28.so
  0.13%              [vdso]
  0.09%         interpreter
  0.06%  libpthread-2.28.so
....................................................................................................
100.00%  <totals>

PrintAssembly processed: 46291 total address lines.
Perf output processed (skipped 5.953 seconds):
 Column 1: cycles (5408 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 (228 bytes) 

             0x00007fa198cdbef8: jmp    0x00007fa198cdbf50
             0x00007fa198cdbefa: xor    r9d,r9d            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         ↗   0x00007fa198cdbefd: mov    rax,r9
         │   0x00007fa198cdbf00: add    rsp,0x40
         │   0x00007fa198cdbf04: pop    rbp
         │   0x00007fa198cdbf05: mov    r10,QWORD PTR [r15+0x108]
         │   0x00007fa198cdbf0c: test   DWORD PTR [r10],eax  ;   {poll_return}
         │   0x00007fa198cdbf0f: ret                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.59%  │↗  0x00007fa198cdbf10: mov    QWORD PTR [r15+0x118],r11
  0.26%  ││  0x00007fa198cdbf17: prefetchw BYTE PTR [r11+0xc0]
  6.73%  ││  0x00007fa198cdbf1f: mov    r11,QWORD PTR [rdi+0xb8]
  4.99%  ││  0x00007fa198cdbf26: mov    QWORD PTR [rax],r11
  6.80%  ││  0x00007fa198cdbf29: mov    DWORD PTR [rax+0x8],0x13c38
         ││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.31%  ││  0x00007fa198cdbf30: mov    DWORD PTR [rax+0xc],0x0
  1.22%  ││  0x00007fa198cdbf37: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.51%  ││  0x00007fa198cdbf3f: mov    QWORD PTR [rax+0x10],rbx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.35%  ││  0x00007fa198cdbf43: add    r9,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  7.67%  ││  0x00007fa198cdbf47: cmp    rcx,r10
         ╰│  0x00007fa198cdbf4a: je     0x00007fa198cdbefd  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.28%   │  0x00007fa198cdbf4c: add    rcx,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.35%   │  0x00007fa198cdbf50: mov    r11,QWORD PTR [r15+0x108]
          │                                                ; ImmutableOopMap{r8=Oop }
          │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.96%   │  0x00007fa198cdbf57: test   DWORD PTR [r11],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
          │                                                ;   {poll}
  3.57%   │  0x00007fa198cdbf5a: cmp    rcx,0xffffffffffffff80
          │  0x00007fa198cdbf5e: jl     0x00007fa198cdc0f7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.28%   │  0x00007fa198cdbf64: cmp    rcx,0x7f
          │  0x00007fa198cdbf68: jle    0x00007fa198cdc04c
  0.17%   │  0x00007fa198cdbf6e: mov    rax,QWORD PTR [r15+0x118]
  1.42%   │  0x00007fa198cdbf75: mov    r11,rax
  2.85%   │  0x00007fa198cdbf78: add    r11,0x18
  0.18%   │  0x00007fa198cdbf7c: cmp    r11,QWORD PTR [r15+0x128]
          │  0x00007fa198cdbf83: jae    0x00007fa198cdc0b6  ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.30%   │  0x00007fa198cdbf89: mov    QWORD PTR [r15+0x118],r11
  3.59%   │  0x00007fa198cdbf90: prefetchw BYTE PTR [r11+0xc0]
  6.79%   │  0x00007fa198cdbf98: mov    r11,QWORD PTR [rdi+0xb8]
  4.09%   │  0x00007fa198cdbf9f: mov    QWORD PTR [rax],r11
  5.25%   │  0x00007fa198cdbfa2: mov    DWORD PTR [rax+0x8],0x13c38
          │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.41%   │  0x00007fa198cdbfa9: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@31 (line 1180)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  3.27%   │  0x00007fa198cdbfb0: mov    QWORD PTR [rax+0x10],rcx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.81%   │  0x00007fa198cdbfb4: mov    rbx,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::longValue@1 (line 1353)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@5 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.02%   │  0x00007fa198cdbfb8: mov    edx,DWORD PTR [r8+0x10]  ;*getfield receiver {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@1
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.80%   │  0x00007fa198cdbfbc: mov    r11d,DWORD PTR [r12+rdx*8+0x8]
          │                                                ; implicit exception: dispatches to 0x00007fa198cdc212
  2.51%   │  0x00007fa198cdbfc1: cmp    r11d,0xdecc0       ;   {metadata(&apos;org/ib/benchmark/generated/HighOrderFunctionKtBenchmark_jmhType&apos;)}
          │  0x00007fa198cdbfc8: jne    0x00007fa198cdc1ea  ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@4
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.65%   │  0x00007fa198cdbfce: imul   rbx,rbx            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.29%   │  0x00007fa198cdbfd2: cmp    rbx,0xffffffffffffff80
          │  0x00007fa198cdbfd6: jl     0x00007fa198cdc132  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - java.lang.Long::valueOf@9 (line 1177)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.46%   │  0x00007fa198cdbfdc: cmp    rbx,0x7f
          │  0x00007fa198cdbfe0: jle    0x00007fa198cdc082
  2.18%   │  0x00007fa198cdbfe6: mov    rax,QWORD PTR [r15+0x118]
  1.07%   │  0x00007fa198cdbfed: mov    r11,rax
  0.17%   │  0x00007fa198cdbff0: add    r11,0x18           ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.57%   │  0x00007fa198cdbff4: cmp    r11,QWORD PTR [r15+0x128]
          ╰  0x00007fa198cdbffb: jb     0x00007fa198cdbf10
             0x00007fa198cdc001: mov    QWORD PTR [rsp+0x20],rbx
             0x00007fa198cdc006: mov    QWORD PTR [rsp+0x18],rcx
             0x00007fa198cdc00b: mov    QWORD PTR [rsp+0x10],rdi
             0x00007fa198cdc010: mov    QWORD PTR [rsp+0x8],r9
             0x00007fa198cdc015: mov    QWORD PTR [rsp],r8
             0x00007fa198cdc019: mov    rbp,r10
             0x00007fa198cdc01c: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
             0x00007fa198cdc026: nop
....................................................................................................
 89.72%  <total for region 1>

....[Hottest Regions]...............................................................................
 89.72%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 (228 bytes) 
  3.07%           libjvm.so  SpinPause (2 bytes) 
  2.76%              kernel  [unknown] (6 bytes) 
  0.18%              kernel  [unknown] (39 bytes) 
  0.17%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (89 bytes) 
  0.11%              kernel  [unknown] (21 bytes) 
  0.09%              kernel  [unknown] (17 bytes) 
  0.09%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv (4 bytes) 
  0.07%              kernel  [unknown] (0 bytes) 
  0.07%           libjvm.so  _ZN15G1FromCardCache5clearEj (19 bytes) 
  0.07%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (5 bytes) 
  0.07%           libjvm.so  _ZN13InstanceKlass17allocate_instanceEP6Thread (0 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (29 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.06%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj (0 bytes) 
  0.06%           libjvm.so  _ZNK8G1Policy20predict_yg_surv_rateEiP13SurvRateGroup (0 bytes) 
  0.06%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (19 bytes) 
  0.06%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread (0 bytes) 
  3.05%  <...other 142 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.72%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 
  4.18%              kernel  [unknown] 
  3.07%           libjvm.so  SpinPause 
  0.30%           libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.09%           libjvm.so  _ZN13InstanceKlass17allocate_instanceEP6Thread 
  0.09%           libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.07%           libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.07%           libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.07%           libjvm.so  _ZN29G1ParEvacuateFollowersClosure7do_voidEv 
  0.07%        libc-2.28.so  __memset_avx2_unaligned_erms 
  0.06%           libjvm.so  _ZN16G1ParCopyClosureIL9G1Barrier0EL6G1Mark0EE6do_oopEPP7oopDesc 
  0.06%           libjvm.so  _ZN23G1FreeCollectionSetTask4workEj 
  0.06%           libjvm.so  _ZN29CompositeElapsedCounterSource3nowEv 
  0.06%           libjvm.so  _ZNK12MemAllocator8allocateEv 
  0.06%           libjvm.so  _ZN15RSHashTableIter8has_nextERm 
  0.06%         interpreter  method entry point (kind = zerolocals)  
  0.06%              [vdso]  __vdso_clock_gettime 
  0.06%           libjvm.so  _ZNK8G1Policy20predict_yg_surv_rateEiP13SurvRateGroup 
  0.04%           libjvm.so  _ZN14PhaseIdealLoop19has_local_phi_inputEP4Node 
  0.04%           libjvm.so  _ZN10HandleMark10initializeEP6Thread 
  1.72%  <...other 82 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 89.72%                  c2
  5.60%           libjvm.so
  4.18%              kernel
  0.17%         interpreter
  0.15%        libc-2.28.so
  0.09%              [vdso]
  0.07%  libpthread-2.28.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 46294 total address lines.
Perf output processed (skipped 6.012 seconds):
 Column 1: cycles (5211 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 (244 bytes) 

              0x00007ff8dccdbbd4: je     0x00007ff8dccdbeb2
              0x00007ff8dccdbbda: mov    r9d,0x13c38        ;   {metadata(&apos;java/lang/Long&apos;)}
              0x00007ff8dccdbbe0: movabs rdi,0x800000000
              0x00007ff8dccdbbea: add    rdi,r9
              0x00007ff8dccdbbed: mov    r9d,0x1
              0x00007ff8dccdbbf3: mov    ecx,0x2
         ╭    0x00007ff8dccdbbf8: jmp    0x00007ff8dccdbc50
         │    0x00007ff8dccdbbfa: xor    r9d,r9d            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                  ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
         │↗   0x00007ff8dccdbbfd: mov    rax,r9
  0.02%  ││   0x00007ff8dccdbc00: add    rsp,0x40
         ││   0x00007ff8dccdbc04: pop    rbp
         ││   0x00007ff8dccdbc05: mov    r10,QWORD PTR [r15+0x108]
         ││   0x00007ff8dccdbc0c: test   DWORD PTR [r10],eax  ;   {poll_return}
         ││   0x00007ff8dccdbc0f: ret                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  2.76%  ││↗  0x00007ff8dccdbc10: mov    QWORD PTR [r15+0x118],r11
  0.27%  │││  0x00007ff8dccdbc17: prefetchw BYTE PTR [r11+0xc0]
  7.12%  │││  0x00007ff8dccdbc1f: mov    r11,QWORD PTR [rdi+0xb8]
  5.05%  │││  0x00007ff8dccdbc26: mov    QWORD PTR [rax],r11
  6.97%  │││  0x00007ff8dccdbc29: mov    DWORD PTR [rax+0x8],0x13c38
         │││                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.11%  │││  0x00007ff8dccdbc30: mov    DWORD PTR [rax+0xc],0x0
  1.67%  │││  0x00007ff8dccdbc37: mov    QWORD PTR [rax+0x10],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
         │││                                                ; - java.lang.Long::valueOf@31 (line 1180)
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  1.65%  │││  0x00007ff8dccdbc3f: mov    QWORD PTR [rax+0x10],rbx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.99%  │││  0x00007ff8dccdbc43: add    r9,QWORD PTR [rax+0x10]  ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  8.25%  │││  0x00007ff8dccdbc47: cmp    rcx,r10
         │╰│  0x00007ff8dccdbc4a: je     0x00007ff8dccdbbfd  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │ │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
  0.29%  │ │  0x00007ff8dccdbc4c: add    rcx,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │ │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.25%  ↘ │  0x00007ff8dccdbc50: mov    r11,QWORD PTR [r15+0x108]
           │                                                ; ImmutableOopMap{r8=Oop }
           │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.96%    │  0x00007ff8dccdbc57: test   DWORD PTR [r11],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
           │                                                ;   {poll}
  3.28%    │  0x00007ff8dccdbc5a: cmp    rcx,0xffffffffffffff80
           │  0x00007ff8dccdbc5e: jl     0x00007ff8dccdbdf7  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - java.lang.Long::valueOf@9 (line 1177)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.21%    │  0x00007ff8dccdbc64: cmp    rcx,0x7f
           │  0x00007ff8dccdbc68: jle    0x00007ff8dccdbd4c
  0.21%    │  0x00007ff8dccdbc6e: mov    rax,QWORD PTR [r15+0x118]
  1.54%    │  0x00007ff8dccdbc75: mov    r11,rax
  2.90%    │  0x00007ff8dccdbc78: add    r11,0x18
  0.36%    │  0x00007ff8dccdbc7c: cmp    r11,QWORD PTR [r15+0x128]
           │  0x00007ff8dccdbc83: jae    0x00007ff8dccdbdb6  ;*goto {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  0.25%    │  0x00007ff8dccdbc89: mov    QWORD PTR [r15+0x118],r11
  3.76%    │  0x00007ff8dccdbc90: prefetchw BYTE PTR [r11+0xc0]
  6.31%    │  0x00007ff8dccdbc98: mov    r11,QWORD PTR [rdi+0xb8]
  4.15%    │  0x00007ff8dccdbc9f: mov    QWORD PTR [rax],r11
  5.43%    │  0x00007ff8dccdbca2: mov    DWORD PTR [rax+0x8],0x13c38
           │                                                ;   {metadata(&apos;java/lang/Long&apos;)}
  1.77%    │  0x00007ff8dccdbca9: mov    DWORD PTR [rax+0xc],0x0  ;*new {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - java.lang.Long::valueOf@31 (line 1180)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  3.24%    │  0x00007ff8dccdbcb0: mov    QWORD PTR [rax+0x10],rcx  ;*invokestatic valueOf {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@22 (line 113)
  0.71%    │  0x00007ff8dccdbcb4: mov    rbx,QWORD PTR [rax+0x10]  ;*getfield value {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - java.lang.Long::longValue@1 (line 1353)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@5 (line 22)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.51%    │  0x00007ff8dccdbcb8: mov    edx,DWORD PTR [r8+0x10]  ;*getfield receiver {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@1
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.61%    │  0x00007ff8dccdbcbc: mov    r11d,DWORD PTR [r12+rdx*8+0x8]
           │                                                ; implicit exception: dispatches to 0x00007ff8dccdbf12
  2.96%    │  0x00007ff8dccdbcc1: cmp    r11d,0xdecc0       ;   {metadata(&apos;org/ib/benchmark/generated/HighOrderFunctionKtBenchmark_jmhType&apos;)}
           │  0x00007ff8dccdbcc8: jne    0x00007ff8dccdbeea  ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@4
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.58%    │  0x00007ff8dccdbcce: imul   rbx,rbx            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.91%    │  0x00007ff8dccdbcd2: cmp    rbx,0xffffffffffffff80
           │  0x00007ff8dccdbcd6: jl     0x00007ff8dccdbe32  ;*iflt {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - java.lang.Long::valueOf@9 (line 1177)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@11 (line 22)
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.63%    │  0x00007ff8dccdbcdc: cmp    rbx,0x7f
           │  0x00007ff8dccdbce0: jle    0x00007ff8dccdbd82
  2.59%    │  0x00007ff8dccdbce6: mov    rax,QWORD PTR [r15+0x118]
  1.23%    │  0x00007ff8dccdbced: mov    r11,rax
  0.25%    │  0x00007ff8dccdbcf0: add    r11,0x18           ;*goto {reexecute=0 rethrow=0 return_oop=0}
           │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@53 (line 112)
  1.69%    │  0x00007ff8dccdbcf4: cmp    r11,QWORD PTR [r15+0x128]
           ╰  0x00007ff8dccdbcfb: jb     0x00007ff8dccdbc10
              0x00007ff8dccdbd01: mov    QWORD PTR [rsp+0x20],rbx
              0x00007ff8dccdbd06: mov    QWORD PTR [rsp+0x18],rcx
              0x00007ff8dccdbd0b: mov    QWORD PTR [rsp+0x10],rdi
              0x00007ff8dccdbd10: mov    QWORD PTR [rsp+0x8],r9
              0x00007ff8dccdbd15: mov    QWORD PTR [rsp],r8
              0x00007ff8dccdbd19: mov    rbp,r10
              0x00007ff8dccdbd1c: movabs rsi,0x800013c38    ;   {metadata(&apos;java/lang/Long&apos;)}
              0x00007ff8dccdbd26: nop
....................................................................................................
 93.44%  <total for region 1>

....[Hottest Regions]...............................................................................
 93.44%            c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 (244 bytes) 
  1.86%        kernel  [unknown] (6 bytes) 
  1.29%     libjvm.so  SpinPause (2 bytes) 
  0.21%        kernel  [unknown] (68 bytes) 
  0.15%        kernel  [unknown] (24 bytes) 
  0.13%     libjvm.so  _ZN15G1FromCardCache5clearEj (19 bytes) 
  0.10%     libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion (17 bytes) 
  0.10%     libjvm.so  _ZN16G1ParCopyClosureIL9G1Barrier0EL6G1Mark0EE6do_oopEPP7oopDesc (45 bytes) 
  0.08%        kernel  [unknown] (39 bytes) 
  0.08%     libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv (7 bytes) 
  0.06%        kernel  [unknown] (5 bytes) 
  0.06%        kernel  [unknown] (0 bytes) 
  0.06%     libjvm.so  _ZNK13InstanceKlass12klass_holderEv (7 bytes) 
  0.06%     libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (0 bytes) 
  0.06%     libjvm.so  _ZN7Monitor6unlockEv (0 bytes) 
  0.04%        kernel  [unknown] (0 bytes) 
  0.04%        kernel  [unknown] (0 bytes) 
  0.04%     libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv (0 bytes) 
  0.04%     libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion (13 bytes) 
  0.04%     libjvm.so  _ZN10HeapRegion25report_region_type_changeEN21G1HeapRegionTraceType4TypeE (0 bytes) 
  2.07%  <...other 103 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 93.44%            c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 129 
  2.99%        kernel  [unknown] 
  1.29%     libjvm.so  SpinPause 
  0.13%     libjvm.so  _ZN15G1FromCardCache5clearEj 
  0.12%     libjvm.so  _ZN24G1ScanRSForRegionClosure18scan_rem_set_rootsEP10HeapRegion 
  0.12%     libjvm.so  _ZN24G1ScanRSForRegionClosure14do_heap_regionEP10HeapRegion 
  0.10%     libjvm.so  _ZNK12MemAllocator25allocate_inside_tlab_slowERNS_10AllocationE 
  0.10%     libjvm.so  _ZN16G1ParCopyClosureIL9G1Barrier0EL6G1Mark0EE6do_oopEPP7oopDesc 
  0.08%     libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv 
  0.06%     libjvm.so  _ZN11OptoRuntime14new_instance_CEP5KlassP10JavaThread 
  0.06%     libjvm.so  _ZN11G1Allocator21unsafe_max_tlab_allocEv 
  0.06%     libjvm.so  _ZN13InstanceKlass17allocate_instanceEP6Thread 
  0.06%     libjvm.so  _ZNK13InstanceKlass12klass_holderEv 
  0.06%     libjvm.so  _ZN7Monitor6unlockEv 
  0.06%     libjvm.so  _ZNK17OtherRegionsTable8occupiedEv 
  0.04%     libjvm.so  _ZN10HeapRegion25report_region_type_changeEN21G1HeapRegionTraceType4TypeE 
  0.04%  libc-2.28.so  _int_malloc 
  0.04%  libc-2.28.so  __memset_avx2_unaligned_erms 
  0.04%     libjvm.so  _ZN15G1CollectedHeap17allocate_new_tlabEmmPm 
  0.04%     libjvm.so  _ZN15G1CollectedHeap23attempt_allocation_slowEm 
  1.09%  <...other 57 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 93.46%            c2
  3.26%     libjvm.so
  2.99%        kernel
  0.13%  libc-2.28.so
  0.10%   interpreter
  0.02%        [vdso]
  0.02%    ld-2.28.so
....................................................................................................
 99.98%  <totals>



# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 87.50% complete, ETA 00:00:33
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.658 ms/op
# Warmup Iteration   2: 0.630 ms/op
# Warmup Iteration   3: 0.627 ms/op
# Warmup Iteration   4: 0.628 ms/op
# Warmup Iteration   5: 0.625 ms/op
Iteration   1: 0.623 ms/op
Iteration   2: 0.621 ms/op
Iteration   3: 0.621 ms/op
Iteration   4: 0.623 ms/op
Iteration   5: 0.559 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 91.67% complete, ETA 00:00:22
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.680 ms/op
# Warmup Iteration   2: 0.616 ms/op
# Warmup Iteration   3: 0.617 ms/op
# Warmup Iteration   4: 0.617 ms/op
# Warmup Iteration   5: 0.615 ms/op
Iteration   1: 0.549 ms/op
Iteration   2: 0.555 ms/op
Iteration   3: 0.556 ms/op
Iteration   4: 0.562 ms/op
Iteration   5: 0.562 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 95.83% complete, ETA 00:00:11
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 0.599 ms/op
# Warmup Iteration   2: 0.610 ms/op
# Warmup Iteration   3: 0.616 ms/op
# Warmup Iteration   4: 0.615 ms/op
# Warmup Iteration   5: 0.614 ms/op
Iteration   1: 0.614 ms/op
Iteration   2: 0.613 ms/op
Iteration   3: 0.612 ms/op
Iteration   4: 0.614 ms/op
Iteration   5: 0.613 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline":
  0.593 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.549, 0.593, 0.623), stdev = 0.031
  CI (99.9%): [0.560, 0.626] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·asm":
PrintAssembly processed: 45464 total address lines.
Perf output processed (skipped 6.080 seconds):
 Column 1: cycles (5091 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 (24 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
             0x00007f07c0cd67e7: jmp    0x00007f07c0cd6804
             0x00007f07c0cd67e9: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          ↗  0x00007f07c0cd67eb: add    rsp,0x10
          │  0x00007f07c0cd67ef: pop    rbp
          │  0x00007f07c0cd67f0: mov    r10,QWORD PTR [r15+0x108]
          │  0x00007f07c0cd67f7: test   DWORD PTR [r10],eax  ;   {poll_return}
          │  0x00007f07c0cd67fa: ret    
          │  0x00007f07c0cd67fb: nop    DWORD PTR [rax+rax*1+0x0]
  2.83%  ↗│  0x00007f07c0cd6800: add    r11,0x1            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  2.79%  ││  0x00007f07c0cd6804: mov    r8,r11
 19.03%  ││  0x00007f07c0cd6807: imul   r8,r11
  4.46%  ││  0x00007f07c0cd680b: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{rsi=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
  3.36%  ││  0x00007f07c0cd6812: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         ││                                                ;   {poll}
 22.02%  ││  0x00007f07c0cd6815: add    rax,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  3.67%  ││  0x00007f07c0cd6818: cmp    r11,r10
         ╰│  0x00007f07c0cd681b: jne    0x00007f07c0cd6800  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          ╰  0x00007f07c0cd681d: jmp    0x00007f07c0cd67eb
             0x00007f07c0cd681f: hlt    
           [Exception Handler]
           [Stub Code]
             0x00007f07c0cd6820: jmp    0x00007f07c0c9f680  ;   {no_reloc}
           [Deopt Handler Code]
             0x00007f07c0cd6825: call   0x00007f07c0cd682a
....................................................................................................
 58.16%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 (24 bytes) 

             0x00007f07c0cd7a3c: mov    r10,QWORD PTR [rsp+0x38]
             0x00007f07c0cd7a41: movzx  r10d,BYTE PTR [r10+0x94]  ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@30 (line 192)
                                                           ; implicit exception: dispatches to 0x00007f07c0cd7b86
             0x00007f07c0cd7a49: test   r10d,r10d
             0x00007f07c0cd7a4c: jne    0x00007f07c0cd7ace  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@33 (line 192)
             0x00007f07c0cd7a52: mov    ebp,0x1
             0x00007f07c0cd7a57: jmp    0x00007f07c0cd7aac
             0x00007f07c0cd7a59: nop    DWORD PTR [rax+0x0]
 12.71%  ↗   0x00007f07c0cd7a60: add    r11,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  2.36%  │   0x00007f07c0cd7a64: mov    r8,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  2.06%  │   0x00007f07c0cd7a6b: test   DWORD PTR [r8],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 15.11%  │   0x00007f07c0cd7a6e: mov    r8,r11
  2.40%  │   0x00007f07c0cd7a71: imul   r8,r11
  2.16%  │   0x00007f07c0cd7a75: add    rdx,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  2.49%  │   0x00007f07c0cd7a78: cmp    r11,r10
         ╰   0x00007f07c0cd7a7b: jne    0x00007f07c0cd7a60
          ╭  0x00007f07c0cd7a7d: jmp    0x00007f07c0cd7a81
          │  0x00007f07c0cd7a7f: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007f07c0cd7a81: mov    rsi,QWORD PTR [rsp]
             0x00007f07c0cd7a85: xchg   ax,ax
             0x00007f07c0cd7a87: call   0x00007f07c0c68f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 39.29%  <total for region 2>

....[Hottest Regions]...............................................................................
 58.16%            c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 (24 bytes) 
 39.29%            c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 (24 bytes) 
  1.37%        kernel  [unknown] (6 bytes) 
  0.06%        kernel  [unknown] (34 bytes) 
  0.04%        kernel  [unknown] (30 bytes) 
  0.04%        kernel  [unknown] (0 bytes) 
  0.04%        kernel  [unknown] (0 bytes) 
  0.04%   interpreter  method entry point (kind = zerolocals)  (0 bytes) 
  0.04%     libjvm.so  _ZN6Thread10muxAcquireEPVlPKc (7 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.02%        kernel  [unknown] (0 bytes) 
  0.69%  <...other 35 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 58.16%            c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 
 39.30%            c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 
  2.00%        kernel  [unknown] 
  0.04%   interpreter  method entry point (kind = zerolocals)  
  0.04%   interpreter  aload  25 aload  
  0.04%    ld-2.28.so  __tls_get_addr 
  0.04%     libjvm.so  _ZN6Thread10muxAcquireEPVlPKc 
  0.02%     libjvm.so  _ZN5State12_sub_Op_AddIEPK4Node 
  0.02%     libjvm.so  _ZNK5frame21interpreter_frame_bcpEv 
  0.02%     libjvm.so  _ZN2os13javaTimeNanosEv 
  0.02%     libjvm.so  _ZN12PhaseChaitin19interfere_with_liveEjP8IndexSet 
  0.02%     libjvm.so  _ZN7RegMask13smear_to_setsEi 
  0.02%     libjvm.so  _ZN4Dict6InsertEPvS0_b 
  0.02%   interpreter  ifeq  153 ifeq  
  0.02%     libjvm.so  _ZN7Monitor5IWaitEP6Threadl 
  0.02%     libjvm.so  _ZN13xmlTextStream5writeEPKcm 
  0.02%   interpreter  invokevirtual  182 invokevirtual  
  0.02%   interpreter  iload_3  29 iload_3  
  0.02%        [vdso]  [unknown] 
  0.02%     libjvm.so  _ZN7Monitor6unlockEv 
  0.10%  <...other 5 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 97.47%            c2
  2.00%        kernel
  0.29%     libjvm.so
  0.14%   interpreter
  0.04%    ld-2.28.so
  0.02%  libc-2.28.so
  0.02%        [vdso]
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45537 total address lines.
Perf output processed (skipped 5.982 seconds):
 Column 1: cycles (5114 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 (24 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
             0x00007f5c9c0d8ae7: jmp    0x00007f5c9c0d8b04
             0x00007f5c9c0d8ae9: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          ↗  0x00007f5c9c0d8aeb: add    rsp,0x10
          │  0x00007f5c9c0d8aef: pop    rbp
          │  0x00007f5c9c0d8af0: mov    r10,QWORD PTR [r15+0x108]
          │  0x00007f5c9c0d8af7: test   DWORD PTR [r10],eax  ;   {poll_return}
          │  0x00007f5c9c0d8afa: ret    
          │  0x00007f5c9c0d8afb: nop    DWORD PTR [rax+rax*1+0x0]
  3.21%  ↗│  0x00007f5c9c0d8b00: add    r11,0x1            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  2.58%  ││  0x00007f5c9c0d8b04: mov    r8,r11
 19.44%  ││  0x00007f5c9c0d8b07: imul   r8,r11
  4.07%  ││  0x00007f5c9c0d8b0b: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{rsi=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
  3.19%  ││  0x00007f5c9c0d8b12: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         ││                                                ;   {poll}
 21.63%  ││  0x00007f5c9c0d8b15: add    rax,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  3.85%  ││  0x00007f5c9c0d8b18: cmp    r11,r10
         ╰│  0x00007f5c9c0d8b1b: jne    0x00007f5c9c0d8b00  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          ╰  0x00007f5c9c0d8b1d: jmp    0x00007f5c9c0d8aeb
             0x00007f5c9c0d8b1f: hlt    
           [Exception Handler]
           [Stub Code]
             0x00007f5c9c0d8b20: jmp    0x00007f5c9c0a3680  ;   {no_reloc}
           [Deopt Handler Code]
             0x00007f5c9c0d8b25: call   0x00007f5c9c0d8b2a
....................................................................................................
 57.96%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 (24 bytes) 

             0x00007f5c9c0dcf3c: mov    r10,QWORD PTR [rsp+0x38]
             0x00007f5c9c0dcf41: movzx  r10d,BYTE PTR [r10+0x94]  ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@30 (line 192)
                                                           ; implicit exception: dispatches to 0x00007f5c9c0dd086
             0x00007f5c9c0dcf49: test   r10d,r10d
             0x00007f5c9c0dcf4c: jne    0x00007f5c9c0dcfce  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@33 (line 192)
             0x00007f5c9c0dcf52: mov    ebp,0x1
             0x00007f5c9c0dcf57: jmp    0x00007f5c9c0dcfac
             0x00007f5c9c0dcf59: nop    DWORD PTR [rax+0x0]
 13.45%  ↗   0x00007f5c9c0dcf60: add    r11,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  2.15%  │   0x00007f5c9c0dcf64: mov    r8,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  2.13%  │   0x00007f5c9c0dcf6b: test   DWORD PTR [r8],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 14.53%  │   0x00007f5c9c0dcf6e: mov    r8,r11
  2.48%  │   0x00007f5c9c0dcf71: imul   r8,r11
  1.96%  │   0x00007f5c9c0dcf75: add    rdx,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  2.37%  │   0x00007f5c9c0dcf78: cmp    r11,r10
         ╰   0x00007f5c9c0dcf7b: jne    0x00007f5c9c0dcf60
          ╭  0x00007f5c9c0dcf7d: jmp    0x00007f5c9c0dcf81
          │  0x00007f5c9c0dcf7f: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007f5c9c0dcf81: mov    rsi,QWORD PTR [rsp]
             0x00007f5c9c0dcf85: xchg   ax,ax
             0x00007f5c9c0dcf87: call   0x00007f5c9c06cf00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 39.07%  <total for region 2>

....[Hottest Regions]...............................................................................
 57.96%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 (24 bytes) 
 39.07%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 (24 bytes) 
  2.17%              kernel  [unknown] (6 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.41%  <...other 21 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 57.96%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 
 39.09%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 
  2.58%              kernel  [unknown] 
  0.02%         interpreter  invokevirtual  182 invokevirtual  
  0.02%         interpreter  invoke return entry points  
  0.02%           libjvm.so  _ZN9metaspace31do_update_in_use_info_for_chunkEPNS_9MetachunkEb 
  0.02%  libpthread-2.28.so  do_futex_wait.constprop.1 
  0.02%           libjvm.so  _ZN12LinkResolver31check_method_loader_constraintsERK8LinkInfoRK12methodHandlePKcP6Thread 
  0.02%           libjvm.so  _ZN17SignatureIterator10parse_typeEv 
  0.02%           libjvm.so  _ZN10ciTypeFlow13get_block_forEiPNS_6JsrSetENS_12CreateOptionE 
  0.02%           libjvm.so  JVM_IsInterrupted 
  0.02%        runtime stub  StubRoutines::vectorizedMismatch 
  0.02%         interpreter  ireturn  172 ireturn  
  0.02%         interpreter  isub  100 isub  
  0.02%           libjvm.so  _ZN4Node8out_growEj 
  0.02%           libjvm.so  _ZN8PhaseCFG23insert_anti_dependencesEP5BlockP4Nodeb 
  0.02%           libjvm.so  _ZN14PhaseIdealLoop16build_loop_earlyER9VectorSetR9Node_ListR10Node_Stack 
  0.02%           libjvm.so  _ZN12PhaseChaitin26post_allocate_copy_removalEv 
  0.02%           libjvm.so  _ZN8PhaseCFG14schedule_earlyER9VectorSetR10Node_Stack 
  0.02%         interpreter  aload  25 aload  
  0.02%  <...other 1 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 97.05%                  c2
  2.58%              kernel
  0.22%           libjvm.so
  0.10%         interpreter
  0.02%        runtime stub
  0.02%  libpthread-2.28.so
....................................................................................................
 99.98%  <totals>

PrintAssembly processed: 45537 total address lines.
Perf output processed (skipped 5.973 seconds):
 Column 1: cycles (5096 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 (24 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
             0x00007f72a015a5e7: jmp    0x00007f72a015a604
             0x00007f72a015a5e9: xor    eax,eax            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          ↗  0x00007f72a015a5eb: add    rsp,0x10
          │  0x00007f72a015a5ef: pop    rbp
          │  0x00007f72a015a5f0: mov    r10,QWORD PTR [r15+0x108]
          │  0x00007f72a015a5f7: test   DWORD PTR [r10],eax  ;   {poll_return}
          │  0x00007f72a015a5fa: ret    
          │  0x00007f72a015a5fb: nop    DWORD PTR [rax+rax*1+0x0]
  2.63%  ↗│  0x00007f72a015a600: add    r11,0x1            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  2.79%  ││  0x00007f72a015a604: mov    r8,r11
 20.82%  ││  0x00007f72a015a607: imul   r8,r11
  4.14%  ││  0x00007f72a015a60b: mov    r9,QWORD PTR [r15+0x108]  ; ImmutableOopMap{rsi=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
  2.81%  ││  0x00007f72a015a612: test   DWORD PTR [r9],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         ││                                                ;   {poll}
 21.61%  ││  0x00007f72a015a615: add    rax,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  3.41%  ││  0x00007f72a015a618: cmp    r11,r10
         ╰│  0x00007f72a015a61b: jne    0x00007f72a015a600  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          ╰  0x00007f72a015a61d: jmp    0x00007f72a015a5eb
             0x00007f72a015a61f: hlt    
           [Exception Handler]
           [Stub Code]
             0x00007f72a015a620: jmp    0x00007f72a0124680  ;   {no_reloc}
           [Deopt Handler Code]
             0x00007f72a015a625: call   0x00007f72a015a62a
....................................................................................................
 58.20%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 (24 bytes) 

             0x00007f72a015b63c: mov    r10,QWORD PTR [rsp+0x38]
             0x00007f72a015b641: movzx  r10d,BYTE PTR [r10+0x94]  ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@30 (line 192)
                                                           ; implicit exception: dispatches to 0x00007f72a015b786
             0x00007f72a015b649: test   r10d,r10d
             0x00007f72a015b64c: jne    0x00007f72a015b6ce  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@33 (line 192)
             0x00007f72a015b652: mov    ebp,0x1
             0x00007f72a015b657: jmp    0x00007f72a015b6ac
             0x00007f72a015b659: nop    DWORD PTR [rax+0x0]
 13.58%  ↗   0x00007f72a015b660: add    r11,0x1            ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  2.32%  │   0x00007f72a015b664: mov    r8,QWORD PTR [r15+0x108]  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         │                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  1.94%  │   0x00007f72a015b66b: test   DWORD PTR [r8],eax  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@74 (line 134)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
         │                                                 ;   {poll}
 15.07%  │   0x00007f72a015b66e: mov    r8,r11
  2.49%  │   0x00007f72a015b671: imul   r8,r11
  1.84%  │   0x00007f72a015b675: add    rdx,r8             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
         │                                                 ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
  1.98%  │   0x00007f72a015b678: cmp    r11,r10
         ╰   0x00007f72a015b67b: jne    0x00007f72a015b660
          ╭  0x00007f72a015b67d: jmp    0x00007f72a015b681
          │  0x00007f72a015b67f: xor    edx,edx            ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
          │                                                ; - org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub@17 (line 190)
          ↘  0x00007f72a015b681: mov    rsi,QWORD PTR [rsp]
             0x00007f72a015b685: xchg   ax,ax
             0x00007f72a015b687: call   0x00007f72a00edf00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
....................................................................................................
 39.23%  <total for region 2>

....[Hottest Regions]...............................................................................
 58.20%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 (24 bytes) 
 39.23%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 (24 bytes) 
  0.94%              kernel  [unknown] (6 bytes) 
  0.16%              kernel  [unknown] (1 bytes) 
  0.06%              kernel  [unknown] (0 bytes) 
  0.04%              kernel  [unknown] (9 bytes) 
  0.04%              kernel  [unknown] (13 bytes) 
  0.04%              kernel  [unknown] (0 bytes) 
  0.04%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 (14 bytes) 
  0.04%           libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv (7 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.02%              kernel  [unknown] (0 bytes) 
  0.96%  <...other 49 warm regions...>
....................................................................................................
 99.94%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 58.20%                  c2  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 119 
 39.27%                  c2  org.ib.benchmark.generated.HighOrderFunctionKtBenchmark_sumOfSquares_methodRef_inline_jmhTest::sumOfSquares_methodRef_inline_avgt_jmhStub, version 125 
  1.81%              kernel  [unknown] 
  0.04%           libjvm.so  _ZN7Monitor28lock_without_safepoint_checkEv 
  0.04%           libjvm.so  _ZN15StatSamplerTask4taskEv 
  0.04%  libpthread-2.28.so  pthread_cond_timedwait@@GLIBC_2.3.2 
  0.02%        libc-2.28.so  _IO_file_xsputn@@GLIBC_2.2.5 
  0.02%           libjvm.so  _ZN2os13javaTimeNanosEv 
  0.02%           libjvm.so  _ZN7VMError17is_error_reportedEv 
  0.02%           libjvm.so  _ZNK10RegionNode6is_CFGEv 
  0.02%           libjvm.so  _ZN12PhaseChaitin19interfere_with_liveEjP8IndexSet 
  0.02%           libjvm.so  _ZN7RegMask13smear_to_setsEi 
  0.02%           libjvm.so  _ZN7Matcher14is_bmi_patternEP4NodeS1_.part.130 
  0.02%  libpthread-2.28.so  __pthread_mutex_lock 
  0.02%           libjvm.so  _ZNK7SubNode5ValueEP8PhaseGVN 
  0.02%           libjvm.so  _ZN18InterpreterRuntime14resolve_invokeEP10JavaThreadN9Bytecodes4CodeE 
  0.02%           libjvm.so  SpinPause 
  0.02%           libjvm.so  _ZNK4Type11meet_helperEPKS_b 
  0.02%         interpreter  iinc  132 iinc  
  0.02%           libjvm.so  _ZNK13WatcherThread5sleepEv 
  0.27%  <...other 14 warm methods...>
....................................................................................................
 99.94%  <totals>

....[Distribution by Source]........................................................................
 97.49%                  c2
  1.81%              kernel
  0.43%           libjvm.so
  0.08%        libc-2.28.so
  0.08%  libpthread-2.28.so
  0.04%         interpreter
  0.02%          ld-2.28.so
....................................................................................................
 99.94%  <totals>



# Run complete. Total time: 00:04:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (factor)  (param)  Mode  Cnt  Score   Error  Units
HighOrderFunctionKtBenchmark.sumOfSquares_lambda                                1  1000000  avgt   15  6.375 ± 0.029  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·asm                           1  1000000  avgt         NaN            ---

HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline                         1  1000000  avgt   15  0.619 ± 0.030  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·asm                    1  1000000  avgt         NaN            ---

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda                       1  1000000  avgt   15  6.438 ± 0.065  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·asm                  1  1000000  avgt         NaN            ---

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline                1  1000000  avgt   15  0.610 ± 0.028  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·asm           1  1000000  avgt         NaN            ---

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef                             1  1000000  avgt   15  6.410 ± 0.057  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·asm                        1  1000000  avgt         NaN            ---

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline                      1  1000000  avgt   15  0.593 ± 0.033  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·asm                 1  1000000  avgt         NaN            ---

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction                     1  1000000  avgt   15  6.425 ± 0.092  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·asm                1  1000000  avgt         NaN            ---

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline              1  1000000  avgt   15  6.385 ± 0.035  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·asm         1  1000000  avgt         NaN            ---

Note:
    - To simplify things for analysis, we invoke this with -XX:LoopUnrollLimit=1 -XX:-TieredCompilation: this will block loop unrolling from complicating
      the disssembly, and disabling tiered compilation would guarantee compilation with the final optimizing compiler.
    - We don’t care about performance numbers but the optimizations.