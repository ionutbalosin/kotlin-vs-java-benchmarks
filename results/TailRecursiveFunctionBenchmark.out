# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -Xss10M
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.TailRecursiveFunctionJavaBenchmark.fact
# Parameters: (param = 10000)

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 3
# Warmup Iteration   1: 21.359 us/op
# Warmup Iteration   2: 21.075 us/op
# Warmup Iteration   3: 20.731 us/op
# Warmup Iteration   4: 20.779 us/op
# Warmup Iteration   5: 20.742 us/op
Iteration   1: 20.802 us/op
Iteration   2: 21.844 us/op
Iteration   3: 21.941 us/op
Iteration   4: 22.178 us/op
Iteration   5: 21.920 us/op

# Run progress: 16.67% complete, ETA 00:00:51
# Fork: 2 of 3
# Warmup Iteration   1: 18.538 us/op
# Warmup Iteration   2: 18.576 us/op
# Warmup Iteration   3: 18.344 us/op
# Warmup Iteration   4: 18.318 us/op
# Warmup Iteration   5: 18.237 us/op
Iteration   1: 18.417 us/op
Iteration   2: 18.381 us/op
Iteration   3: 18.277 us/op
Iteration   4: 18.202 us/op
Iteration   5: 18.103 us/op

# Run progress: 33.33% complete, ETA 00:00:41
# Fork: 3 of 3
# Warmup Iteration   1: 19.764 us/op
# Warmup Iteration   2: 19.562 us/op
# Warmup Iteration   3: 19.593 us/op
# Warmup Iteration   4: 20.089 us/op
# Warmup Iteration   5: 19.575 us/op
Iteration   1: 19.793 us/op
Iteration   2: 19.627 us/op
Iteration   3: 19.522 us/op
Iteration   4: 19.586 us/op
Iteration   5: 18.502 us/op


Result "org.ib.benchmark.TailRecursiveFunctionJavaBenchmark.fact":
  19.806 ±(99.9%) 1.652 us/op [Average]
  (min, avg, max) = (18.103, 19.806, 22.178), stdev = 1.545
  CI (99.9%): [18.154, 21.458] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: -Xss10M
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.TailRecursiveFunctionKtBenchmark.fact
# Parameters: (param = 10000)

# Run progress: 50.00% complete, ETA 00:00:30
# Fork: 1 of 3
# Warmup Iteration   1: 3.407 us/op
# Warmup Iteration   2: 3.377 us/op
# Warmup Iteration   3: 3.321 us/op
# Warmup Iteration   4: 3.326 us/op
# Warmup Iteration   5: 3.332 us/op
Iteration   1: 3.343 us/op
Iteration   2: 3.341 us/op
Iteration   3: 3.326 us/op
Iteration   4: 3.331 us/op
Iteration   5: 3.329 us/op

# Run progress: 66.67% complete, ETA 00:00:20
# Fork: 2 of 3
# Warmup Iteration   1: 3.453 us/op
# Warmup Iteration   2: 3.407 us/op
# Warmup Iteration   3: 3.353 us/op
# Warmup Iteration   4: 3.337 us/op
# Warmup Iteration   5: 3.337 us/op
Iteration   1: 3.343 us/op
Iteration   2: 3.344 us/op
Iteration   3: 3.333 us/op
Iteration   4: 3.381 us/op
Iteration   5: 3.410 us/op

# Run progress: 83.33% complete, ETA 00:00:10
# Fork: 3 of 3
# Warmup Iteration   1: 3.768 us/op
# Warmup Iteration   2: 3.545 us/op
# Warmup Iteration   3: 3.457 us/op
# Warmup Iteration   4: 3.585 us/op
# Warmup Iteration   5: 3.569 us/op
Iteration   1: 3.582 us/op
Iteration   2: 3.556 us/op
Iteration   3: 3.535 us/op
Iteration   4: 3.541 us/op
Iteration   5: 3.555 us/op


Result "org.ib.benchmark.TailRecursiveFunctionKtBenchmark.fact":
  3.417 ±(99.9%) 0.110 us/op [Average]
  (min, avg, max) = (3.326, 3.417, 3.582), stdev = 0.103
  CI (99.9%): [3.307, 3.527] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                (param)  Mode  Cnt   Score   Error  Units
TailRecursiveFunctionJavaBenchmark.fact    10000  avgt   15  19.806 ± 1.652  us/op
TailRecursiveFunctionKtBenchmark.fact      10000  avgt   15   3.417 ± 0.110  us/op

Few thoughts:
    - Kotlin tailrec function is optimized and re-written by the Compiler as follows (completly removing the recursive calls):
        private final int factRec(int n, int a, int b) {
            while(true) {
                int var10000;
                if (n == 0) {
                    var10000 = a;
                } else {
                if (n != 1) {
                        var10000 = n - 1;
                        int var10001 = b;
                        b += a;
                        a = var10001;
                        n = var10000;
                        continue;
                    }

                    var10000 = b;
                }

                return var10000;
            }
        }
    - may be an improvement for Kotlin would be to automatically detect and being optimized by the compiler
        - maybe ask Kotlin why there is an explicit keyword for that!
    - Kotlin tailrec function performance is similar to non-recursive (i.e. liniear) approach with the advantage of keeping the code more compact

ToDo:
    - try Kotlin tailrec function for sum of elements and compare the result with Java :) You may be surprised!