# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction
# Parameters: (factor = 1, param = 1000000)

# Run progress: 0.00% complete, ETA 00:04:00
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1308.913 ms/op
# Warmup Iteration   2: 974.915 ms/op
# Warmup Iteration   3: 1068.136 ms/op
# Warmup Iteration   4: 1048.988 ms/op
# Warmup Iteration   5: 1038.501 ms/op
Iteration   1: 1033.388 ms/op
Iteration   2: 351.546 ms/op
Iteration   3: 0.837 ms/op
Iteration   4: 0.757 ms/op
Iteration   5: 0.761 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 4.17% complete, ETA 00:05:04
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 923.291 ms/op
# Warmup Iteration   2: 948.608 ms/op
# Warmup Iteration   3: 981.151 ms/op
# Warmup Iteration   4: 982.425 ms/op
# Warmup Iteration   5: 168.072 ms/op
Iteration   1: 0.827 ms/op
Iteration   2: 0.809 ms/op
Iteration   3: 0.820 ms/op
Iteration   4: 0.825 ms/op
Iteration   5: 0.811 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 8.33% complete, ETA 00:05:13
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 875.083 ms/op
# Warmup Iteration   2: 892.146 ms/op
# Warmup Iteration   3: 912.960 ms/op
# Warmup Iteration   4: 806.770 ms/op
# Warmup Iteration   5: 144.640 ms/op
Iteration   1: 0.830 ms/op
Iteration   2: 0.834 ms/op
Iteration   3: 0.834 ms/op
Iteration   4: 0.838 ms/op
Iteration   5: 0.826 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction":
  93.036 ±(99.9%) 294.394 ms/op [Average]
  (min, avg, max) = (0.757, 93.036, 1033.388), stdev = 275.376
  CI (99.9%): [≈ 0, 387.430] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·asm":
PrintAssembly processed: 50658 total address lines.
Perf output processed (skipped 7.405 seconds):
 Column 1: cycles (15367 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (22 bytes) 

             0x00007fd0c80cb096: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fd0c80cb099: mov    r11,rax
             0x00007fd0c80cb09c: mov    rax,r14
         ╭   0x00007fd0c80cb09f: jmp    0x00007fd0c80cb0bc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fd0c80cb0a4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007fd0c80cb0aa: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.65%  │↗  0x00007fd0c80cb0b0: test   DWORD PTR [rip+0xbb3af50],eax        # 0x00007fd0d3c06006
         ││                                                ;   {poll}
  5.80%  ││  0x00007fd0c80cb0b6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.49%  ││  0x00007fd0c80cb0b9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.12%  ↘│  0x00007fd0c80cb0bc: mov    r8,rax
  0.68%   │  0x00007fd0c80cb0bf: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.90%   │  0x00007fd0c80cb0c3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.25%   │  0x00007fd0c80cb0c6: cmp    r10,rax
          ╰  0x00007fd0c80cb0c9: jne    0x00007fd0c80cb0b0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fd0c80cb0cb: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fd0c80cb0ce: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fd0c80cb0d3: add    rsp,0x18
             0x00007fd0c80cb0d7: test   DWORD PTR [rip+0xbb3af29],eax        # 0x00007fd0d3c06006
                                                           ;   {poll_return}
             0x00007fd0c80cb0dd: vzeroupper 
....................................................................................................
 15.88%  <total for region 1>

....[Hottest Regions]...............................................................................
 15.88%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (22 bytes) 
  4.16%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.49%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.40%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.19%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.87%         interpreter  ireturn  172 ireturn  (0 bytes) 
  1.84%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.37%         interpreter  areturn  176 areturn  (8 bytes) 
  1.35%         interpreter  invokeinterface  185 invokeinterface  (109 bytes) 
  1.29%         interpreter  goto  167 goto  (83 bytes) 
  1.22%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.18%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.16%         interpreter  lload  22 lload  (32 bytes) 
  1.14%              kernel  [unknown] (6 bytes) 
  1.11%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.10%         interpreter  areturn  176 areturn  (23 bytes) 
  1.08%         interpreter  getstatic  178 getstatic  (94 bytes) 
  1.06%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.04%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.03%         interpreter  lreturn  173 lreturn  (4 bytes) 
 52.01%  <...other 684 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 15.88%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
 11.41%         interpreter  method entry point (kind = zerolocals)  
  5.39%         interpreter  invokevirtual  182 invokevirtual  
  3.93%         interpreter  invoke return entry points  
  3.21%         interpreter  ireturn  172 ireturn  
  2.80%         interpreter  invokeinterface  185 invokeinterface  
  2.72%         interpreter  areturn  176 areturn  
  2.67%         interpreter  invokespecial  183 invokespecial  
  2.36%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.33%              kernel  [unknown] 
  2.10%         interpreter  method entry point (kind = accessor)  
  1.89%         interpreter  getstatic  178 getstatic  
  1.86%         interpreter  invokestatic  184 invokestatic  
  1.67%         interpreter  checkcast  192 checkcast  
  1.66%         interpreter  goto  167 goto  
  1.44%         interpreter  fast_aload_0  220 fast_aload_0  
  1.21%         interpreter  lreturn  173 lreturn  
  1.20%         interpreter  lload  22 lload  
  1.18%         interpreter  return  177 return  
  1.17%         interpreter  instanceof  193 instanceof  
 31.89%  <...other 277 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 73.17%         interpreter
 16.97%               JVMCI
  6.73%           libjvm.so
  2.33%              kernel
  0.25%      perf-10930.map
  0.17%             Unknown
  0.14%        libc-2.28.so
  0.14%  libpthread-2.28.so
  0.05%        runtime stub
  0.02%          libjava.so
  0.02%           libzip.so
  0.01%      hsdis-amd64.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 57267 total address lines.
Perf output processed (skipped 9.600 seconds):
 Column 1: cycles (14972 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007fc1440c96d6: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fc1440c96d9: mov    r11,rax
             0x00007fc1440c96dc: mov    rax,r14
         ╭   0x00007fc1440c96df: jmp    0x00007fc1440c96fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fc1440c96e4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007fc1440c96ea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.12%  │↗  0x00007fc1440c96f0: test   DWORD PTR [rip+0xd1fb910],eax        # 0x00007fc1512c5006
         ││                                                ;   {poll}
 10.31%  ││  0x00007fc1440c96f6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.69%  ││  0x00007fc1440c96f9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.60%  ↘│  0x00007fc1440c96fc: mov    r8,rax
  1.07%   │  0x00007fc1440c96ff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
 10.45%   │  0x00007fc1440c9703: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  2.11%   │  0x00007fc1440c9706: cmp    r10,rax
          ╰  0x00007fc1440c9709: jne    0x00007fc1440c96f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fc1440c970b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fc1440c970e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fc1440c9713: add    rsp,0x18
             0x00007fc1440c9717: test   DWORD PTR [rip+0xd1fb8e9],eax        # 0x00007fc1512c5006
                                                           ;   {poll_return}
             0x00007fc1440c971d: vzeroupper 
....................................................................................................
 27.35%  <total for region 1>

....[Hottest Regions]...............................................................................
 27.35%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.65%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.40%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.30%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.20%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.00%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.58%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.31%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.26%         interpreter  areturn  176 areturn  (8 bytes) 
  1.20%         interpreter  goto  167 goto  (70 bytes) 
  1.20%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.14%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.12%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.05%         interpreter  ireturn  172 ireturn  (40 bytes) 
  0.98%              kernel  [unknown] (6 bytes) 
  0.92%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  0.91%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  0.89%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.84%         interpreter  lload  22 lload  (32 bytes) 
  0.79%         interpreter  method entry point (kind = accessor)  (115 bytes) 
 43.90%  <...other 741 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 27.35%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  9.70%         interpreter  method entry point (kind = zerolocals)  
  5.31%         interpreter  invokevirtual  182 invokevirtual  
  3.31%         interpreter  ireturn  172 ireturn  
  2.95%         interpreter  invoke return entry points  
  2.69%              kernel  [unknown] 
  2.46%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.28%         interpreter  invokeinterface  185 invokeinterface  
  2.15%         interpreter  method entry point (kind = accessor)  
  2.05%         interpreter  areturn  176 areturn  
  1.95%         interpreter  getstatic  178 getstatic  
  1.71%         interpreter  invokestatic  184 invokestatic  
  1.68%         interpreter  invokespecial  183 invokespecial  
  1.62%         interpreter  goto  167 goto  
  1.42%         interpreter  checkcast  192 checkcast  
  1.17%         interpreter  fast_aload_0  220 fast_aload_0  
  0.97%         interpreter  aload_1  43 aload_1  
  0.93%         interpreter  ifeq  153 ifeq  
  0.92%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  0.90%         interpreter  instanceof  193 instanceof  
 26.48%  <...other 312 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 62.02%         interpreter
 27.77%               JVMCI
  6.51%           libjvm.so
  2.69%              kernel
  0.41%        libc-2.28.so
  0.21%      perf-10986.map
  0.14%  libpthread-2.28.so
  0.12%             Unknown
  0.08%      hsdis-amd64.so
  0.01%        runtime stub
  0.01%          libjava.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 56802 total address lines.
Perf output processed (skipped 8.772 seconds):
 Column 1: cycles (14867 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007fdb400c9656: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fdb400c9659: mov    r11,rax
             0x00007fdb400c965c: mov    rax,r14
         ╭   0x00007fdb400c965f: jmp    0x00007fdb400c967c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fdb400c9664: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007fdb400c966a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.19%  │↗  0x00007fdb400c9670: test   DWORD PTR [rip+0xd455990],eax        # 0x00007fdb4d51f006
         ││                                                ;   {poll}
  9.86%  ││  0x00007fdb400c9676: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.73%  ││  0x00007fdb400c9679: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.87%  ↘│  0x00007fdb400c967c: mov    r8,rax
  1.24%   │  0x00007fdb400c967f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
 10.61%   │  0x00007fdb400c9683: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  2.15%   │  0x00007fdb400c9686: cmp    r10,rax
          ╰  0x00007fdb400c9689: jne    0x00007fdb400c9670  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fdb400c968b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fdb400c968e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fdb400c9693: add    rsp,0x18
             0x00007fdb400c9697: test   DWORD PTR [rip+0xd455969],eax        # 0x00007fdb4d51f006
                                                           ;   {poll_return}
             0x00007fdb400c969d: vzeroupper 
....................................................................................................
 27.66%  <total for region 1>

....[Hottest Regions]...............................................................................
 27.66%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.41%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.23%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  2.38%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.25%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.25%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  1.58%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.30%         interpreter  areturn  176 areturn  (4 bytes) 
  1.22%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.21%         interpreter  getstatic  178 getstatic  (94 bytes) 
  1.13%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.08%         interpreter  invokeinterface  185 invokeinterface  (88 bytes) 
  1.06%         interpreter  ireturn  172 ireturn  (37 bytes) 
  0.99%         interpreter  fast_aload_0  220 fast_aload_0  (31 bytes) 
  0.93%         interpreter  goto  167 goto  (66 bytes) 
  0.89%         interpreter  method entry point (kind = accessor)  (115 bytes) 
  0.86%         interpreter  getstatic  178 getstatic  (26 bytes) 
  0.85%         interpreter  invokevirtual  182 invokevirtual  (143 bytes) 
  0.85%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  0.82%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
 44.04%  <...other 734 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 27.66%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  9.14%         interpreter  method entry point (kind = zerolocals)  
  5.32%         interpreter  invokevirtual  182 invokevirtual  
  3.59%         interpreter  ireturn  172 ireturn  
  2.91%         interpreter  invoke return entry points  
  2.56%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.42%              kernel  [unknown] 
  2.24%         interpreter  method entry point (kind = accessor)  
  2.19%         interpreter  getstatic  178 getstatic  
  2.18%         interpreter  areturn  176 areturn  
  2.17%         interpreter  invokeinterface  185 invokeinterface  
  1.58%         interpreter  invokespecial  183 invokespecial  
  1.55%         interpreter  invokestatic  184 invokestatic  
  1.46%         interpreter  checkcast  192 checkcast  
  1.35%         interpreter  goto  167 goto  
  1.22%         interpreter  fast_aload_0  220 fast_aload_0  
  1.02%         interpreter  aload_1  43 aload_1  
  0.98%         interpreter  ifeq  153 ifeq  
  0.91%         interpreter  instanceof  193 instanceof  
  0.91%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
 26.62%  <...other 288 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 62.25%         interpreter
 28.10%               JVMCI
  6.17%           libjvm.so
  2.42%              kernel
  0.27%        libc-2.28.so
  0.23%             Unknown
  0.22%  libpthread-2.28.so
  0.22%      perf-11032.map
  0.07%      hsdis-amd64.so
  0.04%        runtime stub
  0.01%          libjava.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 12.50% complete, ETA 00:04:59
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 880.734 ms/op
# Warmup Iteration   2: 974.021 ms/op
# Warmup Iteration   3: 1003.052 ms/op
# Warmup Iteration   4: 958.652 ms/op
# Warmup Iteration   5: 153.241 ms/op
Iteration   1: 0.949 ms/op
Iteration   2: 0.853 ms/op
Iteration   3: 0.853 ms/op
Iteration   4: 0.846 ms/op
Iteration   5: 0.948 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 16.67% complete, ETA 00:04:49
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 884.979 ms/op
# Warmup Iteration   2: 936.075 ms/op
# Warmup Iteration   3: 902.621 ms/op
# Warmup Iteration   4: 901.304 ms/op
# Warmup Iteration   5: 149.476 ms/op
Iteration   1: 0.881 ms/op
Iteration   2: 0.799 ms/op
Iteration   3: 0.811 ms/op
Iteration   4: 0.806 ms/op
Iteration   5: 0.842 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 20.83% complete, ETA 00:04:35
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1075.250 ms/op
# Warmup Iteration   2: 1008.793 ms/op
# Warmup Iteration   3: 1023.552 ms/op
# Warmup Iteration   4: 926.831 ms/op
# Warmup Iteration   5: 932.357 ms/op
Iteration   1: 601.569 ms/op
Iteration   2: 0.848 ms/op
Iteration   3: 0.816 ms/op
Iteration   4: 0.811 ms/op
Iteration   5: 0.813 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline":
  40.896 ±(99.9%) 165.817 ms/op [Average]
  (min, avg, max) = (0.799, 40.896, 601.569), stdev = 155.105
  CI (99.9%): [≈ 0, 206.713] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·asm":
PrintAssembly processed: 56768 total address lines.
Perf output processed (skipped 9.516 seconds):
 Column 1: cycles (14778 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 

             0x00007f05100c9c56: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007f05100c9c59: mov    r11,rax
             0x00007f05100c9c5c: mov    rax,r14
         ╭   0x00007f05100c9c5f: jmp    0x00007f05100c9c7c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007f05100c9c64: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f05100c9c6a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.18%  │↗  0x00007f05100c9c70: test   DWORD PTR [rip+0xd591390],eax        # 0x00007f051d65b006
         ││                                                ;   {poll}
  9.78%  ││  0x00007f05100c9c76: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.73%  ││  0x00007f05100c9c79: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.80%  ↘│  0x00007f05100c9c7c: mov    r8,rax
  1.16%   │  0x00007f05100c9c7f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
 10.16%   │  0x00007f05100c9c83: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  2.12%   │  0x00007f05100c9c86: cmp    r10,rax
          ╰  0x00007f05100c9c89: jne    0x00007f05100c9c70  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007f05100c9c8b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007f05100c9c8e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f05100c9c93: add    rsp,0x18
             0x00007f05100c9c97: test   DWORD PTR [rip+0xd591369],eax        # 0x00007f051d65b006
                                                           ;   {poll_return}
             0x00007f05100c9c9d: vzeroupper 
....................................................................................................
 26.95%  <total for region 1>

....[Hottest Regions]...............................................................................
 26.95%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 
  3.46%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  2.93%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.23%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.23%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.17%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.98%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.60%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.37%         interpreter  areturn  176 areturn  (8 bytes) 
  1.22%         interpreter  goto  167 goto  (113 bytes) 
  1.10%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.08%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.07%         interpreter  aload  25 aload  (60 bytes) 
  0.96%              kernel  [unknown] (6 bytes) 
  0.95%         interpreter  invokeinterface  185 invokeinterface  (137 bytes) 
  0.90%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.85%         interpreter  method entry point (kind = accessor)  (115 bytes) 
  0.83%         interpreter  lload  22 lload  (32 bytes) 
  0.78%         interpreter  areturn  176 areturn  (23 bytes) 
  0.78%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
 44.57%  <...other 758 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 26.95%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 
  8.98%         interpreter  method entry point (kind = zerolocals)  
  5.18%         interpreter  invokevirtual  182 invokevirtual  
  3.53%         interpreter  ireturn  172 ireturn  
  2.98%         interpreter  invoke return entry points  
  2.86%              kernel  [unknown] 
  2.43%         interpreter  method entry point (kind = accessor)  
  2.41%         interpreter  areturn  176 areturn  
  2.17%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.14%         interpreter  invokeinterface  185 invokeinterface  
  1.92%         interpreter  getstatic  178 getstatic  
  1.89%         interpreter  invokespecial  183 invokespecial  
  1.66%         interpreter  goto  167 goto  
  1.56%         interpreter  invokestatic  184 invokestatic  
  1.41%         interpreter  checkcast  192 checkcast  
  1.09%         interpreter  ifeq  153 ifeq  
  1.07%         interpreter  aload  25 aload  
  0.99%         interpreter  return  177 return  
  0.98%         interpreter  aload_1  43 aload_1  
  0.97%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
 26.83%  <...other 301 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 61.92%         interpreter
 27.41%               JVMCI
  6.82%           libjvm.so
  2.86%              kernel
  0.37%        libc-2.28.so
  0.21%             Unknown
  0.16%  libpthread-2.28.so
  0.13%      perf-11079.map
  0.07%      hsdis-amd64.so
  0.01%        runtime stub
  0.01%          libjava.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 57262 total address lines.
Perf output processed (skipped 9.159 seconds):
 Column 1: cycles (14850 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 

             0x00007f06bc0c9b16: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007f06bc0c9b19: mov    r11,rax
             0x00007f06bc0c9b1c: mov    rax,r14
         ╭   0x00007f06bc0c9b1f: jmp    0x00007f06bc0c9b3c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007f06bc0c9b24: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f06bc0c9b2a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.18%  │↗  0x00007f06bc0c9b30: test   DWORD PTR [rip+0xcbea4d0],eax        # 0x00007f06c8cb4006
         ││                                                ;   {poll}
  9.76%  ││  0x00007f06bc0c9b36: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.84%  ││  0x00007f06bc0c9b39: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.74%  ↘│  0x00007f06bc0c9b3c: mov    r8,rax
  1.08%   │  0x00007f06bc0c9b3f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
 10.30%   │  0x00007f06bc0c9b43: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  2.07%   │  0x00007f06bc0c9b46: cmp    r10,rax
          ╰  0x00007f06bc0c9b49: jne    0x00007f06bc0c9b30  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007f06bc0c9b4b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007f06bc0c9b4e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f06bc0c9b53: add    rsp,0x18
             0x00007f06bc0c9b57: test   DWORD PTR [rip+0xcbea4a9],eax        # 0x00007f06c8cb4006
                                                           ;   {poll_return}
             0x00007f06bc0c9b5d: vzeroupper 
....................................................................................................
 26.98%  <total for region 1>

....[Hottest Regions]...............................................................................
 26.98%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 
  3.74%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  2.94%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.30%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.29%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.96%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.65%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.33%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.31%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.27%         interpreter  areturn  176 areturn  (8 bytes) 
  1.22%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.19%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.09%         interpreter  goto  167 goto  (70 bytes) 
  1.09%         interpreter  fast_aload_0  220 fast_aload_0  (69 bytes) 
  1.03%         interpreter  invokeinterface  185 invokeinterface  (150 bytes) 
  1.00%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  0.94%              kernel  [unknown] (6 bytes) 
  0.90%         interpreter  aload  25 aload  (31 bytes) 
  0.88%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.85%         interpreter  method entry point (kind = accessor)  (115 bytes) 
 44.04%  <...other 750 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 26.98%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 
  9.29%         interpreter  method entry point (kind = zerolocals)  
  5.41%         interpreter  invokevirtual  182 invokevirtual  
  3.78%         interpreter  ireturn  172 ireturn  
  3.06%         interpreter  invoke return entry points  
  2.95%              kernel  [unknown] 
  2.15%         interpreter  method entry point (kind = accessor)  
  2.15%         interpreter  invokeinterface  185 invokeinterface  
  2.10%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.03%         interpreter  getstatic  178 getstatic  
  2.03%         interpreter  areturn  176 areturn  
  1.81%         interpreter  invokespecial  183 invokespecial  
  1.66%         interpreter  invokestatic  184 invokestatic  
  1.53%         interpreter  goto  167 goto  
  1.29%         interpreter  checkcast  192 checkcast  
  1.09%         interpreter  fast_aload_0  220 fast_aload_0  
  1.08%         interpreter  aload  25 aload  
  1.08%         interpreter  aload_1  43 aload_1  
  1.04%         interpreter  ifeq  153 ifeq  
  0.96%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
 26.51%  <...other 299 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 62.23%         interpreter
 27.43%               JVMCI
  6.25%           libjvm.so
  2.95%              kernel
  0.28%        libc-2.28.so
  0.27%      perf-11122.map
  0.26%             Unknown
  0.25%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.02%          libjava.so
  0.01%        runtime stub
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50664 total address lines.
Perf output processed (skipped 7.684 seconds):
 Column 1: cycles (15648 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 94 (22 bytes) 

             0x00007fdee00c7bd6: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007fdee00c7bd9: mov    r11,rax
             0x00007fdee00c7bdc: mov    rax,r14
         ╭   0x00007fdee00c7bdf: jmp    0x00007fdee00c7bfc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007fdee00c7be4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007fdee00c7bea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  0.88%  │↗  0x00007fdee00c7bf0: test   DWORD PTR [rip+0xa752410],eax        # 0x00007fdeea81a006
         ││                                                ;   {poll}
  7.36%  ││  0x00007fdee00c7bf6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.58%  ││  0x00007fdee00c7bf9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.48%  ↘│  0x00007fdee00c7bfc: mov    r8,rax
  0.86%   │  0x00007fdee00c7bff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  8.15%   │  0x00007fdee00c7c03: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  1.65%   │  0x00007fdee00c7c06: cmp    r10,rax
          ╰  0x00007fdee00c7c09: jne    0x00007fdee00c7bf0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007fdee00c7c0b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007fdee00c7c0e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fdee00c7c13: add    rsp,0x18
             0x00007fdee00c7c17: test   DWORD PTR [rip+0xa7523e9],eax        # 0x00007fdeea81a006
                                                           ;   {poll_return}
             0x00007fdee00c7c1d: vzeroupper 
....................................................................................................
 20.97%  <total for region 1>

....[Hottest Regions]...............................................................................
 20.97%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 94 (22 bytes) 
  3.48%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.30%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.66%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.28%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.26%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.79%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.44%         interpreter  areturn  176 areturn  (8 bytes) 
  1.44%         interpreter  invokeinterface  185 invokeinterface  (113 bytes) 
  1.20%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.19%         interpreter  goto  167 goto  (66 bytes) 
  1.16%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.08%              kernel  [unknown] (6 bytes) 
  1.05%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.02%         interpreter  ireturn  172 ireturn  (40 bytes) 
  0.99%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  0.96%         interpreter  aload  25 aload  (45 bytes) 
  0.93%         interpreter  invoke return entry points  (63 bytes) 
  0.92%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  0.89%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
 48.99%  <...other 730 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 20.97%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 94 
  9.71%         interpreter  method entry point (kind = zerolocals)  
  5.53%         interpreter  invokevirtual  182 invokevirtual  
  3.94%         interpreter  invoke return entry points  
  3.58%         interpreter  ireturn  172 ireturn  
  2.84%         interpreter  invokeinterface  185 invokeinterface  
  2.47%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.45%         interpreter  areturn  176 areturn  
  2.20%         interpreter  invokespecial  183 invokespecial  
  2.19%              kernel  [unknown] 
  2.15%         interpreter  method entry point (kind = accessor)  
  1.94%         interpreter  getstatic  178 getstatic  
  1.68%         interpreter  invokestatic  184 invokestatic  
  1.66%         interpreter  goto  167 goto  
  1.57%         interpreter  checkcast  192 checkcast  
  1.25%         interpreter  fast_aload_0  220 fast_aload_0  
  1.20%         interpreter  return  177 return  
  1.18%         interpreter  aload  25 aload  
  1.07%         interpreter  ifeq  153 ifeq  
  1.02%         interpreter  aload_1  43 aload_1  
 29.38%  <...other 298 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 68.63%         interpreter
 21.65%               JVMCI
  6.46%           libjvm.so
  2.19%              kernel
  0.24%  libpthread-2.28.so
  0.24%             Unknown
  0.23%        libc-2.28.so
  0.21%      perf-11169.map
  0.05%      hsdis-amd64.so
  0.04%        runtime stub
  0.03%          libjava.so
  0.01%              [vdso]
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 25.00% complete, ETA 00:04:17
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1028.078 ms/op
# Warmup Iteration   2: 1041.665 ms/op
# Warmup Iteration   3: 1035.372 ms/op
# Warmup Iteration   4: 1042.910 ms/op
# Warmup Iteration   5: 1037.981 ms/op
Iteration   1: 1034.876 ms/op
Iteration   2: 288.105 ms/op
Iteration   3: 1.361 ms/op
Iteration   4: 0.848 ms/op
Iteration   5: 0.848 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 29.17% complete, ETA 00:03:58
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 973.745 ms/op
# Warmup Iteration   2: 1135.568 ms/op
# Warmup Iteration   3: 1099.583 ms/op
# Warmup Iteration   4: 1016.630 ms/op
# Warmup Iteration   5: 1096.934 ms/op
Iteration   1: 204.528 ms/op
Iteration   2: 1.349 ms/op
Iteration   3: 0.840 ms/op
Iteration   4: 0.804 ms/op
Iteration   5: 0.837 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 33.33% complete, ETA 00:03:43
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1031.594 ms/op
# Warmup Iteration   2: 1036.018 ms/op
# Warmup Iteration   3: 1074.316 ms/op
# Warmup Iteration   4: 1043.106 ms/op
# Warmup Iteration   5: 1038.879 ms/op
Iteration   1: 1006.795 ms/op
Iteration   2: 1037.125 ms/op
Iteration   3: 265.489 ms/op
Iteration   4: 1.365 ms/op
Iteration   5: 0.844 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda":
  256.401 ±(99.9%) 439.806 ms/op [Average]
  (min, avg, max) = (0.804, 256.401, 1037.125), stdev = 411.395
  CI (99.9%): [≈ 0, 696.207] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·asm":
PrintAssembly processed: 50133 total address lines.
Perf output processed (skipped 7.020 seconds):
 Column 1: cycles (15573 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fa2b80c971c: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fa2b80c971f: mov    r8,r11
             0x00007fa2b80c9722: mov    r11,r14
         ╭   0x00007fa2b80c9725: jmp    0x00007fa2b80c973c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fa2b80c972a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.01%  │↗  0x00007fa2b80c9730: test   DWORD PTR [rip+0xbf918d0],eax        # 0x00007fa2c405b006
         ││                                                ;   {poll}
  0.54%  ││  0x00007fa2b80c9736: inc    r11                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  3.89%  ││  0x00007fa2b80c9739: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  2.32%  ↘│  0x00007fa2b80c973c: mov    r9,r11
  0.01%   │  0x00007fa2b80c973f: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@2 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.61%   │  0x00007fa2b80c9743: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.20%   │  0x00007fa2b80c9747: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  2.41%   │  0x00007fa2b80c974a: cmp    r10,r11
          ╰  0x00007fa2b80c974d: jne    0x00007fa2b80c9730  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fa2b80c974f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fa2b80c9752: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fa2b80c9757: add    rsp,0x18
             0x00007fa2b80c975b: test   DWORD PTR [rip+0xbf918a5],eax        # 0x00007fa2c405b006
                                                           ;   {poll_return}
             0x00007fa2b80c9761: vzeroupper 
....................................................................................................
 13.99%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.99%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 
  3.96%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.44%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.08%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.27%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.16%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  1.77%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.53%         interpreter  lload  22 lload  (32 bytes) 
  1.48%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.40%         interpreter  goto  167 goto  (70 bytes) 
  1.39%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.35%         interpreter  ireturn  172 ireturn  (104 bytes) 
  1.32%         interpreter  areturn  176 areturn  (4 bytes) 
  1.25%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.17%         interpreter  invoke return entry points  (112 bytes) 
  1.16%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.11%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.10%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.08%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.03%         interpreter  checkcast  192 checkcast  (40 bytes) 
 52.96%  <...other 709 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.99%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
 10.92%         interpreter  method entry point (kind = zerolocals)  
  5.66%         interpreter  invokevirtual  182 invokevirtual  
  4.23%               JVMCI  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl::createMethod, version 104 
  4.01%         interpreter  invoke return entry points  
  3.96%         interpreter  ireturn  172 ireturn  
  3.13%         interpreter  invokeinterface  185 invokeinterface  
  2.55%         interpreter  areturn  176 areturn  
  2.45%         interpreter  invokespecial  183 invokespecial  
  2.40%         interpreter  invokestatic  184 invokestatic  
  2.36%         interpreter  method entry point (kind = accessor)  
  2.29%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  1.96%              kernel  [unknown] 
  1.96%         interpreter  getstatic  178 getstatic  
  1.96%         interpreter  goto  167 goto  
  1.81%         interpreter  checkcast  192 checkcast  
  1.63%         interpreter  lload  22 lload  
  1.45%         interpreter  fast_aload_0  220 fast_aload_0  
  1.33%         interpreter  ifeq  153 ifeq  
  1.21%         interpreter  new  187 new  
 28.71%  <...other 219 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 75.96%         interpreter
 19.10%               JVMCI
  2.09%           libjvm.so
  1.96%              kernel
  0.26%      perf-11215.map
  0.24%        libc-2.28.so
  0.21%             Unknown
  0.14%  libpthread-2.28.so
  0.02%        runtime stub
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 51494 total address lines.
Perf output processed (skipped 8.156 seconds):
 Column 1: cycles (15065 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fef600c9adc: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fef600c9adf: mov    r8,r11
             0x00007fef600c9ae2: mov    r11,r14
         ╭   0x00007fef600c9ae5: jmp    0x00007fef600c9afc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fef600c9aea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.15%  │↗  0x00007fef600c9af0: test   DWORD PTR [rip+0xb5db510],eax        # 0x00007fef6b6a5006
         ││                                                ;   {poll}
  2.86%  ││  0x00007fef600c9af6: inc    r11                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  4.35%  ││  0x00007fef600c9af9: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  2.44%  ↘│  0x00007fef600c9afc: mov    r9,r11
  0.10%   │  0x00007fef600c9aff: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@2 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.87%   │  0x00007fef600c9b03: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.44%   │  0x00007fef600c9b07: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  2.48%   │  0x00007fef600c9b0a: cmp    r10,r11
          ╰  0x00007fef600c9b0d: jne    0x00007fef600c9af0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fef600c9b0f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fef600c9b12: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fef600c9b17: add    rsp,0x18
             0x00007fef600c9b1b: test   DWORD PTR [rip+0xb5db4e5],eax        # 0x00007fef6b6a5006
                                                           ;   {poll_return}
             0x00007fef600c9b21: vzeroupper 
....................................................................................................
 19.71%  <total for region 1>

....[Hottest Regions]...............................................................................
 19.71%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 
  3.36%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  2.98%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.48%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.32%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.28%         interpreter  ireturn  172 ireturn  (0 bytes) 
  2.24%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  1.75%         interpreter  lload  22 lload  (32 bytes) 
  1.70%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.57%         interpreter  goto  167 goto  (66 bytes) 
  1.43%         interpreter  areturn  176 areturn  (8 bytes) 
  1.42%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.23%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.21%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.09%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.08%         interpreter  aload_3  45 aload_3  (36 bytes) 
  0.94%         interpreter  fast_aload_0  220 fast_aload_0  (31 bytes) 
  0.93%         interpreter  invoke return entry points  (112 bytes) 
  0.90%         interpreter  invokespecial  183 invokespecial  (35 bytes) 
  0.86%         interpreter  method entry point (kind = accessor)  (14 bytes) 
 48.51%  <...other 708 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 19.71%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
  9.12%         interpreter  method entry point (kind = zerolocals)  
  5.55%         interpreter  invokevirtual  182 invokevirtual  
  4.00%         interpreter  invoke return entry points  
  3.78%         interpreter  ireturn  172 ireturn  
  3.03%         interpreter  invokeinterface  185 invokeinterface  
  2.44%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.43%         interpreter  areturn  176 areturn  
  2.43%         interpreter  method entry point (kind = accessor)  
  2.14%         interpreter  goto  167 goto  
  2.12%         interpreter  getstatic  178 getstatic  
  2.06%         interpreter  invokestatic  184 invokestatic  
  1.98%         interpreter  invokespecial  183 invokespecial  
  1.83%         interpreter  lload  22 lload  
  1.73%              kernel  [unknown] 
  1.66%         interpreter  checkcast  192 checkcast  
  1.55%         interpreter  ifeq  153 ifeq  
  1.19%         interpreter  fast_aload_0  220 fast_aload_0  
  1.14%         interpreter  aload_3  45 aload_3  
  1.04%         interpreter  aload_1  43 aload_1  
 29.08%  <...other 285 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 70.12%         interpreter
 20.40%               JVMCI
  6.86%           libjvm.so
  1.73%              kernel
  0.26%      perf-11253.map
  0.21%             Unknown
  0.17%        libc-2.28.so
  0.13%  libpthread-2.28.so
  0.07%      hsdis-amd64.so
  0.03%        runtime stub
  0.01%          libjava.so
  0.01%        libverify.so
....................................................................................................
100.00%  <totals>

PrintAssembly processed: 49228 total address lines.
Perf output processed (skipped 6.046 seconds):
 Column 1: cycles (15418 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  8.68%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (20 bytes) 
  4.46%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.68%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.32%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.82%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.45%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  1.67%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.51%         interpreter  invokeinterface  185 invokeinterface  (113 bytes) 
  1.48%         interpreter  goto  167 goto  (79 bytes) 
  1.39%         interpreter  lload  22 lload  (32 bytes) 
  1.38%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.32%         interpreter  areturn  176 areturn  (23 bytes) 
  1.32%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.30%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.27%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.26%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.26%         interpreter  areturn  176 areturn  (4 bytes) 
  1.24%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.19%         interpreter  invoke return entry points  (112 bytes) 
  1.17%              kernel  [unknown] (6 bytes) 
 55.82%  <...other 733 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.82%         interpreter  method entry point (kind = zerolocals)  
  8.68%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
  5.48%         interpreter  invokevirtual  182 invokevirtual  
  4.52%         interpreter  ireturn  172 ireturn  
  4.18%         interpreter  invoke return entry points  
  3.20%         interpreter  invokeinterface  185 invokeinterface  
  3.04%         interpreter  invokespecial  183 invokespecial  
  2.82%         interpreter  areturn  176 areturn  
  2.62%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.56%         interpreter  method entry point (kind = accessor)  
  2.45%              kernel  [unknown] 
  2.35%         interpreter  invokestatic  184 invokestatic  
  2.11%         interpreter  goto  167 goto  
  2.04%         interpreter  getstatic  178 getstatic  
  1.93%         interpreter  checkcast  192 checkcast  
  1.56%         interpreter  fast_aload_0  220 fast_aload_0  
  1.45%         interpreter  lload  22 lload  
  1.38%         interpreter  new  187 new  
  1.23%         interpreter  aload_1  43 aload_1  
  1.19%         interpreter  return  177 return  
 33.40%  <...other 308 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 79.79%         interpreter
  9.90%               JVMCI
  6.69%           libjvm.so
  2.45%              kernel
  0.33%             Unknown
  0.28%        libc-2.28.so
  0.25%      perf-11292.map
  0.17%  libpthread-2.28.so
  0.06%        runtime stub
  0.05%      hsdis-amd64.so
  0.02%          libjava.so
  0.01%              [vdso]
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 37.50% complete, ETA 00:03:25
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 132.972 ms/op
# Warmup Iteration   2: 141.456 ms/op
# Warmup Iteration   3: 133.891 ms/op
# Warmup Iteration   4: 134.999 ms/op
# Warmup Iteration   5: 136.082 ms/op
Iteration   1: 136.397 ms/op
Iteration   2: 3.157 ms/op
Iteration   3: 0.781 ms/op
Iteration   4: 0.784 ms/op
Iteration   5: 0.784 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 41.67% complete, ETA 00:03:09
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 128.762 ms/op
# Warmup Iteration   2: 136.193 ms/op
# Warmup Iteration   3: 151.011 ms/op
# Warmup Iteration   4: 151.492 ms/op
# Warmup Iteration   5: 152.978 ms/op
Iteration   1: 152.061 ms/op
Iteration   2: 151.797 ms/op
Iteration   3: 1.640 ms/op
Iteration   4: 0.874 ms/op
Iteration   5: 0.857 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 45.83% complete, ETA 00:02:53
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 131.336 ms/op
# Warmup Iteration   2: 144.060 ms/op
# Warmup Iteration   3: 139.318 ms/op
# Warmup Iteration   4: 135.246 ms/op
# Warmup Iteration   5: 137.270 ms/op
Iteration   1: 135.545 ms/op
Iteration   2: 125.883 ms/op
Iteration   3: 0.800 ms/op
Iteration   4: 0.806 ms/op
Iteration   5: 0.807 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline":
  47.532 ±(99.9%) 72.910 ms/op [Average]
  (min, avg, max) = (0.781, 47.532, 152.061), stdev = 68.200
  CI (99.9%): [≈ 0, 120.441] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·asm":
PrintAssembly processed: 49856 total address lines.
Perf output processed (skipped 6.268 seconds):
 Column 1: cycles (15371 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007ffad00c68f0: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007ffad00c68f3: mov    r8,rax
             0x00007ffad00c68f6: mov    rax,r14
         ╭   0x00007ffad00c68f9: jmp    0x00007ffad00c690c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007ffad00c68fe: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  0.02%  │↗  0x00007ffad00c6900: test   DWORD PTR [rip+0xa8b6700],eax        # 0x00007ffada97d006
         ││                                                ;   {poll}
  1.44%  ││  0x00007ffad00c6906: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
         ││  0x00007ffad00c6909: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  7.14%  ↘│  0x00007ffad00c690c: mov    r9,rax
          │  0x00007ffad00c690f: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  1.39%   │  0x00007ffad00c6913: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.06%   │  0x00007ffad00c6917: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  7.21%   │  0x00007ffad00c691a: cmp    r10,rax
          ╰  0x00007ffad00c691d: jne    0x00007ffad00c6900  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007ffad00c691f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007ffad00c6922: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007ffad00c6927: add    rsp,0x18
             0x00007ffad00c692b: test   DWORD PTR [rip+0xa8b66d5],eax        # 0x00007ffada97d006
                                                           ;   {poll_return}
             0x00007ffad00c6931: vzeroupper 
....................................................................................................
 17.27%  <total for region 1>

....[Hottest Regions]...............................................................................
 17.27%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 (26 bytes) 
  4.81%         interpreter  lload  22 lload  (32 bytes) 
  3.57%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.08%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.06%         interpreter  lstore  55 lstore  (21 bytes) 
  2.52%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.30%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.26%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.13%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  1.91%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  1.70%         interpreter  goto  167 goto  (70 bytes) 
  1.57%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.44%         interpreter  areturn  176 areturn  (8 bytes) 
  1.14%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.10%         interpreter  ireturn  172 ireturn  (45 bytes) 
  1.06%         interpreter  invokespecial  183 invokespecial  (77 bytes) 
  1.01%         interpreter  ladd  97 ladd  (16 bytes) 
  1.00%         interpreter  ifeq  153 ifeq  (36 bytes) 
  0.92%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  0.90%         interpreter  lcmp  148 lcmp  (24 bytes) 
 45.27%  <...other 689 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 17.27%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 
  9.22%         interpreter  method entry point (kind = zerolocals)  
  5.15%         interpreter  invokevirtual  182 invokevirtual  
  4.83%         interpreter  lload  22 lload  
  3.93%         interpreter  ireturn  172 ireturn  
  3.06%         interpreter  lstore  55 lstore  
  2.65%         interpreter  invoke return entry points  
  2.49%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.43%         interpreter  areturn  176 areturn  
  2.35%         interpreter  goto  167 goto  
  2.16%         interpreter  method entry point (kind = accessor)  
  2.15%              kernel  [unknown] 
  1.96%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  1.96%         interpreter  invokeinterface  185 invokeinterface  
  1.82%         interpreter  invokespecial  183 invokespecial  
  1.81%         interpreter  getstatic  178 getstatic  
  1.54%         interpreter  ifeq  153 ifeq  
  1.17%         interpreter  fast_aload_0  220 fast_aload_0  
  1.15%         interpreter  instanceof  193 instanceof  
  1.13%         interpreter  checkcast  192 checkcast  
 29.80%  <...other 282 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 73.24%         interpreter
 17.48%               JVMCI
  6.09%           libjvm.so
  2.15%              kernel
  0.31%             Unknown
  0.21%        libc-2.28.so
  0.20%  libpthread-2.28.so
  0.19%      perf-11340.map
  0.05%          libjava.so
  0.04%        runtime stub
  0.04%      hsdis-amd64.so
....................................................................................................
100.00%  <totals>

PrintAssembly processed: 48969 total address lines.
Perf output processed (skipped 6.028 seconds):
 Column 1: cycles (15416 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f44cc0c6970: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007f44cc0c6973: mov    r8,rax
             0x00007f44cc0c6976: mov    rax,r14
         ╭   0x00007f44cc0c6979: jmp    0x00007f44cc0c698c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007f44cc0c697e: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  0.01%  │↗  0x00007f44cc0c6980: test   DWORD PTR [rip+0xc066680],eax        # 0x00007f44d812d006
         ││                                                ;   {poll}
  1.92%  ││  0x00007f44cc0c6986: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
         ││  0x00007f44cc0c6989: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  4.97%  ↘│  0x00007f44cc0c698c: mov    r9,rax
  0.01%   │  0x00007f44cc0c698f: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  1.82%   │  0x00007f44cc0c6993: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.12%   │  0x00007f44cc0c6997: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  4.49%   │  0x00007f44cc0c699a: cmp    r10,rax
          ╰  0x00007f44cc0c699d: jne    0x00007f44cc0c6980  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f44cc0c699f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007f44cc0c69a2: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f44cc0c69a7: add    rsp,0x18
             0x00007f44cc0c69ab: test   DWORD PTR [rip+0xc066655],eax        # 0x00007f44d812d006
                                                           ;   {poll_return}
             0x00007f44cc0c69b1: vzeroupper 
....................................................................................................
 13.34%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.34%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (26 bytes) 
  5.57%         interpreter  lload  22 lload  (32 bytes) 
  4.15%         interpreter  lstore  55 lstore  (40 bytes) 
  3.90%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.13%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.38%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.27%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.18%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.15%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  2.14%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.99%         interpreter  goto  167 goto  (83 bytes) 
  1.63%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.38%         interpreter  areturn  176 areturn  (8 bytes) 
  1.28%         interpreter  lcmp  148 lcmp  (29 bytes) 
  1.27%         interpreter  lmul  105 lmul  (12 bytes) 
  1.18%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
  1.12%         interpreter  ladd  97 ladd  (16 bytes) 
  1.08%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.04%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.01%         interpreter  ireturn  172 ireturn  (40 bytes) 
 45.82%  <...other 684 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.34%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 
  9.67%         interpreter  method entry point (kind = zerolocals)  
  5.60%         interpreter  lload  22 lload  
  5.20%         interpreter  invokevirtual  182 invokevirtual  
  4.15%         interpreter  lstore  55 lstore  
  3.41%         interpreter  ireturn  172 ireturn  
  2.85%         interpreter  goto  167 goto  
  2.63%         interpreter  invoke return entry points  
  2.37%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.27%         interpreter  areturn  176 areturn  
  2.26%         interpreter  method entry point (kind = accessor)  
  2.24%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  2.07%         interpreter  invokeinterface  185 invokeinterface  
  1.97%         interpreter  invokespecial  183 invokespecial  
  1.92%         interpreter  getstatic  178 getstatic  
  1.82%              kernel  [unknown] 
  1.62%         interpreter  ifeq  153 ifeq  
  1.36%         interpreter  fast_aload_0  220 fast_aload_0  
  1.28%         interpreter  lcmp  148 lcmp  
  1.27%         interpreter  lmul  105 lmul  
 30.70%  <...other 294 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 77.70%         interpreter
 13.51%               JVMCI
  5.94%           libjvm.so
  1.82%              kernel
  0.28%             Unknown
  0.23%  libpthread-2.28.so
  0.23%        libc-2.28.so
  0.12%      perf-11379.map
  0.08%      hsdis-amd64.so
  0.04%        runtime stub
  0.03%          libjava.so
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
100.00%  <totals>

PrintAssembly processed: 49902 total address lines.
Perf output processed (skipped 6.210 seconds):
 Column 1: cycles (15260 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f61940c6d30: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007f61940c6d33: mov    r8,rax
             0x00007f61940c6d36: mov    rax,r14
         ╭   0x00007f61940c6d39: jmp    0x00007f61940c6d4c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007f61940c6d3e: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  0.01%  │↗  0x00007f61940c6d40: test   DWORD PTR [rip+0xaaeb2c0],eax        # 0x00007f619ebb2006
         ││                                                ;   {poll}
  2.12%  ││  0x00007f61940c6d46: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
         ││  0x00007f61940c6d49: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  5.96%  ↘│  0x00007f61940c6d4c: mov    r9,rax
          │  0x00007f61940c6d4f: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  1.87%   │  0x00007f61940c6d53: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.08%   │  0x00007f61940c6d57: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  6.20%   │  0x00007f61940c6d5a: cmp    r10,rax
          ╰  0x00007f61940c6d5d: jne    0x00007f61940c6d40  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f61940c6d5f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007f61940c6d62: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f61940c6d67: add    rsp,0x18
             0x00007f61940c6d6b: test   DWORD PTR [rip+0xaaeb295],eax        # 0x00007f619ebb2006
                                                           ;   {poll_return}
             0x00007f61940c6d71: vzeroupper 
....................................................................................................
 16.24%  <total for region 1>

....[Hottest Regions]...............................................................................
 16.24%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (26 bytes) 
  5.09%         interpreter  lload  22 lload  (32 bytes) 
  3.94%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  3.44%         interpreter  lstore  55 lstore  (40 bytes) 
  3.15%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.35%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.27%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.11%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  2.01%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.84%         interpreter  goto  167 goto  (70 bytes) 
  1.63%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.32%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.28%         interpreter  areturn  176 areturn  (8 bytes) 
  1.23%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.14%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.09%         interpreter  iconst_0  3 iconst_0  (20 bytes) 
  1.06%         interpreter  lmul  105 lmul  (30 bytes) 
  1.00%         interpreter  ireturn  172 ireturn  (40 bytes) 
  0.96%         interpreter  invokeinterface  185 invokeinterface  (132 bytes) 
  0.90%         interpreter  ladd  97 ladd  (16 bytes) 
 45.95%  <...other 667 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 16.25%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 
  9.63%         interpreter  method entry point (kind = zerolocals)  
  5.40%         interpreter  invokevirtual  182 invokevirtual  
  5.11%         interpreter  lload  22 lload  
  3.44%         interpreter  lstore  55 lstore  
  3.25%         interpreter  ireturn  172 ireturn  
  2.60%         interpreter  invoke return entry points  
  2.52%         interpreter  goto  167 goto  
  2.44%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.32%         interpreter  method entry point (kind = accessor)  
  2.26%         interpreter  areturn  176 areturn  
  2.18%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  2.07%         interpreter  getstatic  178 getstatic  
  1.98%         interpreter  invokeinterface  185 invokeinterface  
  1.96%         interpreter  invokespecial  183 invokespecial  
  1.30%         interpreter  ifeq  153 ifeq  
  1.26%         interpreter  checkcast  192 checkcast  
  1.23%              kernel  [unknown] 
  1.16%         interpreter  iconst_0  3 iconst_0  
  1.08%         interpreter  invokestatic  184 invokestatic  
 30.56%  <...other 287 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 75.14%         interpreter
 16.49%               JVMCI
  6.32%           libjvm.so
  1.23%              kernel
  0.22%        libc-2.28.so
  0.21%             Unknown
  0.18%  libpthread-2.28.so
  0.12%      perf-11417.map
  0.04%      hsdis-amd64.so
  0.03%        runtime stub
  0.02%           libzip.so
  0.01%          libjava.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 50.00% complete, ETA 00:02:38
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 959.693 ms/op
# Warmup Iteration   2: 952.792 ms/op
# Warmup Iteration   3: 946.946 ms/op
# Warmup Iteration   4: 927.565 ms/op
# Warmup Iteration   5: 6.294 ms/op
Iteration   1: 0.776 ms/op
Iteration   2: 0.787 ms/op
Iteration   3: 0.780 ms/op
Iteration   4: 0.898 ms/op
Iteration   5: 0.774 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 54.17% complete, ETA 00:02:26
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1023.522 ms/op
# Warmup Iteration   2: 1002.745 ms/op
# Warmup Iteration   3: 1037.673 ms/op
# Warmup Iteration   4: 991.246 ms/op
# Warmup Iteration   5: 1070.103 ms/op
Iteration   1: 952.486 ms/op
Iteration   2: 7.695 ms/op
Iteration   3: 0.818 ms/op
Iteration   4: 0.823 ms/op
Iteration   5: 0.819 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 58.33% complete, ETA 00:02:13
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1016.121 ms/op
# Warmup Iteration   2: 1024.884 ms/op
# Warmup Iteration   3: 1108.765 ms/op
# Warmup Iteration   4: 1023.362 ms/op
# Warmup Iteration   5: 1022.775 ms/op
Iteration   1: 1020.625 ms/op
Iteration   2: 1008.063 ms/op
Iteration   3: 282.755 ms/op
Iteration   4: 1.977 ms/op
Iteration   5: 0.814 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda":
  218.726 ±(99.9%) 435.896 ms/op [Average]
  (min, avg, max) = (0.774, 218.726, 1020.625), stdev = 407.738
  CI (99.9%): [≈ 0, 654.622] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·asm":
PrintAssembly processed: 57274 total address lines.
Perf output processed (skipped 9.476 seconds):
 Column 1: cycles (14761 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007fa7800c93cd: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fa7800c93d0: mov    r11,rax
             0x00007fa7800c93d3: mov    rax,r14
         ╭   0x00007fa7800c93d6: jmp    0x00007fa7800c93ec  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fa7800c93db: nop    DWORD PTR [rax+rax*1+0x0]
         │                                                 ; OopMap{rbx=Oop off=128}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.12%  │↗  0x00007fa7800c93e0: test   DWORD PTR [rip+0xa3c2c20],eax        # 0x00007fa78a48c006
         ││                                                ;   {poll}
  9.97%  ││  0x00007fa7800c93e6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.49%  ││  0x00007fa7800c93e9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.91%  ↘│  0x00007fa7800c93ec: mov    r8,rax
  1.10%   │  0x00007fa7800c93ef: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
 10.18%   │  0x00007fa7800c93f3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  2.00%   │  0x00007fa7800c93f6: cmp    r10,rax
          ╰  0x00007fa7800c93f9: jne    0x00007fa7800c93e0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fa7800c93fb: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fa7800c93fe: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fa7800c9403: add    rsp,0x18
             0x00007fa7800c9407: test   DWORD PTR [rip+0xa3c2bf9],eax        # 0x00007fa78a48c006
                                                           ;   {poll_return}
             0x00007fa7800c940d: vzeroupper 
....................................................................................................
 26.77%  <total for region 1>

....[Hottest Regions]...............................................................................
 26.77%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.10%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.93%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  2.82%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.39%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.19%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.90%         interpreter  areturn  176 areturn  (8 bytes) 
  1.53%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.27%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.17%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.12%         interpreter  goto  167 goto  (75 bytes) 
  1.00%              kernel  [unknown] (6 bytes) 
  0.97%         interpreter  invokeinterface  185 invokeinterface  (109 bytes) 
  0.93%         interpreter  lload  22 lload  (32 bytes) 
  0.87%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.86%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  0.78%         interpreter  invokevirtual  182 invokevirtual  (171 bytes) 
  0.75%         interpreter  method entry point (kind = accessor)  (115 bytes) 
  0.75%         interpreter  fast_aload_0  220 fast_aload_0  (22 bytes) 
  0.74%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
 45.18%  <...other 769 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 26.77%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  8.41%         interpreter  method entry point (kind = zerolocals)  
  5.07%         interpreter  invokevirtual  182 invokevirtual  
  4.57%         interpreter  ireturn  172 ireturn  
  2.99%         interpreter  invoke return entry points  
  2.90%              kernel  [unknown] 
  2.72%         interpreter  areturn  176 areturn  
  2.35%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.12%         interpreter  method entry point (kind = accessor)  
  1.94%         interpreter  invokeinterface  185 invokeinterface  
  1.86%         interpreter  getstatic  178 getstatic  
  1.71%         interpreter  invokespecial  183 invokespecial  
  1.44%         interpreter  invokestatic  184 invokestatic  
  1.42%         interpreter  goto  167 goto  
  1.33%         interpreter  checkcast  192 checkcast  
  1.09%         interpreter  aload_1  43 aload_1  
  1.03%         interpreter  ifeq  153 ifeq  
  1.00%         interpreter  return  177 return  
  1.00%         interpreter  fast_aload_0  220 fast_aload_0  
  0.99%         interpreter  lload  22 lload  
 27.29%  <...other 308 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 61.83%         interpreter
 27.12%               JVMCI
  6.87%           libjvm.so
  2.90%              kernel
  0.34%             Unknown
  0.32%        libc-2.28.so
  0.26%  libpthread-2.28.so
  0.22%      perf-11462.map
  0.07%      hsdis-amd64.so
  0.03%        runtime stub
  0.03%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50633 total address lines.
Perf output processed (skipped 6.971 seconds):
 Column 1: cycles (17847 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007f1fc40c950d: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f1fc40c9510: mov    r11,rax
             0x00007f1fc40c9513: mov    rax,r14
         ╭   0x00007f1fc40c9516: jmp    0x00007f1fc40c952c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f1fc40c951b: nop    DWORD PTR [rax+rax*1+0x0]
         │                                                 ; OopMap{rbx=Oop off=128}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.57%  │↗  0x00007f1fc40c9520: test   DWORD PTR [rip+0xd45fae0],eax        # 0x00007f1fd1529006
         ││                                                ;   {poll}
  5.06%  ││  0x00007f1fc40c9526: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.43%  ││  0x00007f1fc40c9529: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.06%  ↘│  0x00007f1fc40c952c: mov    r8,rax
  0.63%   │  0x00007f1fc40c952f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.44%   │  0x00007f1fc40c9533: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.21%   │  0x00007f1fc40c9536: cmp    r10,rax
          ╰  0x00007f1fc40c9539: jne    0x00007f1fc40c9520  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f1fc40c953b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f1fc40c953e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f1fc40c9543: add    rsp,0x18
             0x00007f1fc40c9547: test   DWORD PTR [rip+0xd45fab9],eax        # 0x00007f1fd1529006
                                                           ;   {poll_return}
             0x00007f1fc40c954d: vzeroupper 
....................................................................................................
 14.40%  <total for region 1>

....[Hottest Regions]...............................................................................
 14.40%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  4.07%         interpreter  method entry point (kind = zerolocals)  (126 bytes) 
  3.51%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.85%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.21%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.98%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.72%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.55%         interpreter  areturn  176 areturn  (8 bytes) 
  1.41%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.39%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.35%         interpreter  goto  167 goto  (71 bytes) 
  1.22%         interpreter  lload  22 lload  (32 bytes) 
  1.15%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.15%         interpreter  areturn  176 areturn  (23 bytes) 
  1.14%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.13%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.03%         interpreter  lreturn  173 lreturn  (4 bytes) 
  0.99%         interpreter  getstatic  178 getstatic  (76 bytes) 
  0.99%         interpreter  invoke return entry points  (112 bytes) 
  0.97%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
 53.79%  <...other 759 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 14.40%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
 10.71%         interpreter  method entry point (kind = zerolocals)  
  5.84%         interpreter  invokevirtual  182 invokevirtual  
  4.14%         interpreter  invoke return entry points  
  3.63%         interpreter  ireturn  172 ireturn  
  2.91%         interpreter  areturn  176 areturn  
  2.80%         interpreter  invokeinterface  185 invokeinterface  
  2.32%         interpreter  invokespecial  183 invokespecial  
  2.26%         interpreter  invokestatic  184 invokestatic  
  2.22%         interpreter  method entry point (kind = accessor)  
  2.20%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.19%              kernel  [unknown] 
  1.85%         interpreter  goto  167 goto  
  1.84%         interpreter  checkcast  192 checkcast  
  1.83%         interpreter  getstatic  178 getstatic  
  1.33%         interpreter  ifeq  153 ifeq  
  1.30%         interpreter  lload  22 lload  
  1.19%         interpreter  fast_aload_0  220 fast_aload_0  
  1.18%         interpreter  new  187 new  
  1.16%         interpreter  lreturn  173 lreturn  
 32.71%  <...other 312 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 74.91%         interpreter
 15.39%               JVMCI
  6.20%           libjvm.so
  2.19%              kernel
  0.43%      perf-11524.map
  0.27%        libc-2.28.so
  0.26%  libpthread-2.28.so
  0.22%             Unknown
  0.04%        runtime stub
  0.04%      hsdis-amd64.so
  0.02%              [vdso]
  0.02%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49162 total address lines.
Perf output processed (skipped 6.088 seconds):
 Column 1: cycles (15618 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  7.43%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  4.49%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.72%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.43%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.35%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.18%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.08%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.88%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.63%         interpreter  new  187 new  (199 bytes) 
  1.55%         interpreter  invokeinterface  185 invokeinterface  (122 bytes) 
  1.54%         interpreter  lload  22 lload  (32 bytes) 
  1.50%         interpreter  goto  167 goto  (70 bytes) 
  1.40%         interpreter  fast_aload_0  220 fast_aload_0  (69 bytes) 
  1.38%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.33%         interpreter  areturn  176 areturn  (8 bytes) 
  1.25%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.15%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.14%              kernel  [unknown] (6 bytes) 
  1.13%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.11%         interpreter  invoke return entry points  (112 bytes) 
 56.29%  <...other 777 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.06%         interpreter  method entry point (kind = zerolocals)  
  7.43%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  5.94%         interpreter  invokevirtual  182 invokevirtual  
  4.27%         interpreter  invoke return entry points  
  3.28%         interpreter  ireturn  172 ireturn  
  3.16%         interpreter  invokeinterface  185 invokeinterface  
  3.09%         interpreter  invokespecial  183 invokespecial  
  2.64%         interpreter  areturn  176 areturn  
  2.59%              kernel  [unknown] 
  2.43%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.19%         interpreter  invokestatic  184 invokestatic  
  2.06%         interpreter  method entry point (kind = accessor)  
  2.06%         interpreter  goto  167 goto  
  1.94%         interpreter  getstatic  178 getstatic  
  1.91%         interpreter  checkcast  192 checkcast  
  1.68%         interpreter  new  187 new  
  1.66%         interpreter  lreturn  173 lreturn  
  1.66%         interpreter  lload  22 lload  
  1.58%         interpreter  return  177 return  
  1.40%         interpreter  fast_aload_0  220 fast_aload_0  
 34.95%  <...other 324 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 80.68%         interpreter
  8.61%               JVMCI
  6.96%           libjvm.so
  2.59%              kernel
  0.34%      perf-11563.map
  0.28%        libc-2.28.so
  0.24%             Unknown
  0.19%  libpthread-2.28.so
  0.06%      hsdis-amd64.so
  0.03%          libjava.so
  0.02%        runtime stub
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 62.50% complete, ETA 00:01:58
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 123.836 ms/op
# Warmup Iteration   2: 132.054 ms/op
# Warmup Iteration   3: 140.235 ms/op
# Warmup Iteration   4: 139.467 ms/op
# Warmup Iteration   5: 139.926 ms/op
Iteration   1: 139.207 ms/op
Iteration   2: 138.434 ms/op
Iteration   3: 1.240 ms/op
Iteration   4: 0.793 ms/op
Iteration   5: 0.780 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 66.67% complete, ETA 00:01:44
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 132.254 ms/op
# Warmup Iteration   2: 127.354 ms/op
# Warmup Iteration   3: 137.510 ms/op
# Warmup Iteration   4: 132.523 ms/op
# Warmup Iteration   5: 131.165 ms/op
Iteration   1: 131.582 ms/op
Iteration   2: 131.575 ms/op
Iteration   3: 1.210 ms/op
Iteration   4: 0.723 ms/op
Iteration   5: 0.760 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 70.83% complete, ETA 00:01:31
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 132.494 ms/op
# Warmup Iteration   2: 129.970 ms/op
# Warmup Iteration   3: 135.963 ms/op
# Warmup Iteration   4: 136.385 ms/op
# Warmup Iteration   5: 136.830 ms/op
Iteration   1: 137.600 ms/op
Iteration   2: 137.445 ms/op
Iteration   3: 1.367 ms/op
Iteration   4: 0.780 ms/op
Iteration   5: 0.676 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline":
  54.945 ±(99.9%) 73.245 ms/op [Average]
  (min, avg, max) = (0.676, 54.945, 139.207), stdev = 68.514
  CI (99.9%): [≈ 0, 128.190] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·asm":
PrintAssembly processed: 48934 total address lines.
Perf output processed (skipped 6.351 seconds):
 Column 1: cycles (15645 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007fdba3a58e75: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007fdba3a58e78: mov    r10,rax
             0x00007fdba3a58e7b: mov    rax,r13
         ╭   0x00007fdba3a58e7e: jmp    0x00007fdba3a58e9c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007fdba3a58e83: nop    DWORD PTR [rax+0x0]
         │   0x00007fdba3a58e8a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.98%  │↗  0x00007fdba3a58e90: test   DWORD PTR [rip+0x9d73170],eax        # 0x00007fdbad7cc006
         ││                                                ;   {poll}
  1.92%  ││  0x00007fdba3a58e96: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  1.94%  ││  0x00007fdba3a58e99: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.80%  ↘│  0x00007fdba3a58e9c: mov    r11,rax
  2.10%   │  0x00007fdba3a58e9f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  1.82%   │  0x00007fdba3a58ea3: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  2.05%   │  0x00007fdba3a58ea6: cmp    r14,rax
          ╰  0x00007fdba3a58ea9: jne    0x00007fdba3a58e90  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007fdba3a58eab: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007fdba3a58eae: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fdba3a58eb3: add    rsp,0x18
             0x00007fdba3a58eb7: test   DWORD PTR [rip+0x9d73149],eax        # 0x00007fdbad7cc006
                                                           ;   {poll_return}
             0x00007fdba3a58ebd: vzeroupper 
....................................................................................................
 13.60%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.60%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  6.10%         interpreter  lload  22 lload  (32 bytes) 
  3.71%         interpreter  lstore  55 lstore  (21 bytes) 
  3.64%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.37%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.63%         interpreter  ireturn  172 ireturn  (0 bytes) 
  2.44%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.24%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (103 bytes) 
  2.22%         interpreter  goto  167 goto  (117 bytes) 
  1.57%         interpreter  areturn  176 areturn  (4 bytes) 
  1.48%         interpreter  ladd  97 ladd  (16 bytes) 
  1.36%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.35%         interpreter  iconst_0  3 iconst_0  (11 bytes) 
  1.27%         interpreter  lcmp  148 lcmp  (24 bytes) 
  1.20%         interpreter  lmul  105 lmul  (12 bytes) 
  1.20%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.11%         interpreter  getstatic  178 getstatic  (81 bytes) 
  1.07%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.02%         interpreter  ireturn  172 ireturn  (45 bytes) 
  0.98%         interpreter  lconst_1  10 lconst_1  (27 bytes) 
 46.45%  <...other 706 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.60%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
  9.76%         interpreter  method entry point (kind = zerolocals)  
  6.14%             Unknown  java.lang.Class::getModifiers, version 1435 
  6.12%         interpreter  lload  22 lload  
  4.90%         interpreter  invokevirtual  182 invokevirtual  
  4.02%         interpreter  ireturn  172 ireturn  
  3.71%         interpreter  lstore  55 lstore  
  3.20%         interpreter  goto  167 goto  
  2.86%         interpreter  invoke return entry points  
  2.54%         interpreter  areturn  176 areturn  
  2.24%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.11%         interpreter  method entry point (kind = accessor)  
  1.89%         interpreter  getstatic  178 getstatic  
  1.88%         interpreter  invokespecial  183 invokespecial  
  1.85%         interpreter  invokeinterface  185 invokeinterface  
  1.69%         interpreter  ifeq  153 ifeq  
  1.50%              kernel  [unknown] 
  1.48%         interpreter  ladd  97 ladd  
  1.38%         interpreter  iconst_0  3 iconst_0  
  1.29%         interpreter  fast_aload_0  220 fast_aload_0  
 25.85%  <...other 181 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.32%         interpreter
 13.83%               JVMCI
  6.38%             Unknown
  1.50%              kernel
  0.26%           libjvm.so
  0.22%        libc-2.28.so
  0.20%      perf-11608.map
  0.19%  libpthread-2.28.so
  0.05%        runtime stub
  0.03%                    
  0.02%              [vdso]
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 48898 total address lines.
Perf output processed (skipped 5.981 seconds):
 Column 1: cycles (15410 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007f8a880c6af5: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007f8a880c6af8: mov    r10,rax
             0x00007f8a880c6afb: mov    rax,r13
         ╭   0x00007f8a880c6afe: jmp    0x00007f8a880c6b1c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007f8a880c6b03: nop    DWORD PTR [rax+0x0]
         │   0x00007f8a880c6b0a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.99%  │↗  0x00007f8a880c6b10: test   DWORD PTR [rip+0xa4b94f0],eax        # 0x00007f8a92580006
         ││                                                ;   {poll}
  1.99%  ││  0x00007f8a880c6b16: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  1.99%  ││  0x00007f8a880c6b19: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.81%  ↘│  0x00007f8a880c6b1c: mov    r11,rax
  1.88%   │  0x00007f8a880c6b1f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  2.00%   │  0x00007f8a880c6b23: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  1.86%   │  0x00007f8a880c6b26: cmp    r14,rax
          ╰  0x00007f8a880c6b29: jne    0x00007f8a880c6b10  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007f8a880c6b2b: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007f8a880c6b2e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f8a880c6b33: add    rsp,0x18
             0x00007f8a880c6b37: test   DWORD PTR [rip+0xa4b94c9],eax        # 0x00007f8a92580006
                                                           ;   {poll_return}
             0x00007f8a880c6b3d: vzeroupper 
....................................................................................................
 13.51%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.51%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  6.40%         interpreter  lload  22 lload  (32 bytes) 
  3.85%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  3.83%         interpreter  lstore  55 lstore  (21 bytes) 
  3.28%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.29%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.26%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.11%         interpreter  goto  167 goto  (83 bytes) 
  2.05%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.57%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.41%         interpreter  lmul  105 lmul  (12 bytes) 
  1.33%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
  1.27%         interpreter  areturn  176 areturn  (4 bytes) 
  1.26%         interpreter  lcmp  148 lcmp  (24 bytes) 
  1.23%         interpreter  ladd  97 ladd  (16 bytes) 
  1.19%         interpreter  ireturn  172 ireturn  (104 bytes) 
  1.12%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.08%         interpreter  lconst_1  10 lconst_1  (27 bytes) 
  1.06%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.03%              kernel  [unknown] (6 bytes) 
 46.85%  <...other 703 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.51%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
  9.75%         interpreter  method entry point (kind = zerolocals)  
  6.41%         interpreter  lload  22 lload  
  4.98%         interpreter  invokevirtual  182 invokevirtual  
  3.83%         interpreter  lstore  55 lstore  
  3.41%         interpreter  ireturn  172 ireturn  
  2.87%         interpreter  goto  167 goto  
  2.74%         interpreter  invoke return entry points  
  2.47%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.26%         interpreter  areturn  176 areturn  
  2.23%         interpreter  method entry point (kind = accessor)  
  2.16%              kernel  [unknown] 
  2.00%         interpreter  invokeinterface  185 invokeinterface  
  1.81%         interpreter  getstatic  178 getstatic  
  1.77%         interpreter  invokespecial  183 invokespecial  
  1.51%         interpreter  ifeq  153 ifeq  
  1.41%         interpreter  lmul  105 lmul  
  1.39%         interpreter  iconst_0  3 iconst_0  
  1.26%         interpreter  lcmp  148 lcmp  
  1.23%         interpreter  ladd  97 ladd  
 31.01%  <...other 297 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.09%         interpreter
 13.70%               JVMCI
  6.15%           libjvm.so
  2.16%              kernel
  0.28%             Unknown
  0.19%        libc-2.28.so
  0.18%      perf-11647.map
  0.14%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.02%        runtime stub
  0.02%          libjava.so
  0.01%              [vdso]
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 48958 total address lines.
Perf output processed (skipped 6.114 seconds):
 Column 1: cycles (15671 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007fde240c6bf5: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007fde240c6bf8: mov    r10,rax
             0x00007fde240c6bfb: mov    rax,r13
         ╭   0x00007fde240c6bfe: jmp    0x00007fde240c6c1c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007fde240c6c03: nop    DWORD PTR [rax+0x0]
         │   0x00007fde240c6c0a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.65%  │↗  0x00007fde240c6c10: test   DWORD PTR [rip+0xb44a3f0],eax        # 0x00007fde2f511006
         ││                                                ;   {poll}
  2.04%  ││  0x00007fde240c6c16: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  1.93%  ││  0x00007fde240c6c19: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.85%  ↘│  0x00007fde240c6c1c: mov    r11,rax
  1.91%   │  0x00007fde240c6c1f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  1.89%   │  0x00007fde240c6c23: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  1.89%   │  0x00007fde240c6c26: cmp    r14,rax
          ╰  0x00007fde240c6c29: jne    0x00007fde240c6c10  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007fde240c6c2b: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007fde240c6c2e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fde240c6c33: add    rsp,0x18
             0x00007fde240c6c37: test   DWORD PTR [rip+0xb44a3c9],eax        # 0x00007fde2f511006
                                                           ;   {poll_return}
             0x00007fde240c6c3d: vzeroupper 
....................................................................................................
 13.16%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.16%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  6.08%         interpreter  lload  22 lload  (32 bytes) 
  3.99%         interpreter  lstore  55 lstore  (21 bytes) 
  3.71%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  3.20%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.49%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.28%         interpreter  goto  167 goto  (83 bytes) 
  2.22%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.12%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.09%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  1.49%         interpreter  ladd  97 ladd  (16 bytes) 
  1.47%         interpreter  areturn  176 areturn  (4 bytes) 
  1.47%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.27%         interpreter  lmul  105 lmul  (12 bytes) 
  1.18%              kernel  [unknown] (6 bytes) 
  1.16%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.10%         interpreter  lcmp  148 lcmp  (24 bytes) 
  1.08%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.07%         interpreter  lconst_1  10 lconst_1  (27 bytes) 
  1.07%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
 46.26%  <...other 677 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.16%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
  9.28%         interpreter  method entry point (kind = zerolocals)  
  6.08%         interpreter  lload  22 lload  
  4.79%         interpreter  invokevirtual  182 invokevirtual  
  3.99%         interpreter  lstore  55 lstore  
  3.96%         interpreter  ireturn  172 ireturn  
  3.23%         interpreter  goto  167 goto  
  2.78%         interpreter  invoke return entry points  
  2.44%         interpreter  method entry point (kind = accessor)  
  2.39%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.37%         interpreter  areturn  176 areturn  
  2.33%              kernel  [unknown] 
  2.05%         interpreter  invokespecial  183 invokespecial  
  1.98%         interpreter  invokeinterface  185 invokeinterface  
  1.89%         interpreter  getstatic  178 getstatic  
  1.58%         interpreter  ifeq  153 ifeq  
  1.49%         interpreter  ladd  97 ladd  
  1.27%         interpreter  lmul  105 lmul  
  1.20%         interpreter  aload_1  43 aload_1  
  1.15%         interpreter  checkcast  192 checkcast  
 30.57%  <...other 282 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.72%         interpreter
 13.35%               JVMCI
  5.84%           libjvm.so
  2.33%              kernel
  0.20%             Unknown
  0.19%        libc-2.28.so
  0.17%      perf-11687.map
  0.13%  libpthread-2.28.so
  0.03%        runtime stub
  0.02%          libjava.so
  0.01%      hsdis-amd64.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef
# Parameters: (factor = 1, param = 1000000)

# Run progress: 75.00% complete, ETA 00:01:17
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1070.303 ms/op
# Warmup Iteration   2: 1154.682 ms/op
# Warmup Iteration   3: 1139.112 ms/op
# Warmup Iteration   4: 1167.535 ms/op
# Warmup Iteration   5: 1148.091 ms/op
Iteration   1: 1140.844 ms/op
Iteration   2: 1018.711 ms/op
Iteration   3: 12.670 ms/op
Iteration   4: 0.822 ms/op
Iteration   5: 0.807 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 79.17% complete, ETA 00:01:04
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1118.168 ms/op
# Warmup Iteration   2: 1180.151 ms/op
# Warmup Iteration   3: 1183.548 ms/op
# Warmup Iteration   4: 1200.238 ms/op
# Warmup Iteration   5: 1242.292 ms/op
Iteration   1: 1226.719 ms/op
Iteration   2: 592.923 ms/op
Iteration   3: 3.488 ms/op
Iteration   4: 0.904 ms/op
Iteration   5: 0.881 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 83.33% complete, ETA 00:00:51
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1352.815 ms/op
# Warmup Iteration   2: 1361.385 ms/op
# Warmup Iteration   3: 1430.091 ms/op
# Warmup Iteration   4: 1456.900 ms/op
# Warmup Iteration   5: 1353.917 ms/op
Iteration   1: 1342.222 ms/op
Iteration   2: 1032.625 ms/op
Iteration   3: 1.046 ms/op
Iteration   4: 0.871 ms/op
Iteration   5: 0.860 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef":
  425.093 ±(99.9%) 596.131 ms/op [Average]
  (min, avg, max) = (0.807, 425.093, 1342.222), stdev = 557.622
  CI (99.9%): [≈ 0, 1021.224] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·asm":
PrintAssembly processed: 50180 total address lines.
Perf output processed (skipped 6.334 seconds):
 Column 1: cycles (15652 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f9d07a70b21: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f9d07a70b24: mov    r11,rax
             0x00007f9d07a70b27: mov    rax,r14
         ╭   0x00007f9d07a70b2a: jmp    0x00007f9d07a70b3c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f9d07a70b2f: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.34%  │↗  0x00007f9d07a70b30: test   DWORD PTR [rip+0x9f1f4d0],eax        # 0x00007f9d11990006
         ││                                                ;   {poll}
  4.03%  ││  0x00007f9d07a70b36: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.24%  ││  0x00007f9d07a70b39: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.75%  ↘│  0x00007f9d07a70b3c: mov    r8,rax
  0.42%   │  0x00007f9d07a70b3f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.42%   │  0x00007f9d07a70b43: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.82%   │  0x00007f9d07a70b46: cmp    r10,rax
          ╰  0x00007f9d07a70b49: jne    0x00007f9d07a70b30  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f9d07a70b4b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f9d07a70b4e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f9d07a70b53: add    rsp,0x18
             0x00007f9d07a70b57: test   DWORD PTR [rip+0x9f1f4a9],eax        # 0x00007f9d11990006
                                                           ;   {poll_return}
             0x00007f9d07a70b5d: vzeroupper 
....................................................................................................
 11.02%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.02%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 
  4.45%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.58%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.40%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.24%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.09%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.98%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.78%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.48%         interpreter  fast_aload_0  220 fast_aload_0  (69 bytes) 
  1.46%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.42%         interpreter  invokeinterface  185 invokeinterface  (100 bytes) 
  1.37%         interpreter  goto  167 goto  (83 bytes) 
  1.33%         interpreter  lload  22 lload  (46 bytes) 
  1.32%         interpreter  areturn  176 areturn  (8 bytes) 
  1.28%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.22%              kernel  [unknown] (6 bytes) 
  1.17%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.14%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.11%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.07%         interpreter  invoke return entry points  (112 bytes) 
 54.05%  <...other 754 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.83%         interpreter  method entry point (kind = zerolocals)  
 11.02%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
  5.67%         interpreter  invokevirtual  182 invokevirtual  
  4.39%         interpreter  invoke return entry points  
  3.54%         interpreter  ireturn  172 ireturn  
  3.38%         interpreter  invokeinterface  185 invokeinterface  
  3.14%         interpreter  invokespecial  183 invokespecial  
  2.63%         interpreter  areturn  176 areturn  
  2.43%              kernel  [unknown] 
  2.31%         interpreter  invokestatic  184 invokestatic  
  2.25%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.17%         interpreter  method entry point (kind = accessor)  
  1.92%         interpreter  goto  167 goto  
  1.84%         interpreter  getstatic  178 getstatic  
  1.81%         interpreter  checkcast  192 checkcast  
  1.48%         interpreter  fast_aload_0  220 fast_aload_0  
  1.39%         interpreter  lload  22 lload  
  1.33%         interpreter  return  177 return  
  1.28%         interpreter  lreturn  173 lreturn  
  1.27%         interpreter  ifeq  153 ifeq  
 32.94%  <...other 317 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.50%         interpreter
 12.25%               JVMCI
  6.93%           libjvm.so
  2.43%              kernel
  0.23%        libc-2.28.so
  0.19%      perf-11733.map
  0.18%             Unknown
  0.12%  libpthread-2.28.so
  0.08%      hsdis-amd64.so
  0.04%        runtime stub
  0.03%          libjava.so
  0.02%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50128 total address lines.
Perf output processed (skipped 6.618 seconds):
 Column 1: cycles (16478 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (35 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f6deba707e1: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f6deba707e4: mov    r11,rax
             0x00007f6deba707e7: mov    rax,r14
         ╭   0x00007f6deba707ea: jmp    0x00007f6deba707fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f6deba707ef: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.41%  │↗  0x00007f6deba707f0: test   DWORD PTR [rip+0x9d67810],eax        # 0x00007f6df57d8006
         ││                                                ;   {poll}
  4.13%  ││  0x00007f6deba707f6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.16%  ││  0x00007f6deba707f9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.75%  ↘│  0x00007f6deba707fc: mov    r8,rax
  0.39%   │  0x00007f6deba707ff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.36%   │  0x00007f6deba70803: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.97%   │  0x00007f6deba70806: cmp    r10,rax
          ╰  0x00007f6deba70809: jne    0x00007f6deba707f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f6deba7080b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f6deba7080e: mov    rbp,QWORD PTR [rsp+0x10]
  0.01%      0x00007f6deba70813: add    rsp,0x18
             0x00007f6deba70817: test   DWORD PTR [rip+0x9d677e9],eax        # 0x00007f6df57d8006
                                                           ;   {poll_return}
             0x00007f6deba7081d: vzeroupper 
             0x00007f6deba70820: ret                       ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f6deba70821: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f6deba70826: add    rsp,0x18
             0x00007f6deba7082a: test   DWORD PTR [rip+0x9d677d6],eax        # 0x00007f6df57d8006
                                                           ;   {poll_return}
             0x00007f6deba70830: vzeroupper 
....................................................................................................
 11.18%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.18%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (35 bytes) 
  4.38%         interpreter  method entry point (kind = zerolocals)  (146 bytes) 
  3.57%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.45%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.45%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.76%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.64%         interpreter  goto  167 goto  (70 bytes) 
  1.60%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.60%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.52%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.43%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.42%              kernel  [unknown] (6 bytes) 
  1.32%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.29%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.28%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.26%         interpreter  areturn  176 areturn  (8 bytes) 
  1.21%         interpreter  lload  22 lload  (32 bytes) 
  1.15%         interpreter  areturn  176 areturn  (23 bytes) 
  1.15%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.11%         interpreter  ireturn  172 ireturn  (37 bytes) 
 54.23%  <...other 744 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.74%         interpreter  method entry point (kind = zerolocals)  
 11.18%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
  5.46%         interpreter  invokevirtual  182 invokevirtual  
  4.41%         interpreter  invoke return entry points  
  3.34%         interpreter  invokeinterface  185 invokeinterface  
  3.14%         interpreter  ireturn  172 ireturn  
  3.13%         interpreter  invokespecial  183 invokespecial  
  2.65%         interpreter  areturn  176 areturn  
  2.60%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.57%              kernel  [unknown] 
  2.49%         interpreter  invokestatic  184 invokestatic  
  2.17%         interpreter  goto  167 goto  
  2.06%         interpreter  method entry point (kind = accessor)  
  1.94%         interpreter  getstatic  178 getstatic  
  1.77%         interpreter  checkcast  192 checkcast  
  1.74%         interpreter  lreturn  173 lreturn  
  1.55%         interpreter  fast_aload_0  220 fast_aload_0  
  1.35%         interpreter  ifeq  153 ifeq  
  1.30%         interpreter  lload  22 lload  
  1.28%         interpreter  return  177 return  
 32.12%  <...other 317 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.31%         interpreter
 12.14%               JVMCI
  6.86%           libjvm.so
  2.57%              kernel
  0.28%        libc-2.28.so
  0.27%             Unknown
  0.25%      perf-11771.map
  0.18%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.03%        runtime stub
  0.03%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50657 total address lines.
Perf output processed (skipped 7.744 seconds):
 Column 1: cycles (16182 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fc40ba71ce1: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fc40ba71ce4: mov    r11,rax
             0x00007fc40ba71ce7: mov    rax,r14
         ╭   0x00007fc40ba71cea: jmp    0x00007fc40ba71cfc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fc40ba71cef: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.52%  │↗  0x00007fc40ba71cf0: test   DWORD PTR [rip+0x9e63310],eax        # 0x00007fc4158d5006
         ││                                                ;   {poll}
  5.22%  ││  0x00007fc40ba71cf6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.35%  ││  0x00007fc40ba71cf9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.83%  ↘│  0x00007fc40ba71cfc: mov    r8,rax
  0.63%   │  0x00007fc40ba71cff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.43%   │  0x00007fc40ba71d03: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.17%   │  0x00007fc40ba71d06: cmp    r10,rax
          ╰  0x00007fc40ba71d09: jne    0x00007fc40ba71cf0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fc40ba71d0b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fc40ba71d0e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fc40ba71d13: add    rsp,0x18
             0x00007fc40ba71d17: test   DWORD PTR [rip+0x9e632e9],eax        # 0x00007fc4158d5006
                                                           ;   {poll_return}
             0x00007fc40ba71d1d: vzeroupper 
....................................................................................................
 14.15%  <total for region 1>

....[Hottest Regions]...............................................................................
 14.15%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 
  4.25%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.77%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.39%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.45%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.11%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.72%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.64%         interpreter  invokespecial  183 invokespecial  (94 bytes) 
  1.30%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.29%         interpreter  areturn  176 areturn  (4 bytes) 
  1.27%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.26%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.22%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.21%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.19%         interpreter  invokeinterface  185 invokeinterface  (123 bytes) 
  1.15%              kernel  [unknown] (6 bytes) 
  1.11%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.10%         interpreter  lreturn  173 lreturn  (8 bytes) 
  1.03%         interpreter  areturn  176 areturn  (23 bytes) 
  1.03%         interpreter  goto  167 goto  (70 bytes) 
 52.37%  <...other 752 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 14.15%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
 11.75%         interpreter  method entry point (kind = zerolocals)  
  5.98%         interpreter  invokevirtual  182 invokevirtual  
  3.66%         interpreter  invoke return entry points  
  3.50%         interpreter  ireturn  172 ireturn  
  2.94%         interpreter  invokespecial  183 invokespecial  
  2.63%         interpreter  invokeinterface  185 invokeinterface  
  2.62%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.57%         interpreter  areturn  176 areturn  
  2.41%         interpreter  method entry point (kind = accessor)  
  2.32%              kernel  [unknown] 
  2.06%         interpreter  invokestatic  184 invokestatic  
  1.98%         interpreter  getstatic  178 getstatic  
  1.64%         interpreter  checkcast  192 checkcast  
  1.56%         interpreter  new  187 new  
  1.41%         interpreter  goto  167 goto  
  1.33%         interpreter  lreturn  173 lreturn  
  1.30%         interpreter  return  177 return  
  1.22%         interpreter  fast_aload_0  220 fast_aload_0  
  1.07%         interpreter  aload_1  43 aload_1  
 31.91%  <...other 313 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 74.51%         interpreter
 14.54%               JVMCI
  6.88%           libjvm.so
  2.32%              kernel
  0.91%             Unknown
  0.23%      perf-11837.map
  0.23%        libc-2.28.so
  0.22%  libpthread-2.28.so
  0.06%          libjava.so
  0.04%        runtime stub
  0.03%      hsdis-amd64.so
  0.01%              [vdso]
  0.01%           libzip.so
....................................................................................................
100.00%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 87.50% complete, ETA 00:00:38
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 162.574 ms/op
# Warmup Iteration   2: 166.735 ms/op
# Warmup Iteration   3: 167.193 ms/op
# Warmup Iteration   4: 172.210 ms/op
# Warmup Iteration   5: 171.053 ms/op
Iteration   1: 172.511 ms/op
Iteration   2: 172.150 ms/op
Iteration   3: 1.974 ms/op
Iteration   4: 0.853 ms/op
Iteration   5: 0.852 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 91.67% complete, ETA 00:00:25
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 167.622 ms/op
# Warmup Iteration   2: 169.727 ms/op
# Warmup Iteration   3: 171.510 ms/op
# Warmup Iteration   4: 171.361 ms/op
# Warmup Iteration   5: 174.228 ms/op
Iteration   1: 173.628 ms/op
Iteration   2: 172.632 ms/op
Iteration   3: 173.440 ms/op
Iteration   4: 0.910 ms/op
Iteration   5: 0.823 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 95.83% complete, ETA 00:00:12
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 149.966 ms/op
# Warmup Iteration   2: 163.490 ms/op
# Warmup Iteration   3: 160.878 ms/op
# Warmup Iteration   4: 157.180 ms/op
# Warmup Iteration   5: 160.485 ms/op
Iteration   1: 157.319 ms/op
Iteration   2: 150.905 ms/op
Iteration   3: 0.811 ms/op
Iteration   4: 0.832 ms/op
Iteration   5: 0.869 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline":
  78.701 ±(99.9%) 92.163 ms/op [Average]
  (min, avg, max) = (0.811, 78.701, 173.628), stdev = 86.210
  CI (99.9%): [≈ 0, 170.864] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·asm":
PrintAssembly processed: 48968 total address lines.
Perf output processed (skipped 6.310 seconds):
 Column 1: cycles (15213 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007f7e33eab7e9: cmp    r10,r14
             0x00007f7e33eab7ec: je     0x00007f7e33eab831  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f7e33eab7f2: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007f7e33eab7f5: mov    r11,rax
             0x00007f7e33eab7f8: mov    rax,r14
         ╭   0x00007f7e33eab7fb: jmp    0x00007f7e33eab80c  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.60%  │↗  0x00007f7e33eab800: test   DWORD PTR [rip+0x9d82800],eax        # 0x00007f7e3dc2e006
         ││                                                ;   {poll}
  4.56%  ││  0x00007f7e33eab806: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.29%  ││  0x00007f7e33eab809: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  1.00%  ↘│  0x00007f7e33eab80c: mov    r8,rax
  0.47%   │  0x00007f7e33eab80f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  5.10%   │  0x00007f7e33eab813: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  1.13%   │  0x00007f7e33eab816: cmp    r10,rax
          ╰  0x00007f7e33eab819: jne    0x00007f7e33eab800  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f7e33eab81b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007f7e33eab81e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f7e33eab823: add    rsp,0x18
             0x00007f7e33eab827: test   DWORD PTR [rip+0x9d827d9],eax        # 0x00007f7e3dc2e006
                                                           ;   {poll_return}
             0x00007f7e33eab82d: vzeroupper 
....................................................................................................
 13.15%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.15%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  3.96%         interpreter  method entry point (kind = zerolocals)  (134 bytes) 
  3.37%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.27%         interpreter  lstore  55 lstore  (21 bytes) 
  2.99%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.87%         interpreter  lload  22 lload  (32 bytes) 
  2.39%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.31%         interpreter  lreturn  173 lreturn  (4 bytes) 
  2.18%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.04%         interpreter  goto  167 goto  (83 bytes) 
  1.56%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.49%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.34%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.30%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.28%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.24%         interpreter  areturn  176 areturn  (8 bytes) 
  1.16%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.10%         interpreter  ladd  97 ladd  (19 bytes) 
  1.08%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.08%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
 48.83%  <...other 723 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.15%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
 10.63%         interpreter  method entry point (kind = zerolocals)  
  5.19%         interpreter  invokevirtual  182 invokevirtual  
  3.67%         interpreter  ireturn  172 ireturn  
  3.42%         interpreter  invokespecial  183 invokespecial  
  3.27%         interpreter  lstore  55 lstore  
  3.05%         interpreter  invoke return entry points  
  2.92%         interpreter  lload  22 lload  
  2.89%         interpreter  lreturn  173 lreturn  
  2.58%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.57%         interpreter  goto  167 goto  
  2.34%         interpreter  method entry point (kind = accessor)  
  2.23%         interpreter  areturn  176 areturn  
  2.10%         interpreter  checkcast  192 checkcast  
  1.92%         interpreter  invokeinterface  185 invokeinterface  
  1.76%         interpreter  getstatic  178 getstatic  
  1.71%         interpreter  ifeq  153 ifeq  
  1.70%              kernel  [unknown] 
  1.12%         interpreter  fast_aload_0  220 fast_aload_0  
  1.10%         interpreter  ladd  97 ladd  
 30.68%  <...other 303 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.91%         interpreter
 13.43%               JVMCI
  6.01%           libjvm.so
  1.70%              kernel
  0.26%        libc-2.28.so
  0.22%             Unknown
  0.17%      perf-11885.map
  0.15%  libpthread-2.28.so
  0.04%      hsdis-amd64.so
  0.03%          libjava.so
  0.03%           libzip.so
  0.02%        runtime stub
  0.01%              [vdso]
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 48769 total address lines.
Perf output processed (skipped 5.893 seconds):
 Column 1: cycles (15416 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007efd33a59869: cmp    r10,r14
             0x00007efd33a5986c: je     0x00007efd33a598b1  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007efd33a59872: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007efd33a59875: mov    r11,rax
             0x00007efd33a59878: mov    rax,r14
         ╭   0x00007efd33a5987b: jmp    0x00007efd33a5988c  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.57%  │↗  0x00007efd33a59880: test   DWORD PTR [rip+0x9d6a780],eax        # 0x00007efd3d7c4006
         ││                                                ;   {poll}
  3.62%  ││  0x00007efd33a59886: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.29%  ││  0x00007efd33a59889: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.86%  ↘│  0x00007efd33a5988c: mov    r8,rax
  0.40%   │  0x00007efd33a5988f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  3.77%   │  0x00007efd33a59893: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  0.87%   │  0x00007efd33a59896: cmp    r10,rax
          ╰  0x00007efd33a59899: jne    0x00007efd33a59880  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007efd33a5989b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007efd33a5989e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007efd33a598a3: add    rsp,0x18
             0x00007efd33a598a7: test   DWORD PTR [rip+0x9d6a759],eax        # 0x00007efd3d7c4006
                                                           ;   {poll_return}
             0x00007efd33a598ad: vzeroupper 
....................................................................................................
 10.37%  <total for region 1>

....[Hottest Regions]...............................................................................
 10.37%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  4.04%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.87%         interpreter  lstore  55 lstore  (30 bytes) 
  3.15%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.03%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.92%         interpreter  lload  22 lload  (32 bytes) 
  2.92%         interpreter  lreturn  173 lreturn  (4 bytes) 
  2.15%         interpreter  goto  167 goto  (116 bytes) 
  2.06%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.93%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.62%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.55%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.28%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.21%         interpreter  ladd  97 ladd  (16 bytes) 
  1.21%         interpreter  areturn  176 areturn  (8 bytes) 
  1.21%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.18%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
  1.13%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.11%              kernel  [unknown] (15 bytes) 
  1.11%         interpreter  ireturn  172 ireturn  (37 bytes) 
 50.93%  <...other 724 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 10.56%         interpreter  method entry point (kind = zerolocals)  
 10.37%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
  5.01%         interpreter  invokevirtual  182 invokevirtual  
  3.87%         interpreter  lstore  55 lstore  
  3.60%         interpreter  lreturn  173 lreturn  
  3.46%         interpreter  ireturn  172 ireturn  
  3.33%         interpreter  invokespecial  183 invokespecial  
  3.00%         interpreter  lload  22 lload  
  2.87%         interpreter  goto  167 goto  
  2.87%         interpreter  invoke return entry points  
  2.21%         interpreter  checkcast  192 checkcast  
  2.21%         interpreter  areturn  176 areturn  
  2.16%              kernel  [unknown] 
  2.15%         interpreter  method entry point (kind = accessor)  
  2.10%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  1.98%         interpreter  invokeinterface  185 invokeinterface  
  1.81%         interpreter  getstatic  178 getstatic  
  1.69%         interpreter  ifeq  153 ifeq  
  1.28%         interpreter  fast_aload_0  220 fast_aload_0  
  1.23%         interpreter  iconst_0  3 iconst_0  
 32.21%  <...other 304 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 79.87%         interpreter
 10.63%               JVMCI
  6.38%           libjvm.so
  2.16%              kernel
  0.28%        libc-2.28.so
  0.23%             Unknown
  0.16%  libpthread-2.28.so
  0.15%      perf-11923.map
  0.08%                    
  0.02%        runtime stub
  0.01%          libjava.so
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49923 total address lines.
Perf output processed (skipped 6.224 seconds):
 Column 1: cycles (15538 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007f873fc7d929: cmp    r10,r14
             0x00007f873fc7d92c: je     0x00007f873fc7d971  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f873fc7d932: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007f873fc7d935: mov    r11,rax
             0x00007f873fc7d938: mov    rax,r14
         ╭   0x00007f873fc7d93b: jmp    0x00007f873fc7d94c  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.70%  │↗  0x00007f873fc7d940: test   DWORD PTR [rip+0x9ecb6c0],eax        # 0x00007f8749b49006
         ││                                                ;   {poll}
  5.82%  ││  0x00007f873fc7d946: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.35%  ││  0x00007f873fc7d949: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  1.15%  ↘│  0x00007f873fc7d94c: mov    r8,rax
  0.53%   │  0x00007f873fc7d94f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  5.85%   │  0x00007f873fc7d953: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  1.42%   │  0x00007f873fc7d956: cmp    r10,rax
          ╰  0x00007f873fc7d959: jne    0x00007f873fc7d940  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f873fc7d95b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007f873fc7d95e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f873fc7d963: add    rsp,0x18
             0x00007f873fc7d967: test   DWORD PTR [rip+0x9ecb699],eax        # 0x00007f8749b49006
                                                           ;   {poll_return}
             0x00007f873fc7d96d: vzeroupper 
....................................................................................................
 15.82%  <total for region 1>

....[Hottest Regions]...............................................................................
 15.82%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  4.13%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.26%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.13%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.93%         interpreter  lstore  55 lstore  (30 bytes) 
  2.47%         interpreter  lload  22 lload  (32 bytes) 
  2.18%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.05%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.78%         interpreter  goto  167 goto  (70 bytes) 
  1.63%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.48%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.46%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.43%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.35%         interpreter  areturn  176 areturn  (8 bytes) 
  1.20%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.19%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.15%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.09%         interpreter  ladd  97 ladd  (20 bytes) 
  1.04%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  0.97%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
 48.26%  <...other 678 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 15.82%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
 10.84%         interpreter  method entry point (kind = zerolocals)  
  4.88%         interpreter  invokevirtual  182 invokevirtual  
  3.71%         interpreter  ireturn  172 ireturn  
  3.14%         interpreter  invokespecial  183 invokespecial  
  2.93%         interpreter  lstore  55 lstore  
  2.85%         interpreter  invoke return entry points  
  2.54%         interpreter  lload  22 lload  
  2.50%         interpreter  goto  167 goto  
  2.29%         interpreter  areturn  176 areturn  
  2.29%         interpreter  method entry point (kind = accessor)  
  2.22%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.21%         interpreter  checkcast  192 checkcast  
  1.98%         interpreter  invokeinterface  185 invokeinterface  
  1.93%         interpreter  lreturn  173 lreturn  
  1.86%         interpreter  getstatic  178 getstatic  
  1.86%              kernel  [unknown] 
  1.47%         interpreter  ifeq  153 ifeq  
  1.12%         interpreter  fast_aload_0  220 fast_aload_0  
  1.09%         interpreter  aload_1  43 aload_1  
 30.46%  <...other 292 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 75.14%         interpreter
 16.04%               JVMCI
  5.96%           libjvm.so
  1.86%              kernel
  0.23%  libpthread-2.28.so
  0.21%             Unknown
  0.21%        libc-2.28.so
  0.21%      perf-11962.map
  0.05%      hsdis-amd64.so
  0.04%        runtime stub
  0.04%              [vdso]
  0.03%          libjava.so
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:05:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (factor)  (param)  Mode  Cnt    Score     Error  Units
HighOrderFunctionKtBenchmark.sumOfSquares_lambda                                1  1000000  avgt   15  218.726 ± 435.896  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·asm                           1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline                         1  1000000  avgt   15   54.945 ±  73.245  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·asm                    1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda                       1  1000000  avgt   15  256.401 ± 439.806  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·asm                  1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline                1  1000000  avgt   15   47.532 ±  72.910  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·asm           1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef                             1  1000000  avgt   15  425.093 ± 596.131  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·asm                        1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline                      1  1000000  avgt   15   78.701 ±  92.163  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·asm                 1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction                     1  1000000  avgt   15   93.036 ± 294.394  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·asm                1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline              1  1000000  avgt   15   40.896 ± 165.817  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·asm         1  1000000  avgt           NaN              ---
