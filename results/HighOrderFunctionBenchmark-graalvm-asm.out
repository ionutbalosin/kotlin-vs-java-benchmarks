# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction
# Parameters: (factor = 1, param = 1000000)

# Run progress: 0.00% complete, ETA 00:04:00
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1656.080 ms/op
# Warmup Iteration   2: 1064.335 ms/op
# Warmup Iteration   3: 1035.380 ms/op
# Warmup Iteration   4: 1005.806 ms/op
# Warmup Iteration   5: 1005.246 ms/op
Iteration   1: 1087.740 ms/op
Iteration   2: 617.330 ms/op
Iteration   3: 3.207 ms/op
Iteration   4: 0.754 ms/op
Iteration   5: 0.839 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 4.17% complete, ETA 00:05:21
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 936.692 ms/op
# Warmup Iteration   2: 1027.987 ms/op
# Warmup Iteration   3: 1067.662 ms/op
# Warmup Iteration   4: 1032.194 ms/op
# Warmup Iteration   5: 1009.478 ms/op
Iteration   1: 1005.382 ms/op
Iteration   2: 540.091 ms/op
Iteration   3: 3.206 ms/op
Iteration   4: 0.840 ms/op
Iteration   5: 0.863 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 8.33% complete, ETA 00:04:52
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 996.940 ms/op
# Warmup Iteration   2: 1054.564 ms/op
# Warmup Iteration   3: 982.937 ms/op
# Warmup Iteration   4: 1020.328 ms/op
# Warmup Iteration   5: 1049.217 ms/op
Iteration   1: 576.761 ms/op
Iteration   2: 3.679 ms/op
Iteration   3: 0.875 ms/op
Iteration   4: 0.963 ms/op
Iteration   5: 0.859 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction":
  256.226 ±(99.9%) 425.201 ms/op [Average]
  (min, avg, max) = (0.754, 256.226, 1087.740), stdev = 397.733
  CI (99.9%): [≈ 0, 681.427] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·asm":
PrintAssembly processed: 50081 total address lines.
Perf output processed (skipped 7.714 seconds):
 Column 1: cycles (16001 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007feff3a702d6: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007feff3a702d9: mov    r11,rax
             0x00007feff3a702dc: mov    rax,r14
         ╭   0x00007feff3a702df: jmp    0x00007feff3a702fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007feff3a702e4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007feff3a702ea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.46%  │↗  0x00007feff3a702f0: test   DWORD PTR [rip+0x9de1d10],eax        # 0x00007feffd852006
         ││                                                ;   {poll}
  4.49%  ││  0x00007feff3a702f6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.32%  ││  0x00007feff3a702f9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.79%  ↘│  0x00007feff3a702fc: mov    r8,rax
  0.49%   │  0x00007feff3a702ff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.95%   │  0x00007feff3a70303: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.76%   │  0x00007feff3a70306: cmp    r10,rax
          ╰  0x00007feff3a70309: jne    0x00007feff3a702f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007feff3a7030b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007feff3a7030e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007feff3a70313: add    rsp,0x18
             0x00007feff3a70317: test   DWORD PTR [rip+0x9de1ce9],eax        # 0x00007feffd852006
                                                           ;   {poll_return}
             0x00007feff3a7031d: vzeroupper 
....................................................................................................
 11.26%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.26%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  4.25%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.74%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.32%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.59%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.18%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (65 bytes) 
  2.02%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.77%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.52%         interpreter  invokeinterface  185 invokeinterface  (113 bytes) 
  1.46%         interpreter  goto  167 goto  (70 bytes) 
  1.29%         interpreter  areturn  176 areturn  (8 bytes) 
  1.27%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.20%         interpreter  lload  22 lload  (27 bytes) 
  1.16%         interpreter  invoke return entry points  (112 bytes) 
  1.14%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.09%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.09%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.04%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.04%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  0.99%         interpreter  areturn  176 areturn  (23 bytes) 
 54.57%  <...other 714 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.65%         interpreter  method entry point (kind = zerolocals)  
 11.26%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  6.65%               JVMCI  jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl::createMethod, version 103 
  6.01%         interpreter  invokevirtual  182 invokevirtual  
  4.55%         interpreter  invoke return entry points  
  3.31%         interpreter  ireturn  172 ireturn  
  3.10%         interpreter  invokeinterface  185 invokeinterface  
  2.54%         interpreter  invokespecial  183 invokespecial  
  2.53%         interpreter  areturn  176 areturn  
  2.45%         interpreter  method entry point (kind = accessor)  
  2.32%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.31%         interpreter  invokestatic  184 invokestatic  
  2.20%              kernel  [unknown] 
  2.20%         interpreter  goto  167 goto  
  1.91%         interpreter  checkcast  192 checkcast  
  1.84%         interpreter  getstatic  178 getstatic  
  1.45%         interpreter  fast_aload_0  220 fast_aload_0  
  1.32%         interpreter  return  177 return  
  1.31%         interpreter  lreturn  173 lreturn  
  1.30%         interpreter  lload  22 lload  
 27.79%  <...other 187 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.51%         interpreter
 18.96%               JVMCI
  2.20%              kernel
  0.42%           libjvm.so
  0.27%        libc-2.28.so
  0.19%             Unknown
  0.18%  libpthread-2.28.so
  0.17%       perf-5315.map
  0.05%      hsdis-amd64.so
  0.03%        runtime stub
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50079 total address lines.
Perf output processed (skipped 6.927 seconds):
 Column 1: cycles (15302 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007f2e280c9316: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f2e280c9319: mov    r11,rax
             0x00007f2e280c931c: mov    rax,r14
         ╭   0x00007f2e280c931f: jmp    0x00007f2e280c933c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f2e280c9324: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f2e280c932a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.53%  │↗  0x00007f2e280c9330: test   DWORD PTR [rip+0xbab1cd0],eax        # 0x00007f2e33b7b006
         ││                                                ;   {poll}
  4.57%  ││  0x00007f2e280c9336: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.37%  ││  0x00007f2e280c9339: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.84%  ↘│  0x00007f2e280c933c: mov    r8,rax
  0.56%   │  0x00007f2e280c933f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.35%   │  0x00007f2e280c9343: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.99%   │  0x00007f2e280c9346: cmp    r10,rax
          ╰  0x00007f2e280c9349: jne    0x00007f2e280c9330  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f2e280c934b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f2e280c934e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f2e280c9353: add    rsp,0x18
             0x00007f2e280c9357: test   DWORD PTR [rip+0xbab1ca9],eax        # 0x00007f2e33b7b006
                                                           ;   {poll_return}
             0x00007f2e280c935d: vzeroupper 
....................................................................................................
 12.20%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.20%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  4.00%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.52%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.48%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.20%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.81%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.76%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.54%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.52%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.46%         interpreter  lload  22 lload  (32 bytes) 
  1.31%         interpreter  goto  167 goto  (83 bytes) 
  1.17%         interpreter  fast_aload_0  220 fast_aload_0  (22 bytes) 
  1.15%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.12%         interpreter  areturn  176 areturn  (23 bytes) 
  1.12%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.11%         interpreter  getstatic  178 getstatic  (94 bytes) 
  1.09%         interpreter  invoke return entry points  (112 bytes) 
  1.08%              kernel  [unknown] (6 bytes) 
  1.08%         interpreter  areturn  176 areturn  (8 bytes) 
  1.08%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
 55.16%  <...other 702 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.20%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
 11.31%         interpreter  method entry point (kind = zerolocals)  
  6.04%         interpreter  invokevirtual  182 invokevirtual  
  4.31%         interpreter  invoke return entry points  
  3.25%         interpreter  ireturn  172 ireturn  
  3.10%         interpreter  invokeinterface  185 invokeinterface  
  2.64%         interpreter  invokespecial  183 invokespecial  
  2.47%         interpreter  areturn  176 areturn  
  2.37%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.35%         interpreter  method entry point (kind = accessor)  
  2.26%              kernel  [unknown] 
  2.11%         interpreter  invokestatic  184 invokestatic  
  1.99%         interpreter  checkcast  192 checkcast  
  1.91%         interpreter  getstatic  178 getstatic  
  1.78%         interpreter  goto  167 goto  
  1.55%         interpreter  lload  22 lload  
  1.41%         interpreter  fast_aload_0  220 fast_aload_0  
  1.35%         interpreter  ifeq  153 ifeq  
  1.35%         interpreter  new  187 new  
  1.30%         interpreter  return  177 return  
 32.95%  <...other 284 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 76.47%         interpreter
 13.12%               JVMCI
  7.12%           libjvm.so
  2.26%              kernel
  0.33%             Unknown
  0.25%        libc-2.28.so
  0.18%       perf-5399.map
  0.14%  libpthread-2.28.so
  0.05%          libjava.so
  0.04%      hsdis-amd64.so
  0.03%        runtime stub
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50636 total address lines.
Perf output processed (skipped 7.947 seconds):
 Column 1: cycles (15659 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007f0eec0c92d6: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f0eec0c92d9: mov    r11,rax
             0x00007f0eec0c92dc: mov    rax,r14
         ╭   0x00007f0eec0c92df: jmp    0x00007f0eec0c92fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f0eec0c92e4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f0eec0c92ea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.68%  │↗  0x00007f0eec0c92f0: test   DWORD PTR [rip+0xcc7cd10],eax        # 0x00007f0ef8d46006
         ││                                                ;   {poll}
  6.85%  ││  0x00007f0eec0c92f6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.40%  ││  0x00007f0eec0c92f9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.07%  ↘│  0x00007f0eec0c92fc: mov    r8,rax
  0.54%   │  0x00007f0eec0c92ff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  6.21%   │  0x00007f0eec0c9303: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.40%   │  0x00007f0eec0c9306: cmp    r10,rax
          ╰  0x00007f0eec0c9309: jne    0x00007f0eec0c92f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f0eec0c930b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f0eec0c930e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f0eec0c9313: add    rsp,0x18
             0x00007f0eec0c9317: test   DWORD PTR [rip+0xcc7cce9],eax        # 0x00007f0ef8d46006
                                                           ;   {poll_return}
             0x00007f0eec0c931d: vzeroupper 
....................................................................................................
 17.15%  <total for region 1>

....[Hottest Regions]...............................................................................
 17.15%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.82%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.45%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.90%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.47%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.22%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.91%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.79%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.40%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.37%         interpreter  goto  167 goto  (70 bytes) 
  1.32%         interpreter  lload  22 lload  (32 bytes) 
  1.25%              kernel  [unknown] (6 bytes) 
  1.20%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.19%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.14%         interpreter  invoke return entry points  (112 bytes) 
  1.14%         interpreter  areturn  176 areturn  (8 bytes) 
  1.12%         interpreter  fast_aload_0  220 fast_aload_0  (31 bytes) 
  1.03%         interpreter  ireturn  172 ireturn  (40 bytes) 
  0.97%         interpreter  checkcast  192 checkcast  (40 bytes) 
  0.87%         interpreter  aload_3  45 aload_3  (36 bytes) 
 50.30%  <...other 777 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 17.15%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
 10.49%         interpreter  method entry point (kind = zerolocals)  
  5.89%         interpreter  invokevirtual  182 invokevirtual  
  4.27%         interpreter  invoke return entry points  
  3.27%         interpreter  ireturn  172 ireturn  
  2.91%         interpreter  invokeinterface  185 invokeinterface  
  2.55%              kernel  [unknown] 
  2.41%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.22%         interpreter  invokestatic  184 invokestatic  
  2.14%         interpreter  method entry point (kind = accessor)  
  2.11%         interpreter  areturn  176 areturn  
  2.04%         interpreter  getstatic  178 getstatic  
  2.01%         interpreter  invokespecial  183 invokespecial  
  1.88%         interpreter  checkcast  192 checkcast  
  1.76%         interpreter  goto  167 goto  
  1.46%         interpreter  ifeq  153 ifeq  
  1.39%         interpreter  fast_aload_0  220 fast_aload_0  
  1.39%         interpreter  lload  22 lload  
  1.11%         interpreter  aload_1  43 aload_1  
  0.96%         interpreter  return  177 return  
 30.59%  <...other 313 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 71.63%         interpreter
 17.89%               JVMCI
  6.90%           libjvm.so
  2.55%              kernel
  0.32%             Unknown
  0.22%       perf-5458.map
  0.19%        libc-2.28.so
  0.18%  libpthread-2.28.so
  0.06%      hsdis-amd64.so
  0.02%        runtime stub
  0.01%          libjava.so
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
100.00%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 12.50% complete, ETA 00:04:41
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1003.574 ms/op
# Warmup Iteration   2: 980.341 ms/op
# Warmup Iteration   3: 1004.953 ms/op
# Warmup Iteration   4: 1087.916 ms/op
# Warmup Iteration   5: 990.594 ms/op
Iteration   1: 9.180 ms/op
Iteration   2: 0.820 ms/op
Iteration   3: 0.832 ms/op
Iteration   4: 0.872 ms/op
Iteration   5: 0.819 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 16.67% complete, ETA 00:04:33
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 937.560 ms/op
# Warmup Iteration   2: 902.943 ms/op
# Warmup Iteration   3: 940.634 ms/op
# Warmup Iteration   4: 935.982 ms/op
# Warmup Iteration   5: 2.560 ms/op
Iteration   1: 0.758 ms/op
Iteration   2: 0.763 ms/op
Iteration   3: 0.779 ms/op
Iteration   4: 0.768 ms/op
Iteration   5: 0.770 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 20.83% complete, ETA 00:04:24
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 961.350 ms/op
# Warmup Iteration   2: 995.527 ms/op
# Warmup Iteration   3: 1028.209 ms/op
# Warmup Iteration   4: 1010.680 ms/op
# Warmup Iteration   5: 653.991 ms/op
Iteration   1: 10.878 ms/op
Iteration   2: 0.806 ms/op
Iteration   3: 0.845 ms/op
Iteration   4: 0.772 ms/op
Iteration   5: 1.041 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline":
  2.047 ±(99.9%) 3.482 ms/op [Average]
  (min, avg, max) = (0.758, 2.047, 10.878), stdev = 3.257
  CI (99.9%): [≈ 0, 5.529] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·asm":
PrintAssembly processed: 56564 total address lines.
Perf output processed (skipped 8.898 seconds):
 Column 1: cycles (15019 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 

             0x00007f13480c96d6: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007f13480c96d9: mov    r11,rax
             0x00007f13480c96dc: mov    rax,r14
         ╭   0x00007f13480c96df: jmp    0x00007f13480c96fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007f13480c96e4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f13480c96ea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.05%  │↗  0x00007f13480c96f0: test   DWORD PTR [rip+0xa18f910],eax        # 0x00007f1352259006
         ││                                                ;   {poll}
  8.38%  ││  0x00007f13480c96f6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.47%  ││  0x00007f13480c96f9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.60%  ↘│  0x00007f13480c96fc: mov    r8,rax
  0.93%   │  0x00007f13480c96ff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  8.28%   │  0x00007f13480c9703: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  1.78%   │  0x00007f13480c9706: cmp    r10,rax
          ╰  0x00007f13480c9709: jne    0x00007f13480c96f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007f13480c970b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007f13480c970e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f13480c9713: add    rsp,0x18
             0x00007f13480c9717: test   DWORD PTR [rip+0xa18f8e9],eax        # 0x00007f1352259006
                                                           ;   {poll_return}
             0x00007f13480c971d: vzeroupper 
....................................................................................................
 22.47%  <total for region 1>

....[Hottest Regions]...............................................................................
 22.47%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 
  3.32%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.24%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  2.26%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.11%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.84%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.79%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.52%         interpreter  lload  22 lload  (32 bytes) 
  1.48%         interpreter  goto  167 goto  (70 bytes) 
  1.40%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.30%         interpreter  areturn  176 areturn  (8 bytes) 
  1.30%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.27%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.25%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.25%         interpreter  aload  25 aload  (26 bytes) 
  1.19%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.15%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.01%         interpreter  invokevirtual  182 invokevirtual  (97 bytes) 
  0.85%         interpreter  fast_aload_0  220 fast_aload_0  (22 bytes) 
  0.83%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
 47.17%  <...other 731 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 22.47%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 
  9.14%         interpreter  method entry point (kind = zerolocals)  
  5.90%         interpreter  invokevirtual  182 invokevirtual  
  3.28%         interpreter  ireturn  172 ireturn  
  3.18%         interpreter  invoke return entry points  
  3.05%         interpreter  invokeinterface  185 invokeinterface  
  2.30%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.29%         interpreter  areturn  176 areturn  
  2.22%              kernel  [unknown] 
  2.20%         interpreter  invokestatic  184 invokestatic  
  2.11%         interpreter  method entry point (kind = accessor)  
  2.08%         interpreter  getstatic  178 getstatic  
  2.01%         interpreter  goto  167 goto  
  1.62%         interpreter  invokespecial  183 invokespecial  
  1.59%         interpreter  lload  22 lload  
  1.50%         interpreter  checkcast  192 checkcast  
  1.46%         interpreter  aload  25 aload  
  1.39%         interpreter  ifeq  153 ifeq  
  1.07%         interpreter  fast_aload_0  220 fast_aload_0  
  1.05%         interpreter  return  177 return  
 28.06%  <...other 294 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 66.85%         interpreter
 23.15%               JVMCI
  6.82%           libjvm.so
  2.22%              kernel
  0.26%        libc-2.28.so
  0.24%             Unknown
  0.23%       perf-5524.map
  0.13%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.03%        runtime stub
  0.02%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 57845 total address lines.
Perf output processed (skipped 9.464 seconds):
 Column 1: cycles (14891 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 

             0x00007f373c0ca296: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007f373c0ca299: mov    r11,rax
             0x00007f373c0ca29c: mov    rax,r14
         ╭   0x00007f373c0ca29f: jmp    0x00007f373c0ca2bc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007f373c0ca2a4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f373c0ca2aa: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.28%  │↗  0x00007f373c0ca2b0: test   DWORD PTR [rip+0xcd32d50],eax        # 0x00007f3748dfd006
         ││                                                ;   {poll}
  9.62%  ││  0x00007f373c0ca2b6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.73%  ││  0x00007f373c0ca2b9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.92%  ↘│  0x00007f373c0ca2bc: mov    r8,rax
  1.42%   │  0x00007f373c0ca2bf: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
 10.27%   │  0x00007f373c0ca2c3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  2.16%   │  0x00007f373c0ca2c6: cmp    r10,rax
          ╰  0x00007f373c0ca2c9: jne    0x00007f373c0ca2b0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007f373c0ca2cb: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007f373c0ca2ce: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f373c0ca2d3: add    rsp,0x18
             0x00007f373c0ca2d7: test   DWORD PTR [rip+0xcd32d29],eax        # 0x00007f3748dfd006
                                                           ;   {poll_return}
             0x00007f373c0ca2dd: vzeroupper 
....................................................................................................
 27.41%  <total for region 1>

....[Hottest Regions]...............................................................................
 27.41%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 
  3.67%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  2.87%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.15%         interpreter  ireturn  172 ireturn  (0 bytes) 
  2.14%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.05%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.59%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.34%         interpreter  areturn  176 areturn  (8 bytes) 
  1.20%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.18%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.14%         interpreter  goto  167 goto  (75 bytes) 
  1.12%              kernel  [unknown] (15 bytes) 
  1.10%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.03%         interpreter  getstatic  178 getstatic  (93 bytes) 
  0.95%         interpreter  invokeinterface  185 invokeinterface  (132 bytes) 
  0.93%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  0.85%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.81%         interpreter  aload  25 aload  (31 bytes) 
  0.79%         interpreter  method entry point (kind = accessor)  (115 bytes) 
  0.76%         interpreter  method entry point (kind = accessor)  (14 bytes) 
 44.93%  <...other 753 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 27.41%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 
  8.97%         interpreter  method entry point (kind = zerolocals)  
  5.03%         interpreter  invokevirtual  182 invokevirtual  
  3.64%         interpreter  ireturn  172 ireturn  
  3.16%              kernel  [unknown] 
  3.10%         interpreter  invoke return entry points  
  2.29%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.12%         interpreter  method entry point (kind = accessor)  
  2.10%         interpreter  areturn  176 areturn  
  2.03%         interpreter  invokeinterface  185 invokeinterface  
  1.85%         interpreter  getstatic  178 getstatic  
  1.80%         interpreter  invokestatic  184 invokestatic  
  1.60%         interpreter  invokespecial  183 invokespecial  
  1.55%         interpreter  goto  167 goto  
  1.24%         interpreter  checkcast  192 checkcast  
  1.14%         interpreter  aload_1  43 aload_1  
  1.06%         interpreter  ifeq  153 ifeq  
  0.99%         interpreter  fast_aload_0  220 fast_aload_0  
  0.98%         interpreter  aload  25 aload  
  0.95%         interpreter  return  177 return  
 26.98%  <...other 292 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 60.80%         interpreter
 27.89%               JVMCI
  7.13%           libjvm.so
  3.16%              kernel
  0.26%        libc-2.28.so
  0.26%       perf-5567.map
  0.24%  libpthread-2.28.so
  0.19%             Unknown
  0.03%      hsdis-amd64.so
  0.02%          libjava.so
  0.01%        runtime stub
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 56444 total address lines.
Perf output processed (skipped 9.112 seconds):
 Column 1: cycles (15059 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 

             0x00007f19380c9616: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007f19380c9619: mov    r11,rax
             0x00007f19380c961c: mov    rax,r14
         ╭   0x00007f19380c961f: jmp    0x00007f19380c963c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007f19380c9624: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f19380c962a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  0.89%  │↗  0x00007f19380c9630: test   DWORD PTR [rip+0xd3b59d0],eax        # 0x00007f194547f006
         ││                                                ;   {poll}
  8.57%  ││  0x00007f19380c9636: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.55%  ││  0x00007f19380c9639: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.43%  ↘│  0x00007f19380c963c: mov    r8,rax
  0.74%   │  0x00007f19380c963f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  8.19%   │  0x00007f19380c9643: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  1.70%   │  0x00007f19380c9646: cmp    r10,rax
          ╰  0x00007f19380c9649: jne    0x00007f19380c9630  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007f19380c964b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007f19380c964e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f19380c9653: add    rsp,0x18
             0x00007f19380c9657: test   DWORD PTR [rip+0xd3b59a9],eax        # 0x00007f194547f006
                                                           ;   {poll_return}
             0x00007f19380c965d: vzeroupper 
....................................................................................................
 22.07%  <total for region 1>

....[Hottest Regions]...............................................................................
 22.07%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 
  3.40%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.13%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.39%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.20%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.14%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  2.10%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.63%         interpreter  invokevirtual  182 invokevirtual  (114 bytes) 
  1.48%         interpreter  lload  22 lload  (36 bytes) 
  1.47%         interpreter  aload  25 aload  (69 bytes) 
  1.44%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.31%         interpreter  goto  167 goto  (79 bytes) 
  1.22%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.20%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.20%         interpreter  areturn  176 areturn  (8 bytes) 
  1.12%              kernel  [unknown] (6 bytes) 
  1.05%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.99%         interpreter  invokevirtual  182 invokevirtual  (166 bytes) 
  0.98%         interpreter  ireturn  172 ireturn  (37 bytes) 
  0.86%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
 46.60%  <...other 730 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 22.07%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 
  9.07%         interpreter  method entry point (kind = zerolocals)  
  5.80%         interpreter  invokevirtual  182 invokevirtual  
  3.58%         interpreter  invoke return entry points  
  3.49%         interpreter  ireturn  172 ireturn  
  3.24%              kernel  [unknown] 
  2.72%         interpreter  invokeinterface  185 invokeinterface  
  2.32%         interpreter  invokestatic  184 invokestatic  
  2.26%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.11%         interpreter  getstatic  178 getstatic  
  2.11%         interpreter  method entry point (kind = accessor)  
  1.96%         interpreter  areturn  176 areturn  
  1.90%         interpreter  goto  167 goto  
  1.76%         interpreter  invokespecial  183 invokespecial  
  1.54%         interpreter  lload  22 lload  
  1.47%         interpreter  aload  25 aload  
  1.46%         interpreter  checkcast  192 checkcast  
  1.37%         interpreter  ifeq  153 ifeq  
  1.18%         interpreter  fast_aload_0  220 fast_aload_0  
  1.10%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
 27.48%  <...other 294 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 66.44%         interpreter
 22.71%               JVMCI
  6.47%           libjvm.so
  3.24%              kernel
  0.33%        libc-2.28.so
  0.24%       perf-5613.map
  0.23%             Unknown
  0.21%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.04%          libjava.so
  0.03%        runtime stub
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 25.00% complete, ETA 00:04:12
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1137.243 ms/op
# Warmup Iteration   2: 1096.021 ms/op
# Warmup Iteration   3: 1078.654 ms/op
# Warmup Iteration   4: 1126.262 ms/op
# Warmup Iteration   5: 1125.155 ms/op
Iteration   1: 1004.842 ms/op
Iteration   2: 1005.031 ms/op
Iteration   3: 414.365 ms/op
Iteration   4: 0.860 ms/op
Iteration   5: 0.937 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 29.17% complete, ETA 00:03:54
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1011.740 ms/op
# Warmup Iteration   2: 1055.071 ms/op
# Warmup Iteration   3: 1158.398 ms/op
# Warmup Iteration   4: 1092.353 ms/op
# Warmup Iteration   5: 1039.770 ms/op
Iteration   1: 1045.394 ms/op
Iteration   2: 1035.714 ms/op
Iteration   3: 255.072 ms/op
Iteration   4: 1.359 ms/op
Iteration   5: 0.857 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 33.33% complete, ETA 00:03:36
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 969.645 ms/op
# Warmup Iteration   2: 1032.026 ms/op
# Warmup Iteration   3: 1112.855 ms/op
# Warmup Iteration   4: 1081.166 ms/op
# Warmup Iteration   5: 1008.598 ms/op
Iteration   1: 1001.469 ms/op
Iteration   2: 1.112 ms/op
Iteration   3: 0.862 ms/op
Iteration   4: 0.860 ms/op
Iteration   5: 0.863 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda":
  384.640 ±(99.9%) 511.575 ms/op [Average]
  (min, avg, max) = (0.857, 384.640, 1045.394), stdev = 478.527
  CI (99.9%): [≈ 0, 896.215] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·asm":
PrintAssembly processed: 50057 total address lines.
Perf output processed (skipped 6.434 seconds):
 Column 1: cycles (15864 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fe4e00ca71c: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fe4e00ca71f: mov    r8,r11
             0x00007fe4e00ca722: mov    r11,r14
         ╭   0x00007fe4e00ca725: jmp    0x00007fe4e00ca73c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fe4e00ca72a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.01%  │↗  0x00007fe4e00ca730: test   DWORD PTR [rip+0xbbfe8d0],eax        # 0x00007fe4ebcc9006
         ││                                                ;   {poll}
  0.71%  ││  0x00007fe4e00ca736: inc    r11                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  1.81%  ││  0x00007fe4e00ca739: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  2.26%  ↘│  0x00007fe4e00ca73c: mov    r9,r11
  0.01%   │  0x00007fe4e00ca73f: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@2 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.74%   │  0x00007fe4e00ca743: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  2.14%   │  0x00007fe4e00ca747: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  2.41%   │  0x00007fe4e00ca74a: cmp    r10,r11
          ╰  0x00007fe4e00ca74d: jne    0x00007fe4e00ca730  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fe4e00ca74f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fe4e00ca752: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fe4e00ca757: add    rsp,0x18
             0x00007fe4e00ca75b: test   DWORD PTR [rip+0xbbfe8a5],eax        # 0x00007fe4ebcc9006
                                                           ;   {poll_return}
             0x00007fe4e00ca761: vzeroupper 
....................................................................................................
 10.08%  <total for region 1>

....[Hottest Regions]...............................................................................
 10.08%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 
  4.08%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  3.49%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.44%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.40%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.50%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  1.90%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.36%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.35%         interpreter  areturn  176 areturn  (4 bytes) 
  1.35%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.25%         interpreter  goto  167 goto  (70 bytes) 
  1.20%         interpreter  areturn  176 areturn  (23 bytes) 
  1.17%         interpreter  method entry point (kind = accessor)  (115 bytes) 
  1.17%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.12%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.11%         interpreter  invoke return entry points  (104 bytes) 
  1.11%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.10%         interpreter  lload  22 lload  (46 bytes) 
  1.07%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.07%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
 55.69%  <...other 787 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.38%         interpreter  method entry point (kind = zerolocals)  
 10.08%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
  6.05%         interpreter  invokevirtual  182 invokevirtual  
  4.79%         interpreter  ireturn  172 ireturn  
  4.02%         interpreter  invoke return entry points  
  3.20%         interpreter  invokeinterface  185 invokeinterface  
  2.92%         interpreter  method entry point (kind = accessor)  
  2.87%         interpreter  areturn  176 areturn  
  2.76%         interpreter  invokespecial  183 invokespecial  
  2.72%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.40%              kernel  [unknown] 
  1.92%         interpreter  invokestatic  184 invokestatic  
  1.90%         interpreter  checkcast  192 checkcast  
  1.89%         interpreter  getstatic  178 getstatic  
  1.77%         interpreter  goto  167 goto  
  1.51%         interpreter  return  177 return  
  1.37%         interpreter  new  187 new  
  1.37%         interpreter  fast_aload_0  220 fast_aload_0  
  1.20%         interpreter  lload  22 lload  
  1.09%         interpreter  ifeq  153 ifeq  
 32.80%  <...other 330 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 78.78%         interpreter
 10.68%               JVMCI
  6.52%           libjvm.so
  2.40%              kernel
  0.73%             Unknown
  0.31%       perf-5684.map
  0.30%        libc-2.28.so
  0.18%  libpthread-2.28.so
  0.04%      hsdis-amd64.so
  0.03%        runtime stub
  0.02%          libjava.so
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49223 total address lines.
Perf output processed (skipped 6.409 seconds):
 Column 1: cycles (15336 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  8.87%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 
  4.53%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.49%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.31%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.10%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.58%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  2.32%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  1.83%         interpreter  areturn  176 areturn  (8 bytes) 
  1.62%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.56%         interpreter  new  187 new  (192 bytes) 
  1.43%         interpreter  invokeinterface  185 invokeinterface  (132 bytes) 
  1.38%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.35%         interpreter  goto  167 goto  (66 bytes) 
  1.32%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.28%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.24%         interpreter  invoke return entry points  (112 bytes) 
  1.20%         interpreter  lload  22 lload  (32 bytes) 
  1.19%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.17%         interpreter  areturn  176 areturn  (23 bytes) 
  1.08%         interpreter  invoke return entry points  (90 bytes) 
 54.13%  <...other 745 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.71%         interpreter  method entry point (kind = zerolocals)  
  8.87%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
  5.52%         interpreter  invokevirtual  182 invokevirtual  
  4.58%         interpreter  ireturn  172 ireturn  
  4.28%         interpreter  invoke return entry points  
  3.26%         interpreter  areturn  176 areturn  
  3.18%         interpreter  invokespecial  183 invokespecial  
  2.95%         interpreter  invokeinterface  185 invokeinterface  
  2.73%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.65%         interpreter  method entry point (kind = accessor)  
  2.16%         interpreter  invokestatic  184 invokestatic  
  1.86%         interpreter  goto  167 goto  
  1.83%              kernel  [unknown] 
  1.79%         interpreter  getstatic  178 getstatic  
  1.74%         interpreter  checkcast  192 checkcast  
  1.59%         interpreter  new  187 new  
  1.58%         interpreter  fast_aload_0  220 fast_aload_0  
  1.49%         interpreter  return  177 return  
  1.27%         interpreter  ifeq  153 ifeq  
  1.24%         interpreter  lload  22 lload  
 33.72%  <...other 323 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 80.16%         interpreter
 10.18%               JVMCI
  6.92%           libjvm.so
  1.83%              kernel
  0.26%             Unknown
  0.25%        libc-2.28.so
  0.16%       perf-5733.map
  0.12%  libpthread-2.28.so
  0.04%        runtime stub
  0.03%                    
  0.03%          libjava.so
  0.02%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 51351 total address lines.
Perf output processed (skipped 8.148 seconds):
 Column 1: cycles (15191 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (20 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fd0f00cabdf: mov    r8,r11
             0x00007fd0f00cabe2: mov    r11,r14
         ╭   0x00007fd0f00cabe5: jmp    0x00007fd0f00cabfc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fd0f00cabea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │↗  0x00007fd0f00cabf0: test   DWORD PTR [rip+0xa1a4410],eax        # 0x00007fd0fa26f006
         ││                                                ;   {poll}
  0.74%  ││  0x00007fd0f00cabf6: inc    r11                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  5.67%  ││  0x00007fd0f00cabf9: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  3.94%  ↘│  0x00007fd0f00cabfc: mov    r9,r11
          │  0x00007fd0f00cabff: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@2 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.72%   │  0x00007fd0f00cac03: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.23%   │  0x00007fd0f00cac07: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  3.77%   │  0x00007fd0f00cac0a: cmp    r10,r11
          ╰  0x00007fd0f00cac0d: jne    0x00007fd0f00cabf0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fd0f00cac0f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fd0f00cac12: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fd0f00cac17: add    rsp,0x18
             0x00007fd0f00cac1b: test   DWORD PTR [rip+0xa1a43e5],eax        # 0x00007fd0fa26f006
                                                           ;   {poll_return}
             0x00007fd0f00cac21: vzeroupper 
....................................................................................................
 20.07%  <total for region 1>

....[Hottest Regions]...............................................................................
 20.07%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (20 bytes) 
  3.65%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.33%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.95%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.59%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.48%         interpreter  invokevirtual  182 invokevirtual  (94 bytes) 
  2.42%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  1.76%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.30%         interpreter  areturn  176 areturn  (8 bytes) 
  1.26%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.20%              kernel  [unknown] (6 bytes) 
  1.16%         interpreter  goto  167 goto  (66 bytes) 
  1.11%         interpreter  invokeinterface  185 invokeinterface  (127 bytes) 
  1.09%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.05%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  0.99%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.99%         interpreter  ireturn  172 ireturn  (37 bytes) 
  0.85%         interpreter  lload  22 lload  (32 bytes) 
  0.84%         interpreter  areturn  176 areturn  (23 bytes) 
  0.84%         interpreter  checkcast  192 checkcast  (40 bytes) 
 48.06%  <...other 686 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 20.07%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
 10.23%         interpreter  method entry point (kind = zerolocals)  
  5.58%         interpreter  invokevirtual  182 invokevirtual  
  3.94%         interpreter  ireturn  172 ireturn  
  3.19%         interpreter  invoke return entry points  
  2.60%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.32%         interpreter  invokeinterface  185 invokeinterface  
  2.30%         interpreter  areturn  176 areturn  
  2.28%         interpreter  method entry point (kind = accessor)  
  2.24%              kernel  [unknown] 
  1.97%         interpreter  getstatic  178 getstatic  
  1.97%         interpreter  invokestatic  184 invokestatic  
  1.92%         interpreter  invokespecial  183 invokespecial  
  1.58%         interpreter  checkcast  192 checkcast  
  1.56%         interpreter  goto  167 goto  
  1.33%         interpreter  fast_aload_0  220 fast_aload_0  
  1.13%         interpreter  aload_1  43 aload_1  
  1.10%         interpreter  ifeq  153 ifeq  
  1.07%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  1.05%         interpreter  return  177 return  
 30.56%  <...other 302 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 68.67%         interpreter
 20.94%               JVMCI
  7.18%           libjvm.so
  2.24%              kernel
  0.25%       perf-5782.map
  0.22%             Unknown
  0.19%        libc-2.28.so
  0.18%  libpthread-2.28.so
  0.05%          libjava.so
  0.03%        runtime stub
  0.02%      hsdis-amd64.so
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 37.50% complete, ETA 00:03:22
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 130.971 ms/op
# Warmup Iteration   2: 135.809 ms/op
# Warmup Iteration   3: 146.057 ms/op
# Warmup Iteration   4: 147.678 ms/op
# Warmup Iteration   5: 147.579 ms/op
Iteration   1: 149.437 ms/op
Iteration   2: 146.448 ms/op
Iteration   3: 1.744 ms/op
Iteration   4: 0.814 ms/op
Iteration   5: 0.814 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 41.67% complete, ETA 00:03:06
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 149.708 ms/op
# Warmup Iteration   2: 143.282 ms/op
# Warmup Iteration   3: 135.813 ms/op
# Warmup Iteration   4: 147.700 ms/op
# Warmup Iteration   5: 150.343 ms/op
Iteration   1: 138.894 ms/op
Iteration   2: 133.959 ms/op
Iteration   3: 0.954 ms/op
Iteration   4: 0.821 ms/op
Iteration   5: 0.872 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 45.83% complete, ETA 00:02:50
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 138.804 ms/op
# Warmup Iteration   2: 143.478 ms/op
# Warmup Iteration   3: 149.171 ms/op
# Warmup Iteration   4: 147.038 ms/op
# Warmup Iteration   5: 147.448 ms/op
Iteration   1: 141.170 ms/op
Iteration   2: 135.171 ms/op
Iteration   3: 1.220 ms/op
Iteration   4: 0.788 ms/op
Iteration   5: 0.859 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline":
  56.931 ±(99.9%) 75.921 ms/op [Average]
  (min, avg, max) = (0.788, 56.931, 149.437), stdev = 71.017
  CI (99.9%): [≈ 0, 132.852] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·asm":
PrintAssembly processed: 48979 total address lines.
Perf output processed (skipped 5.887 seconds):
 Column 1: cycles (15176 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (20 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007f91bc0c6c73: mov    r8,rax
             0x00007f91bc0c6c76: mov    rax,r14
         ╭   0x00007f91bc0c6c79: jmp    0x00007f91bc0c6c8c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007f91bc0c6c7e: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │↗  0x00007f91bc0c6c80: test   DWORD PTR [rip+0xbe38380],eax        # 0x00007f91c7eff006
         ││                                                ;   {poll}
  0.77%  ││  0x00007f91bc0c6c86: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
         ││  0x00007f91bc0c6c89: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  5.87%  ↘│  0x00007f91bc0c6c8c: mov    r9,rax
          │  0x00007f91bc0c6c8f: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  0.69%   │  0x00007f91bc0c6c93: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.11%   │  0x00007f91bc0c6c97: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  5.67%   │  0x00007f91bc0c6c9a: cmp    r10,rax
          ╰  0x00007f91bc0c6c9d: jne    0x00007f91bc0c6c80  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f91bc0c6c9f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007f91bc0c6ca2: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f91bc0c6ca7: add    rsp,0x18
             0x00007f91bc0c6cab: test   DWORD PTR [rip+0xbe38355],eax        # 0x00007f91c7eff006
                                                           ;   {poll_return}
             0x00007f91bc0c6cb1: vzeroupper 
....................................................................................................
 13.11%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.11%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (20 bytes) 
  6.05%         interpreter  lload  22 lload  (32 bytes) 
  4.22%         interpreter  lstore  55 lstore  (21 bytes) 
  3.64%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.47%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  2.46%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.21%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.21%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.98%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.96%         interpreter  goto  167 goto  (70 bytes) 
  1.86%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  1.64%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.30%         interpreter  fast_aload_0  220 fast_aload_0  (69 bytes) 
  1.26%         interpreter  lmul  105 lmul  (12 bytes) 
  1.23%         interpreter  ladd  97 ladd  (16 bytes) 
  1.19%         interpreter  areturn  176 areturn  (8 bytes) 
  1.16%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
  1.16%         interpreter  lcmp  148 lcmp  (29 bytes) 
  1.15%         interpreter  ireturn  172 ireturn  (40 bytes) 
  0.96%         interpreter  aload_1  43 aload_1  (70 bytes) 
 45.78%  <...other 698 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.11%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 
  9.86%         interpreter  method entry point (kind = zerolocals)  
  6.06%         interpreter  lload  22 lload  
  5.25%         interpreter  invokevirtual  182 invokevirtual  
  4.22%         interpreter  lstore  55 lstore  
  3.55%         interpreter  ireturn  172 ireturn  
  2.69%         interpreter  goto  167 goto  
  2.68%         interpreter  invoke return entry points  
  2.40%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.21%         interpreter  areturn  176 areturn  
  2.08%         interpreter  method entry point (kind = accessor)  
  1.98%              kernel  [unknown] 
  1.97%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  1.96%         interpreter  getstatic  178 getstatic  
  1.94%         interpreter  invokeinterface  185 invokeinterface  
  1.71%         interpreter  invokespecial  183 invokespecial  
  1.44%         interpreter  ifeq  153 ifeq  
  1.30%         interpreter  fast_aload_0  220 fast_aload_0  
  1.26%         interpreter  checkcast  192 checkcast  
  1.26%         interpreter  lmul  105 lmul  
 31.07%  <...other 310 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.46%         interpreter
 13.35%               JVMCI
  6.13%           libjvm.so
  1.98%              kernel
  0.31%             Unknown
  0.26%        libc-2.28.so
  0.23%  libpthread-2.28.so
  0.18%       perf-5836.map
  0.05%      hsdis-amd64.so
  0.02%        runtime stub
  0.01%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49828 total address lines.
Perf output processed (skipped 6.178 seconds):
 Column 1: cycles (15513 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 (20 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007f88f80c6d73: mov    r8,rax
             0x00007f88f80c6d76: mov    rax,r14
         ╭   0x00007f88f80c6d79: jmp    0x00007f88f80c6d8c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007f88f80c6d7e: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │↗  0x00007f88f80c6d80: test   DWORD PTR [rip+0xbbc0280],eax        # 0x00007f8903c87006
         ││                                                ;   {poll}
  1.55%  ││  0x00007f88f80c6d86: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
         ││  0x00007f88f80c6d89: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  5.96%  ↘│  0x00007f88f80c6d8c: mov    r9,rax
          │  0x00007f88f80c6d8f: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  1.59%   │  0x00007f88f80c6d93: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.05%   │  0x00007f88f80c6d97: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  5.75%   │  0x00007f88f80c6d9a: cmp    r10,rax
          ╰  0x00007f88f80c6d9d: jne    0x00007f88f80c6d80  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f88f80c6d9f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007f88f80c6da2: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f88f80c6da7: add    rsp,0x18
             0x00007f88f80c6dab: test   DWORD PTR [rip+0xbbc0255],eax        # 0x00007f8903c87006
                                                           ;   {poll_return}
             0x00007f88f80c6db1: vzeroupper 
....................................................................................................
 14.89%  <total for region 1>

....[Hottest Regions]...............................................................................
 14.89%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 (20 bytes) 
  5.47%         interpreter  lload  22 lload  (32 bytes) 
  3.80%         interpreter  lstore  55 lstore  (40 bytes) 
  3.55%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  3.48%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.29%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.12%         interpreter  goto  167 goto  (79 bytes) 
  2.11%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.96%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.91%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  1.63%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.30%         interpreter  areturn  176 areturn  (8 bytes) 
  1.23%         interpreter  ladd  97 ladd  (16 bytes) 
  1.11%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.10%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.10%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.06%         interpreter  lmul  105 lmul  (20 bytes) 
  1.02%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  0.96%         interpreter  lcmp  148 lcmp  (32 bytes) 
  0.91%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
 47.00%  <...other 699 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 14.89%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 
  9.61%         interpreter  method entry point (kind = zerolocals)  
  5.49%         interpreter  lload  22 lload  
  5.22%         interpreter  invokevirtual  182 invokevirtual  
  3.80%         interpreter  lstore  55 lstore  
  3.46%         interpreter  ireturn  172 ireturn  
  2.93%         interpreter  goto  167 goto  
  2.67%         interpreter  invoke return entry points  
  2.35%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.24%         interpreter  areturn  176 areturn  
  2.12%         interpreter  invokeinterface  185 invokeinterface  
  2.11%         interpreter  method entry point (kind = accessor)  
  2.00%         interpreter  invokespecial  183 invokespecial  
  1.97%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  1.87%         interpreter  getstatic  178 getstatic  
  1.75%              kernel  [unknown] 
  1.58%         interpreter  ifeq  153 ifeq  
  1.35%         interpreter  fast_aload_0  220 fast_aload_0  
  1.23%         interpreter  ladd  97 ladd  
  1.06%         interpreter  lmul  105 lmul  
 30.31%  <...other 290 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 76.19%         interpreter
 15.12%               JVMCI
  5.96%           libjvm.so
  1.75%              kernel
  0.27%             Unknown
  0.24%        libc-2.28.so
  0.20%       perf-5874.map
  0.17%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.03%        runtime stub
  0.02%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49878 total address lines.
Perf output processed (skipped 6.078 seconds):
 Column 1: cycles (15675 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (20 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007f2bec0c6f33: mov    r8,rax
             0x00007f2bec0c6f36: mov    rax,r14
         ╭   0x00007f2bec0c6f39: jmp    0x00007f2bec0c6f4c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007f2bec0c6f3e: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │↗  0x00007f2bec0c6f40: test   DWORD PTR [rip+0xafbe0c0],eax        # 0x00007f2bf7085006
         ││                                                ;   {poll}
  1.58%  ││  0x00007f2bec0c6f46: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
         ││  0x00007f2bec0c6f49: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  5.47%  ↘│  0x00007f2bec0c6f4c: mov    r9,rax
          │  0x00007f2bec0c6f4f: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  1.45%   │  0x00007f2bec0c6f53: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.10%   │  0x00007f2bec0c6f57: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  5.27%   │  0x00007f2bec0c6f5a: cmp    r10,rax
          ╰  0x00007f2bec0c6f5d: jne    0x00007f2bec0c6f40  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f2bec0c6f5f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007f2bec0c6f62: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f2bec0c6f67: add    rsp,0x18
             0x00007f2bec0c6f6b: test   DWORD PTR [rip+0xafbe095],eax        # 0x00007f2bf7085006
                                                           ;   {poll_return}
             0x00007f2bec0c6f71: vzeroupper 
....................................................................................................
 13.86%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.86%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (20 bytes) 
  5.64%         interpreter  lload  22 lload  (32 bytes) 
  4.20%         interpreter  lstore  55 lstore  (21 bytes) 
  3.61%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.15%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.21%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.19%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.03%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  2.00%         interpreter  goto  167 goto  (70 bytes) 
  1.87%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.51%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.36%         interpreter  areturn  176 areturn  (4 bytes) 
  1.25%         interpreter  ladd  97 ladd  (16 bytes) 
  1.15%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.15%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.14%         interpreter  getstatic  178 getstatic  (94 bytes) 
  1.12%         interpreter  lmul  105 lmul  (12 bytes) 
  1.09%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.07%         interpreter  iconst_0  3 iconst_0  (10 bytes) 
  1.03%         interpreter  fast_aload_0  220 fast_aload_0  (22 bytes) 
 47.37%  <...other 702 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.86%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 
  9.24%         interpreter  method entry point (kind = zerolocals)  
  5.65%         interpreter  lload  22 lload  
  5.09%         interpreter  invokevirtual  182 invokevirtual  
  4.20%         interpreter  lstore  55 lstore  
  3.33%         interpreter  ireturn  172 ireturn  
  2.83%         interpreter  goto  167 goto  
  2.76%         interpreter  invoke return entry points  
  2.36%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.34%         interpreter  method entry point (kind = accessor)  
  2.32%         interpreter  areturn  176 areturn  
  2.19%              kernel  [unknown] 
  2.11%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  2.04%         interpreter  invokeinterface  185 invokeinterface  
  1.92%         interpreter  getstatic  178 getstatic  
  1.78%         interpreter  invokespecial  183 invokespecial  
  1.64%         interpreter  ifeq  153 ifeq  
  1.31%         interpreter  fast_aload_0  220 fast_aload_0  
  1.25%         interpreter  ladd  97 ladd  
  1.12%         interpreter  lmul  105 lmul  
 30.63%  <...other 296 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 76.65%         interpreter
 14.09%               JVMCI
  6.09%           libjvm.so
  2.19%              kernel
  0.29%        libc-2.28.so
  0.29%             Unknown
  0.20%       perf-5913.map
  0.12%  libpthread-2.28.so
  0.02%      hsdis-amd64.so
  0.02%          libjava.so
  0.01%        runtime stub
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 50.00% complete, ETA 00:02:36
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 927.982 ms/op
# Warmup Iteration   2: 984.640 ms/op
# Warmup Iteration   3: 990.361 ms/op
# Warmup Iteration   4: 846.364 ms/op
# Warmup Iteration   5: 22.743 ms/op
Iteration   1: 0.765 ms/op
Iteration   2: 0.768 ms/op
Iteration   3: 0.763 ms/op
Iteration   4: 0.786 ms/op
Iteration   5: 0.770 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 54.17% complete, ETA 00:02:24
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1001.339 ms/op
# Warmup Iteration   2: 1024.334 ms/op
# Warmup Iteration   3: 1042.251 ms/op
# Warmup Iteration   4: 1049.277 ms/op
# Warmup Iteration   5: 1017.880 ms/op
Iteration   1: 1009.899 ms/op
Iteration   2: 1002.704 ms/op
Iteration   3: 520.957 ms/op
Iteration   4: 2.876 ms/op
Iteration   5: 0.883 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 58.33% complete, ETA 00:02:10
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 952.465 ms/op
# Warmup Iteration   2: 1010.470 ms/op
# Warmup Iteration   3: 914.523 ms/op
# Warmup Iteration   4: 916.306 ms/op
# Warmup Iteration   5: 564.574 ms/op
Iteration   1: 6.624 ms/op
Iteration   2: 0.847 ms/op
Iteration   3: 0.810 ms/op
Iteration   4: 0.818 ms/op
Iteration   5: 0.835 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda":
  170.074 ±(99.9%) 389.971 ms/op [Average]
  (min, avg, max) = (0.763, 170.074, 1009.899), stdev = 364.779
  CI (99.9%): [≈ 0, 560.044] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·asm":
PrintAssembly processed: 57253 total address lines.
Perf output processed (skipped 9.307 seconds):
 Column 1: cycles (14877 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007efc900c948d: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007efc900c9490: mov    r11,rax
             0x00007efc900c9493: mov    rax,r14
         ╭   0x00007efc900c9496: jmp    0x00007efc900c94ac  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007efc900c949b: nop    DWORD PTR [rax+rax*1+0x0]
         │                                                 ; OopMap{rbx=Oop off=128}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.17%  │↗  0x00007efc900c94a0: test   DWORD PTR [rip+0xcb86b60],eax        # 0x00007efc9cc50006
         ││                                                ;   {poll}
  9.82%  ││  0x00007efc900c94a6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.73%  ││  0x00007efc900c94a9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.74%  ↘│  0x00007efc900c94ac: mov    r8,rax
  1.13%   │  0x00007efc900c94af: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
 10.94%   │  0x00007efc900c94b3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  2.08%   │  0x00007efc900c94b6: cmp    r10,rax
          ╰  0x00007efc900c94b9: jne    0x00007efc900c94a0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007efc900c94bb: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007efc900c94be: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007efc900c94c3: add    rsp,0x18
             0x00007efc900c94c7: test   DWORD PTR [rip+0xcb86b39],eax        # 0x00007efc9cc50006
                                                           ;   {poll_return}
             0x00007efc900c94cd: vzeroupper 
....................................................................................................
 27.61%  <total for region 1>

....[Hottest Regions]...............................................................................
 27.61%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.21%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.11%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.35%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.21%         interpreter  ireturn  172 ireturn  (0 bytes) 
  2.10%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (65 bytes) 
  1.64%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.33%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.29%         interpreter  areturn  176 areturn  (8 bytes) 
  1.25%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.03%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.03%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  1.01%         interpreter  ireturn  172 ireturn  (37 bytes) 
  0.99%         interpreter  goto  167 goto  (66 bytes) 
  0.99%              kernel  [unknown] (6 bytes) 
  0.91%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  0.84%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  0.75%         interpreter  invokevirtual  182 invokevirtual  (105 bytes) 
  0.74%         interpreter  areturn  176 areturn  (23 bytes) 
  0.73%         interpreter  method entry point (kind = accessor)  (115 bytes) 
 44.85%  <...other 739 warm regions...>
....................................................................................................
 99.97%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 27.61%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  8.93%         interpreter  method entry point (kind = zerolocals)  
  5.59%         interpreter  invokevirtual  182 invokevirtual  
  3.53%         interpreter  ireturn  172 ireturn  
  3.11%         interpreter  invoke return entry points  
  2.63%              kernel  [unknown] 
  2.31%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.21%         interpreter  invokeinterface  185 invokeinterface  
  2.20%         interpreter  areturn  176 areturn  
  2.12%         interpreter  method entry point (kind = accessor)  
  1.83%         interpreter  getstatic  178 getstatic  
  1.76%         interpreter  invokestatic  184 invokestatic  
  1.63%         interpreter  invokespecial  183 invokespecial  
  1.41%         interpreter  goto  167 goto  
  1.27%         interpreter  checkcast  192 checkcast  
  1.18%         interpreter  fast_aload_0  220 fast_aload_0  
  1.14%         interpreter  aload_1  43 aload_1  
  1.06%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  1.01%         interpreter  ifeq  153 ifeq  
  0.90%         interpreter  aload  25 aload  
 26.54%  <...other 296 warm methods...>
....................................................................................................
 99.97%  <totals>

....[Distribution by Source]........................................................................
 61.15%         interpreter
 28.11%               JVMCI
  6.88%           libjvm.so
  2.63%              kernel
  0.37%       perf-5960.map
  0.30%        libc-2.28.so
  0.17%             Unknown
  0.15%  libpthread-2.28.so
  0.13%      hsdis-amd64.so
  0.05%        runtime stub
  0.01%          libjava.so
  0.01%        libverify.so
....................................................................................................
 99.97%  <totals>

PrintAssembly processed: 49065 total address lines.
Perf output processed (skipped 5.946 seconds):
 Column 1: cycles (15261 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  7.03%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  4.38%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.96%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.72%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.33%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.22%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.05%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.72%         interpreter  new  187 new  (199 bytes) 
  1.68%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.63%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.51%         interpreter  lload  22 lload  (32 bytes) 
  1.42%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.40%         interpreter  goto  167 goto  (79 bytes) 
  1.34%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.30%         interpreter  areturn  176 areturn  (44 bytes) 
  1.30%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.26%         interpreter  areturn  176 areturn  (8 bytes) 
  1.21%              kernel  [unknown] (6 bytes) 
  1.18%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.14%         interpreter  getstatic  178 getstatic  (76 bytes) 
 56.21%  <...other 732 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.48%         interpreter  method entry point (kind = zerolocals)  
  7.03%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  5.58%         interpreter  invokevirtual  182 invokevirtual  
  4.19%         interpreter  invoke return entry points  
  3.50%         interpreter  ireturn  172 ireturn  
  3.18%         interpreter  invokeinterface  185 invokeinterface  
  3.09%         interpreter  invokespecial  183 invokespecial  
  2.84%         interpreter  areturn  176 areturn  
  2.53%              kernel  [unknown] 
  2.38%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.25%         interpreter  invokestatic  184 invokestatic  
  2.08%         interpreter  method entry point (kind = accessor)  
  2.08%         interpreter  goto  167 goto  
  1.89%         interpreter  getstatic  178 getstatic  
  1.89%         interpreter  checkcast  192 checkcast  
  1.88%         interpreter  lreturn  173 lreturn  
  1.78%         interpreter  new  187 new  
  1.62%         interpreter  lload  22 lload  
  1.57%         interpreter  return  177 return  
  1.51%         interpreter  fast_aload_0  220 fast_aload_0  
 34.65%  <...other 314 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 81.55%         interpreter
  8.30%               JVMCI
  6.39%           libjvm.so
  2.53%              kernel
  0.43%       perf-5998.map
  0.24%        libc-2.28.so
  0.24%             Unknown
  0.17%  libpthread-2.28.so
  0.07%      hsdis-amd64.so
  0.03%           libzip.so
  0.02%        runtime stub
  0.01%              [vdso]
  0.01%        libverify.so
  0.01%                    
  0.01%          libjava.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 51906 total address lines.
Perf output processed (skipped 8.406 seconds):
 Column 1: cycles (15086 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007f6c440c974d: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f6c440c9750: mov    r11,rax
             0x00007f6c440c9753: mov    rax,r14
         ╭   0x00007f6c440c9756: jmp    0x00007f6c440c976c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f6c440c975b: nop    DWORD PTR [rax+rax*1+0x0]
         │                                                 ; OopMap{rbx=Oop off=128}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.92%  │↗  0x00007f6c440c9760: test   DWORD PTR [rip+0xbeb48a0],eax        # 0x00007f6c4ff7e006
         ││                                                ;   {poll}
  8.34%  ││  0x00007f6c440c9766: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.49%  ││  0x00007f6c440c9769: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.45%  ↘│  0x00007f6c440c976c: mov    r8,rax
  0.99%   │  0x00007f6c440c976f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  8.52%   │  0x00007f6c440c9773: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.83%   │  0x00007f6c440c9776: cmp    r10,rax
          ╰  0x00007f6c440c9779: jne    0x00007f6c440c9760  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f6c440c977b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f6c440c977e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f6c440c9783: add    rsp,0x18
             0x00007f6c440c9787: test   DWORD PTR [rip+0xbeb4879],eax        # 0x00007f6c4ff7e006
                                                           ;   {poll_return}
             0x00007f6c440c978d: vzeroupper 
....................................................................................................
 22.54%  <total for region 1>

....[Hottest Regions]...............................................................................
 22.54%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.35%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.07%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.55%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.43%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.02%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.86%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.62%         interpreter  goto  167 goto  (79 bytes) 
  1.45%         interpreter  areturn  176 areturn  (8 bytes) 
  1.40%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.39%         interpreter  lload  22 lload  (32 bytes) 
  1.35%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.17%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.08%         interpreter  aload_3  45 aload_3  (36 bytes) 
  1.07%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.06%              kernel  [unknown] (6 bytes) 
  1.03%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.03%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  0.97%         interpreter  invokestatic  184 invokestatic  (93 bytes) 
  0.92%         interpreter  invokevirtual  182 invokevirtual  (92 bytes) 
 46.63%  <...other 672 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 22.54%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  9.28%         interpreter  method entry point (kind = zerolocals)  
  6.14%         interpreter  invokevirtual  182 invokevirtual  
  3.82%         interpreter  ireturn  172 ireturn  
  3.22%         interpreter  invoke return entry points  
  2.36%         interpreter  getstatic  178 getstatic  
  2.32%         interpreter  areturn  176 areturn  
  2.29%         interpreter  invokeinterface  185 invokeinterface  
  2.28%         interpreter  method entry point (kind = accessor)  
  2.27%         interpreter  invokestatic  184 invokestatic  
  2.18%         interpreter  goto  167 goto  
  2.17%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.10%              kernel  [unknown] 
  1.59%         interpreter  invokespecial  183 invokespecial  
  1.54%         interpreter  checkcast  192 checkcast  
  1.46%         interpreter  lload  22 lload  
  1.30%         interpreter  ifeq  153 ifeq  
  1.19%         interpreter  aload_3  45 aload_3  
  1.06%         interpreter  fast_aload_0  220 fast_aload_0  
  1.05%         interpreter  aload_1  43 aload_1  
 27.84%  <...other 288 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 67.14%         interpreter
 23.21%               JVMCI
  6.38%           libjvm.so
  2.10%              kernel
  0.42%       perf-6037.map
  0.25%             Unknown
  0.24%        libc-2.28.so
  0.17%  libpthread-2.28.so
  0.04%      hsdis-amd64.so
  0.02%          libjava.so
  0.02%           libzip.so
  0.01%        runtime stub
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 62.50% complete, ETA 00:01:57
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 126.962 ms/op
# Warmup Iteration   2: 136.315 ms/op
# Warmup Iteration   3: 134.022 ms/op
# Warmup Iteration   4: 129.851 ms/op
# Warmup Iteration   5: 130.388 ms/op
Iteration   1: 130.838 ms/op
Iteration   2: 130.466 ms/op
Iteration   3: 1.314 ms/op
Iteration   4: 0.748 ms/op
Iteration   5: 0.678 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 66.67% complete, ETA 00:01:43
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 120.907 ms/op
# Warmup Iteration   2: 121.695 ms/op
# Warmup Iteration   3: 130.636 ms/op
# Warmup Iteration   4: 132.456 ms/op
# Warmup Iteration   5: 133.050 ms/op
Iteration   1: 124.635 ms/op
Iteration   2: 125.931 ms/op
Iteration   3: 0.828 ms/op
Iteration   4: 0.784 ms/op
Iteration   5: 0.778 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 70.83% complete, ETA 00:01:30
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 120.627 ms/op
# Warmup Iteration   2: 131.856 ms/op
# Warmup Iteration   3: 133.415 ms/op
# Warmup Iteration   4: 138.554 ms/op
# Warmup Iteration   5: 138.902 ms/op
Iteration   1: 138.461 ms/op
Iteration   2: 139.125 ms/op
Iteration   3: 1.108 ms/op
Iteration   4: 0.767 ms/op
Iteration   5: 0.723 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline":
  53.146 ±(99.9%) 70.971 ms/op [Average]
  (min, avg, max) = (0.678, 53.146, 139.125), stdev = 66.386
  CI (99.9%): [≈ 0, 124.117] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·asm":
PrintAssembly processed: 48963 total address lines.
Perf output processed (skipped 5.970 seconds):
 Column 1: cycles (15381 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007f6b7feaae35: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007f6b7feaae38: mov    r10,rax
             0x00007f6b7feaae3b: mov    rax,r13
         ╭   0x00007f6b7feaae3e: jmp    0x00007f6b7feaae5c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007f6b7feaae43: nop    DWORD PTR [rax+0x0]
         │   0x00007f6b7feaae4a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  2.00%  │↗  0x00007f6b7feaae50: test   DWORD PTR [rip+0x9e221b0],eax        # 0x00007f6b89ccd006
         ││                                                ;   {poll}
  1.80%  ││  0x00007f6b7feaae56: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  1.97%  ││  0x00007f6b7feaae59: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.92%  ↘│  0x00007f6b7feaae5c: mov    r11,rax
  2.05%   │  0x00007f6b7feaae5f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  1.90%   │  0x00007f6b7feaae63: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  1.83%   │  0x00007f6b7feaae66: cmp    r14,rax
          ╰  0x00007f6b7feaae69: jne    0x00007f6b7feaae50  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007f6b7feaae6b: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007f6b7feaae6e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f6b7feaae73: add    rsp,0x18
             0x00007f6b7feaae77: test   DWORD PTR [rip+0x9e22189],eax        # 0x00007f6b89ccd006
                                                           ;   {poll_return}
             0x00007f6b7feaae7d: vzeroupper 
....................................................................................................
 13.47%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.47%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  6.49%         interpreter  lload  22 lload  (32 bytes) 
  4.12%         interpreter  lstore  55 lstore  (21 bytes) 
  3.82%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  3.31%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.35%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.20%         interpreter  goto  167 goto  (70 bytes) 
  2.03%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.02%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.57%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.37%         interpreter  ladd  97 ladd  (16 bytes) 
  1.31%         interpreter  areturn  176 areturn  (4 bytes) 
  1.18%         interpreter  lcmp  148 lcmp  (24 bytes) 
  1.15%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.12%         interpreter  ireturn  172 ireturn  (28 bytes) 
  1.12%              kernel  [unknown] (6 bytes) 
  1.09%         interpreter  lmul  105 lmul  (12 bytes) 
  1.06%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.05%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  1.04%         interpreter  ifeq  153 ifeq  (36 bytes) 
 47.14%  <...other 702 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.47%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
  9.76%         interpreter  method entry point (kind = zerolocals)  
  6.52%         interpreter  lload  22 lload  
  5.03%         interpreter  invokevirtual  182 invokevirtual  
  4.12%         interpreter  lstore  55 lstore  
  3.44%         interpreter  ireturn  172 ireturn  
  2.96%         interpreter  goto  167 goto  
  2.59%         interpreter  invoke return entry points  
  2.33%         interpreter  method entry point (kind = accessor)  
  2.31%         interpreter  areturn  176 areturn  
  2.17%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  1.99%         interpreter  invokespecial  183 invokespecial  
  1.99%              kernel  [unknown] 
  1.94%         interpreter  getstatic  178 getstatic  
  1.93%         interpreter  invokeinterface  185 invokeinterface  
  1.58%         interpreter  ifeq  153 ifeq  
  1.37%         interpreter  ladd  97 ladd  
  1.18%         interpreter  lcmp  148 lcmp  
  1.18%         interpreter  fast_aload_0  220 fast_aload_0  
  1.16%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
 30.99%  <...other 308 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.05%         interpreter
 13.71%               JVMCI
  6.20%           libjvm.so
  1.99%              kernel
  0.30%        libc-2.28.so
  0.28%             Unknown
  0.18%  libpthread-2.28.so
  0.15%       perf-6103.map
  0.05%      hsdis-amd64.so
  0.03%          libjava.so
  0.03%        runtime stub
  0.02%           libzip.so
  0.01%              [vdso]
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49881 total address lines.
Perf output processed (skipped 6.035 seconds):
 Column 1: cycles (15459 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007f41bc0c5935: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007f41bc0c5938: mov    r10,rax
             0x00007f41bc0c593b: mov    rax,r13
         ╭   0x00007f41bc0c593e: jmp    0x00007f41bc0c595c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007f41bc0c5943: nop    DWORD PTR [rax+0x0]
         │   0x00007f41bc0c594a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  2.09%  │↗  0x00007f41bc0c5950: test   DWORD PTR [rip+0xaf2e6b0],eax        # 0x00007f41c6ff4006
         ││                                                ;   {poll}
  2.17%  ││  0x00007f41bc0c5956: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  1.95%  ││  0x00007f41bc0c5959: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  2.10%  ↘│  0x00007f41bc0c595c: mov    r11,rax
  2.23%   │  0x00007f41bc0c595f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  2.06%   │  0x00007f41bc0c5963: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  2.19%   │  0x00007f41bc0c5966: cmp    r14,rax
          ╰  0x00007f41bc0c5969: jne    0x00007f41bc0c5950  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007f41bc0c596b: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007f41bc0c596e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f41bc0c5973: add    rsp,0x18
             0x00007f41bc0c5977: test   DWORD PTR [rip+0xaf2e689],eax        # 0x00007f41c6ff4006
                                                           ;   {poll_return}
             0x00007f41bc0c597d: vzeroupper 
....................................................................................................
 14.79%  <total for region 1>

....[Hottest Regions]...............................................................................
 14.79%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  5.67%         interpreter  lload  22 lload  (32 bytes) 
  3.81%         interpreter  lstore  55 lstore  (21 bytes) 
  3.62%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.17%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.52%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.21%         interpreter  goto  167 goto  (70 bytes) 
  2.12%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.11%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.01%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.54%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.42%         interpreter  ladd  97 ladd  (16 bytes) 
  1.33%         interpreter  areturn  176 areturn  (8 bytes) 
  1.19%         interpreter  iconst_0  3 iconst_0  (11 bytes) 
  1.15%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.05%         interpreter  lcmp  148 lcmp  (24 bytes) 
  1.00%              kernel  [unknown] (6 bytes) 
  0.99%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  0.97%         interpreter  lmul  105 lmul  (12 bytes) 
  0.96%         interpreter  ifeq  153 ifeq  (40 bytes) 
 46.40%  <...other 730 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 14.79%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
  9.54%         interpreter  method entry point (kind = zerolocals)  
  5.68%         interpreter  lload  22 lload  
  4.80%         interpreter  invokevirtual  182 invokevirtual  
  3.81%         interpreter  lstore  55 lstore  
  3.52%         interpreter  ireturn  172 ireturn  
  2.96%         interpreter  goto  167 goto  
  2.73%         interpreter  invoke return entry points  
  2.39%         interpreter  method entry point (kind = accessor)  
  2.26%         interpreter  areturn  176 areturn  
  2.22%              kernel  [unknown] 
  2.20%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  1.95%         interpreter  invokeinterface  185 invokeinterface  
  1.87%         interpreter  invokespecial  183 invokespecial  
  1.78%         interpreter  getstatic  178 getstatic  
  1.77%         interpreter  ifeq  153 ifeq  
  1.42%         interpreter  ladd  97 ladd  
  1.24%         interpreter  checkcast  192 checkcast  
  1.24%         interpreter  iconst_0  3 iconst_0  
  1.22%         interpreter  fast_aload_0  220 fast_aload_0  
 30.62%  <...other 307 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 75.31%         interpreter
 15.01%               JVMCI
  6.58%           libjvm.so
  2.22%              kernel
  0.27%        libc-2.28.so
  0.19%       perf-6142.map
  0.19%             Unknown
  0.11%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.03%        runtime stub
  0.02%          libjava.so
  0.01%           libzip.so
  0.01%                    
....................................................................................................
100.00%  <totals>

PrintAssembly processed: 49823 total address lines.
Perf output processed (skipped 6.147 seconds):
 Column 1: cycles (15641 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007f16200c7035: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007f16200c7038: mov    r10,rax
             0x00007f16200c703b: mov    rax,r13
         ╭   0x00007f16200c703e: jmp    0x00007f16200c705c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007f16200c7043: nop    DWORD PTR [rax+0x0]
         │   0x00007f16200c704a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.75%  │↗  0x00007f16200c7050: test   DWORD PTR [rip+0xd587fb0],eax        # 0x00007f162d64f006
         ││                                                ;   {poll}
  2.15%  ││  0x00007f16200c7056: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  1.83%  ││  0x00007f16200c7059: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.99%  ↘│  0x00007f16200c705c: mov    r11,rax
  1.98%   │  0x00007f16200c705f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  2.12%   │  0x00007f16200c7063: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  2.11%   │  0x00007f16200c7066: cmp    r14,rax
          ╰  0x00007f16200c7069: jne    0x00007f16200c7050  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007f16200c706b: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007f16200c706e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f16200c7073: add    rsp,0x18
             0x00007f16200c7077: test   DWORD PTR [rip+0xd587f89],eax        # 0x00007f162d64f006
                                                           ;   {poll_return}
             0x00007f16200c707d: vzeroupper 
....................................................................................................
 13.93%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.93%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  6.15%         interpreter  lload  22 lload  (32 bytes) 
  3.73%         interpreter  lstore  55 lstore  (26 bytes) 
  3.42%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.17%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.33%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.30%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.16%         interpreter  goto  167 goto  (117 bytes) 
  2.11%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.50%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.39%         interpreter  ladd  97 ladd  (16 bytes) 
  1.31%         interpreter  lcmp  148 lcmp  (29 bytes) 
  1.29%         interpreter  areturn  176 areturn  (8 bytes) 
  1.22%         interpreter  getstatic  178 getstatic  (81 bytes) 
  1.19%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
  1.13%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.07%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.06%         interpreter  lmul  105 lmul  (12 bytes) 
  1.05%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.02%         interpreter  ifeq  153 ifeq  (40 bytes) 
 47.47%  <...other 687 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.93%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
  9.26%         interpreter  method entry point (kind = zerolocals)  
  6.16%         interpreter  lload  22 lload  
  4.95%         interpreter  invokevirtual  182 invokevirtual  
  3.73%         interpreter  lstore  55 lstore  
  3.52%         interpreter  ireturn  172 ireturn  
  3.00%         interpreter  goto  167 goto  
  2.68%         interpreter  invoke return entry points  
  2.49%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.31%         interpreter  method entry point (kind = accessor)  
  2.28%         interpreter  areturn  176 areturn  
  2.10%         interpreter  invokeinterface  185 invokeinterface  
  2.01%         interpreter  getstatic  178 getstatic  
  1.95%              kernel  [unknown] 
  1.89%         interpreter  invokespecial  183 invokespecial  
  1.79%         interpreter  ifeq  153 ifeq  
  1.39%         interpreter  ladd  97 ladd  
  1.31%         interpreter  lcmp  148 lcmp  
  1.24%         interpreter  checkcast  192 checkcast  
  1.22%         interpreter  iconst_0  3 iconst_0  
 30.77%  <...other 288 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.25%         interpreter
 14.10%               JVMCI
  5.73%           libjvm.so
  1.95%              kernel
  0.24%        libc-2.28.so
  0.23%             Unknown
  0.19%  libpthread-2.28.so
  0.16%       perf-6180.map
  0.06%        runtime stub
  0.04%      hsdis-amd64.so
  0.03%          libjava.so
  0.01%              [vdso]
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef
# Parameters: (factor = 1, param = 1000000)

# Run progress: 75.00% complete, ETA 00:01:16
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1072.802 ms/op
# Warmup Iteration   2: 1070.936 ms/op
# Warmup Iteration   3: 1075.591 ms/op
# Warmup Iteration   4: 1108.652 ms/op
# Warmup Iteration   5: 1155.260 ms/op
Iteration   1: 1159.760 ms/op
Iteration   2: 589.369 ms/op
Iteration   3: 2.388 ms/op
Iteration   4: 0.813 ms/op
Iteration   5: 0.825 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 79.17% complete, ETA 00:01:03
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1118.197 ms/op
# Warmup Iteration   2: 1156.208 ms/op
# Warmup Iteration   3: 1223.805 ms/op
# Warmup Iteration   4: 1267.687 ms/op
# Warmup Iteration   5: 1244.798 ms/op
Iteration   1: 1255.948 ms/op
Iteration   2: 382.542 ms/op
Iteration   3: 1.846 ms/op
Iteration   4: 0.770 ms/op
Iteration   5: 0.790 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 83.33% complete, ETA 00:00:50
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1187.937 ms/op
# Warmup Iteration   2: 1264.750 ms/op
# Warmup Iteration   3: 1181.976 ms/op
# Warmup Iteration   4: 1231.370 ms/op
# Warmup Iteration   5: 1281.587 ms/op
Iteration   1: 1281.450 ms/op
Iteration   2: 370.121 ms/op
Iteration   3: 1.833 ms/op
Iteration   4: 0.873 ms/op
Iteration   5: 0.863 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef":
  336.679 ±(99.9%) 534.146 ms/op [Average]
  (min, avg, max) = (0.770, 336.679, 1281.450), stdev = 499.640
  CI (99.9%): [≈ 0, 870.825] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·asm":
PrintAssembly processed: 50132 total address lines.
Perf output processed (skipped 6.131 seconds):
 Column 1: cycles (16288 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f8aec0c9b61: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f8aec0c9b64: mov    r11,rax
             0x00007f8aec0c9b67: mov    rax,r14
         ╭   0x00007f8aec0c9b6a: jmp    0x00007f8aec0c9b7c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f8aec0c9b6f: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.57%  │↗  0x00007f8aec0c9b70: test   DWORD PTR [rip+0xa8db490],eax        # 0x00007f8af69a5006
         ││                                                ;   {poll}
  4.39%  ││  0x00007f8aec0c9b76: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.30%  ││  0x00007f8aec0c9b79: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.71%  ↘│  0x00007f8aec0c9b7c: mov    r8,rax
  0.37%   │  0x00007f8aec0c9b7f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.44%   │  0x00007f8aec0c9b83: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.96%   │  0x00007f8aec0c9b86: cmp    r10,rax
          ╰  0x00007f8aec0c9b89: jne    0x00007f8aec0c9b70  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f8aec0c9b8b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f8aec0c9b8e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f8aec0c9b93: add    rsp,0x18
             0x00007f8aec0c9b97: test   DWORD PTR [rip+0xa8db469],eax        # 0x00007f8af69a5006
                                                           ;   {poll_return}
             0x00007f8aec0c9b9d: vzeroupper 
....................................................................................................
 11.76%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.76%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 
  4.04%         interpreter  method entry point (kind = zerolocals)  (146 bytes) 
  3.70%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.35%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.18%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.14%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.71%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.59%              kernel  [unknown] (6 bytes) 
  1.44%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.37%         interpreter  invokeinterface  185 invokeinterface  (113 bytes) 
  1.36%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.35%         interpreter  goto  167 goto  (79 bytes) 
  1.33%         interpreter  areturn  176 areturn  (4 bytes) 
  1.30%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.23%         interpreter  fast_aload_0  220 fast_aload_0  (31 bytes) 
  1.19%         interpreter  lload  22 lload  (32 bytes) 
  1.16%         interpreter  areturn  176 areturn  (23 bytes) 
  1.15%         interpreter  ireturn  172 ireturn  (31 bytes) 
  1.11%         interpreter  lreturn  173 lreturn  (8 bytes) 
  1.05%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
 54.51%  <...other 812 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.76%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
 11.47%         interpreter  method entry point (kind = zerolocals)  
  5.69%         interpreter  invokevirtual  182 invokevirtual  
  4.05%         interpreter  invoke return entry points  
  3.63%         interpreter  ireturn  172 ireturn  
  2.98%         interpreter  invokespecial  183 invokespecial  
  2.94%         interpreter  invokeinterface  185 invokeinterface  
  2.74%              kernel  [unknown] 
  2.70%         interpreter  areturn  176 areturn  
  2.53%         interpreter  invokestatic  184 invokestatic  
  2.35%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.19%         interpreter  method entry point (kind = accessor)  
  1.81%         interpreter  goto  167 goto  
  1.79%         interpreter  checkcast  192 checkcast  
  1.76%         interpreter  getstatic  178 getstatic  
  1.52%         interpreter  fast_aload_0  220 fast_aload_0  
  1.36%         interpreter  lreturn  173 lreturn  
  1.33%         interpreter  ifeq  153 ifeq  
  1.29%         interpreter  lload  22 lload  
  1.24%         interpreter  return  177 return  
 32.88%  <...other 338 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 76.48%         interpreter
 12.81%               JVMCI
  6.91%           libjvm.so
  2.74%              kernel
  0.26%        libc-2.28.so
  0.24%       perf-6225.map
  0.19%             Unknown
  0.14%  libpthread-2.28.so
  0.08%      hsdis-amd64.so
  0.07%        runtime stub
  0.04%          libjava.so
  0.02%           libzip.so
  0.01%                    
  0.01%           libnet.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50630 total address lines.
Perf output processed (skipped 6.710 seconds):
 Column 1: cycles (16401 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f78980c9b21: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f78980c9b24: mov    r11,rax
             0x00007f78980c9b27: mov    rax,r14
         ╭   0x00007f78980c9b2a: jmp    0x00007f78980c9b3c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f78980c9b2f: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.54%  │↗  0x00007f78980c9b30: test   DWORD PTR [rip+0xafea4d0],eax        # 0x00007f78a30b4006
         ││                                                ;   {poll}
  4.59%  ││  0x00007f78980c9b36: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.30%  ││  0x00007f78980c9b39: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.93%  ↘│  0x00007f78980c9b3c: mov    r8,rax
  0.54%   │  0x00007f78980c9b3f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.76%   │  0x00007f78980c9b43: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.90%   │  0x00007f78980c9b46: cmp    r10,rax
          ╰  0x00007f78980c9b49: jne    0x00007f78980c9b30  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f78980c9b4b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f78980c9b4e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f78980c9b53: add    rsp,0x18
             0x00007f78980c9b57: test   DWORD PTR [rip+0xafea4a9],eax        # 0x00007f78a30b4006
                                                           ;   {poll_return}
             0x00007f78980c9b5d: vzeroupper 
....................................................................................................
 12.55%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.55%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 
  4.28%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.52%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.30%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.86%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.25%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.15%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.76%         interpreter  areturn  176 areturn  (8 bytes) 
  1.66%              kernel  [unknown] (6 bytes) 
  1.63%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.46%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.39%         interpreter  lload  22 lload  (32 bytes) 
  1.34%         interpreter  goto  167 goto  (70 bytes) 
  1.32%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.16%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.12%         interpreter  fast_aload_0  220 fast_aload_0  (22 bytes) 
  1.11%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.11%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.07%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.03%         interpreter  invoke return entry points  (112 bytes) 
 51.91%  <...other 730 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.55%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
 11.40%         interpreter  method entry point (kind = zerolocals)  
  5.44%         interpreter  invokevirtual  182 invokevirtual  
  4.22%         interpreter  ireturn  172 ireturn  
  3.72%         interpreter  invoke return entry points  
  3.04%         interpreter  invokespecial  183 invokespecial  
  2.96%         interpreter  invokeinterface  185 invokeinterface  
  2.92%         interpreter  areturn  176 areturn  
  2.91%              kernel  [unknown] 
  2.54%         interpreter  invokestatic  184 invokestatic  
  2.46%         interpreter  method entry point (kind = accessor)  
  2.28%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  1.90%         interpreter  goto  167 goto  
  1.88%         interpreter  getstatic  178 getstatic  
  1.66%         interpreter  checkcast  192 checkcast  
  1.47%         interpreter  lload  22 lload  
  1.40%         interpreter  fast_aload_0  220 fast_aload_0  
  1.27%         interpreter  return  177 return  
  1.23%         interpreter  ifeq  153 ifeq  
  1.15%         interpreter  aload_1  43 aload_1  
 31.59%  <...other 303 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 75.91%         interpreter
 13.65%               JVMCI
  6.62%           libjvm.so
  2.91%              kernel
  0.24%             Unknown
  0.20%        libc-2.28.so
  0.19%       perf-6265.map
  0.17%  libpthread-2.28.so
  0.04%      hsdis-amd64.so
  0.04%        runtime stub
  0.01%          libjava.so
  0.01%           libzip.so
  0.01%              [vdso]
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50135 total address lines.
Perf output processed (skipped 6.803 seconds):
 Column 1: cycles (16367 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007febac0c9b61: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007febac0c9b64: mov    r11,rax
             0x00007febac0c9b67: mov    rax,r14
         ╭   0x00007febac0c9b6a: jmp    0x00007febac0c9b7c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007febac0c9b6f: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.46%  │↗  0x00007febac0c9b70: test   DWORD PTR [rip+0xc875490],eax        # 0x00007febb893f006
         ││                                                ;   {poll}
  4.37%  ││  0x00007febac0c9b76: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.31%  ││  0x00007febac0c9b79: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.93%  ↘│  0x00007febac0c9b7c: mov    r8,rax
  0.62%   │  0x00007febac0c9b7f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.98%   │  0x00007febac0c9b83: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.86%   │  0x00007febac0c9b86: cmp    r10,rax
          ╰  0x00007febac0c9b89: jne    0x00007febac0c9b70  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007febac0c9b8b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007febac0c9b8e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007febac0c9b93: add    rsp,0x18
             0x00007febac0c9b97: test   DWORD PTR [rip+0xc875469],eax        # 0x00007febb893f006
                                                           ;   {poll_return}
             0x00007febac0c9b9d: vzeroupper 
....................................................................................................
 12.53%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.53%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 
  4.40%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.53%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.31%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.37%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.05%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.70%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.60%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.52%         interpreter  invokespecial  183 invokespecial  (77 bytes) 
  1.50%         interpreter  goto  167 goto  (70 bytes) 
  1.37%         interpreter  areturn  176 areturn  (4 bytes) 
  1.37%         interpreter  invokeinterface  185 invokeinterface  (122 bytes) 
  1.36%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.26%         interpreter  lload  22 lload  (32 bytes) 
  1.24%              kernel  [unknown] (6 bytes) 
  1.23%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.21%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.15%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.15%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.12%         interpreter  invoke return entry points  (112 bytes) 
 53.00%  <...other 770 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.53%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
 11.58%         interpreter  method entry point (kind = zerolocals)  
  5.62%         interpreter  invokevirtual  182 invokevirtual  
  4.29%         interpreter  invoke return entry points  
  3.35%         interpreter  ireturn  172 ireturn  
  2.93%         interpreter  invokespecial  183 invokespecial  
  2.93%         interpreter  invokeinterface  185 invokeinterface  
  2.59%         interpreter  areturn  176 areturn  
  2.52%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.49%         interpreter  invokestatic  184 invokestatic  
  2.46%              kernel  [unknown] 
  2.12%         interpreter  method entry point (kind = accessor)  
  2.11%         interpreter  goto  167 goto  
  1.88%         interpreter  getstatic  178 getstatic  
  1.65%         interpreter  checkcast  192 checkcast  
  1.40%         interpreter  fast_aload_0  220 fast_aload_0  
  1.33%         interpreter  lload  22 lload  
  1.31%         interpreter  ifeq  153 ifeq  
  1.27%         interpreter  return  177 return  
  1.19%         interpreter  new  187 new  
 32.45%  <...other 323 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 75.75%         interpreter
 13.67%               JVMCI
  6.93%           libjvm.so
  2.46%              kernel
  0.38%       perf-6303.map
  0.29%        libc-2.28.so
  0.26%             Unknown
  0.13%  libpthread-2.28.so
  0.04%      hsdis-amd64.so
  0.03%        runtime stub
  0.03%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:LoopUnrollLimit=1 -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 87.50% complete, ETA 00:00:38
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 146.234 ms/op
# Warmup Iteration   2: 154.679 ms/op
# Warmup Iteration   3: 175.737 ms/op
# Warmup Iteration   4: 177.476 ms/op
# Warmup Iteration   5: 175.667 ms/op
Iteration   1: 160.665 ms/op
Iteration   2: 155.619 ms/op
Iteration   3: 1.202 ms/op
Iteration   4: 0.772 ms/op
Iteration   5: 0.773 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 91.67% complete, ETA 00:00:25
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 146.650 ms/op
# Warmup Iteration   2: 157.365 ms/op
# Warmup Iteration   3: 159.889 ms/op
# Warmup Iteration   4: 165.541 ms/op
# Warmup Iteration   5: 167.422 ms/op
Iteration   1: 164.612 ms/op
Iteration   2: 159.757 ms/op
Iteration   3: 0.940 ms/op
Iteration   4: 0.821 ms/op
Iteration   5: 0.824 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 95.83% complete, ETA 00:00:12
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 155.929 ms/op
# Warmup Iteration   2: 162.716 ms/op
# Warmup Iteration   3: 152.836 ms/op
# Warmup Iteration   4: 156.316 ms/op
# Warmup Iteration   5: 157.319 ms/op
Iteration   1: 158.673 ms/op
Iteration   2: 9.436 ms/op
Iteration   3: 0.798 ms/op
Iteration   4: 0.800 ms/op
Iteration   5: 0.795 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline":
  54.433 ±(99.9%) 82.552 ms/op [Average]
  (min, avg, max) = (0.772, 54.433, 164.612), stdev = 77.219
  CI (99.9%): [≈ 0, 136.985] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·asm":
PrintAssembly processed: 49929 total address lines.
Perf output processed (skipped 5.993 seconds):
 Column 1: cycles (15706 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007fbd880c6c69: cmp    r10,r14
             0x00007fbd880c6c6c: je     0x00007fbd880c6cb1  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007fbd880c6c72: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007fbd880c6c75: mov    r11,rax
             0x00007fbd880c6c78: mov    rax,r14
         ╭   0x00007fbd880c6c7b: jmp    0x00007fbd880c6c8c  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.62%  │↗  0x00007fbd880c6c80: test   DWORD PTR [rip+0xb1d1380],eax        # 0x00007fbd93298006
         ││                                                ;   {poll}
  5.11%  ││  0x00007fbd880c6c86: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.34%  ││  0x00007fbd880c6c89: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.97%  ↘│  0x00007fbd880c6c8c: mov    r8,rax
  0.60%   │  0x00007fbd880c6c8f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  4.98%   │  0x00007fbd880c6c93: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  1.26%   │  0x00007fbd880c6c96: cmp    r10,rax
          ╰  0x00007fbd880c6c99: jne    0x00007fbd880c6c80  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007fbd880c6c9b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007fbd880c6c9e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fbd880c6ca3: add    rsp,0x18
             0x00007fbd880c6ca7: test   DWORD PTR [rip+0xb1d1359],eax        # 0x00007fbd93298006
                                                           ;   {poll_return}
             0x00007fbd880c6cad: vzeroupper 
....................................................................................................
 13.88%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.88%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  3.83%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.17%         interpreter  lstore  55 lstore  (30 bytes) 
  3.16%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.03%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.98%         interpreter  lload  22 lload  (32 bytes) 
  2.27%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.92%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.88%         interpreter  goto  167 goto  (117 bytes) 
  1.78%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.71%         interpreter  invokevirtual  182 invokevirtual  (114 bytes) 
  1.45%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.37%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.27%         interpreter  areturn  176 areturn  (4 bytes) 
  1.25%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.14%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
  1.13%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.10%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.04%         interpreter  ifeq  153 ifeq  (36 bytes) 
  1.03%         interpreter  fast_aload_0  220 fast_aload_0  (22 bytes) 
 49.63%  <...other 728 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.88%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
 10.40%         interpreter  method entry point (kind = zerolocals)  
  5.02%         interpreter  invokevirtual  182 invokevirtual  
  3.42%         interpreter  ireturn  172 ireturn  
  3.17%         interpreter  lstore  55 lstore  
  3.11%         interpreter  invokespecial  183 invokespecial  
  3.08%         interpreter  invoke return entry points  
  3.04%         interpreter  lload  22 lload  
  2.60%         interpreter  goto  167 goto  
  2.49%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.33%         interpreter  lreturn  173 lreturn  
  2.17%         interpreter  areturn  176 areturn  
  2.15%              kernel  [unknown] 
  2.15%         interpreter  checkcast  192 checkcast  
  2.13%         interpreter  method entry point (kind = accessor)  
  1.94%         interpreter  getstatic  178 getstatic  
  1.82%         interpreter  invokeinterface  185 invokeinterface  
  1.70%         interpreter  ifeq  153 ifeq  
  1.32%         interpreter  fast_aload_0  220 fast_aload_0  
  1.17%         interpreter  iconst_0  3 iconst_0  
 30.91%  <...other 295 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 76.65%         interpreter
 14.12%               JVMCI
  6.21%           libjvm.so
  2.15%              kernel
  0.26%        libc-2.28.so
  0.20%             Unknown
  0.18%  libpthread-2.28.so
  0.08%       perf-6349.map
  0.07%      hsdis-amd64.so
  0.03%          libjava.so
  0.03%        runtime stub
  0.01%              [vdso]
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49921 total address lines.
Perf output processed (skipped 6.127 seconds):
 Column 1: cycles (15814 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007fb2300c7769: cmp    r10,r14
             0x00007fb2300c776c: je     0x00007fb2300c77b1  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007fb2300c7772: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007fb2300c7775: mov    r11,rax
             0x00007fb2300c7778: mov    rax,r14
         ╭   0x00007fb2300c777b: jmp    0x00007fb2300c778c  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.74%  │↗  0x00007fb2300c7780: test   DWORD PTR [rip+0xd263880],eax        # 0x00007fb23d32b006
         ││                                                ;   {poll}
  5.10%  ││  0x00007fb2300c7786: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.44%  ││  0x00007fb2300c7789: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  1.05%  ↘│  0x00007fb2300c778c: mov    r8,rax
  0.71%   │  0x00007fb2300c778f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  5.68%   │  0x00007fb2300c7793: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  1.22%   │  0x00007fb2300c7796: cmp    r10,rax
          ╰  0x00007fb2300c7799: jne    0x00007fb2300c7780  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007fb2300c779b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007fb2300c779e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fb2300c77a3: add    rsp,0x18
             0x00007fb2300c77a7: test   DWORD PTR [rip+0xd263859],eax        # 0x00007fb23d32b006
                                                           ;   {poll_return}
             0x00007fb2300c77ad: vzeroupper 
....................................................................................................
 14.95%  <total for region 1>

....[Hottest Regions]...............................................................................
 14.95%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  3.61%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.17%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.06%         interpreter  lstore  55 lstore  (30 bytes) 
  2.73%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.71%         interpreter  lload  22 lload  (36 bytes) 
  2.24%         interpreter  ireturn  172 ireturn  (0 bytes) 
  2.06%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.04%         interpreter  goto  167 goto  (70 bytes) 
  1.81%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.50%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.47%         interpreter  areturn  176 areturn  (4 bytes) 
  1.30%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.29%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.10%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.09%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.07%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.04%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.02%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.02%         interpreter  invokeinterface  185 invokeinterface  (146 bytes) 
 49.71%  <...other 683 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 14.95%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
  9.82%         interpreter  method entry point (kind = zerolocals)  
  4.78%         interpreter  invokevirtual  182 invokevirtual  
  3.65%         interpreter  ireturn  172 ireturn  
  3.06%         interpreter  lstore  55 lstore  
  2.88%         interpreter  invokespecial  183 invokespecial  
  2.81%         interpreter  invoke return entry points  
  2.76%         interpreter  lload  22 lload  
  2.76%         interpreter  goto  167 goto  
  2.57%         interpreter  areturn  176 areturn  
  2.30%         interpreter  method entry point (kind = accessor)  
  2.29%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.26%         interpreter  lreturn  173 lreturn  
  2.09%         interpreter  checkcast  192 checkcast  
  2.08%         interpreter  invokeinterface  185 invokeinterface  
  1.73%              kernel  [unknown] 
  1.71%         interpreter  getstatic  178 getstatic  
  1.52%         interpreter  ifeq  153 ifeq  
  1.18%         interpreter  fast_aload_0  220 fast_aload_0  
  1.14%         interpreter  aload_1  43 aload_1  
 31.66%  <...other 289 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 75.89%         interpreter
 15.17%               JVMCI
  6.18%           libjvm.so
  1.73%              kernel
  0.31%             Unknown
  0.26%        libc-2.28.so
  0.17%       perf-6388.map
  0.15%  libpthread-2.28.so
  0.06%      hsdis-amd64.so
  0.04%        runtime stub
  0.01%                    
  0.01%          libjava.so
  0.01%              [vdso]
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49922 total address lines.
Perf output processed (skipped 6.256 seconds):
 Column 1: cycles (15388 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007f25b7a6e7a9: cmp    r10,r14
             0x00007f25b7a6e7ac: je     0x00007f25b7a6e7f1  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f25b7a6e7b2: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007f25b7a6e7b5: mov    r11,rax
             0x00007f25b7a6e7b8: mov    rax,r14
         ╭   0x00007f25b7a6e7bb: jmp    0x00007f25b7a6e7cc  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.76%  │↗  0x00007f25b7a6e7c0: test   DWORD PTR [rip+0x9f10840],eax        # 0x00007f25c197f006
         ││                                                ;   {poll}
  5.78%  ││  0x00007f25b7a6e7c6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.34%  ││  0x00007f25b7a6e7c9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  1.14%  ↘│  0x00007f25b7a6e7cc: mov    r8,rax
  0.80%   │  0x00007f25b7a6e7cf: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  6.15%   │  0x00007f25b7a6e7d3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  1.60%   │  0x00007f25b7a6e7d6: cmp    r10,rax
          ╰  0x00007f25b7a6e7d9: jne    0x00007f25b7a6e7c0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f25b7a6e7db: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007f25b7a6e7de: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f25b7a6e7e3: add    rsp,0x18
             0x00007f25b7a6e7e7: test   DWORD PTR [rip+0x9f10819],eax        # 0x00007f25c197f006
                                                           ;   {poll_return}
             0x00007f25b7a6e7ed: vzeroupper 
....................................................................................................
 16.56%  <total for region 1>

....[Hottest Regions]...............................................................................
 16.56%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  3.84%         interpreter  method entry point (kind = zerolocals)  (142 bytes) 
  3.35%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.94%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.61%         interpreter  lload  22 lload  (32 bytes) 
  2.60%         interpreter  lstore  55 lstore  (21 bytes) 
  2.18%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.07%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.83%         interpreter  goto  167 goto  (79 bytes) 
  1.44%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.34%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.32%         interpreter  lreturn  173 lreturn  (8 bytes) 
  1.32%         interpreter  areturn  176 areturn  (4 bytes) 
  1.22%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.18%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.12%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.06%         interpreter  iconst_0  3 iconst_0  (20 bytes) 
  1.05%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.03%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.02%         interpreter  ireturn  172 ireturn  (37 bytes) 
 48.91%  <...other 665 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 16.56%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
 10.46%         interpreter  method entry point (kind = zerolocals)  
  5.00%         interpreter  invokevirtual  182 invokevirtual  
  3.41%         interpreter  ireturn  172 ireturn  
  2.98%         interpreter  invokespecial  183 invokespecial  
  2.95%         interpreter  invoke return entry points  
  2.70%         interpreter  lload  22 lload  
  2.60%         interpreter  lstore  55 lstore  
  2.50%         interpreter  goto  167 goto  
  2.42%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.33%         interpreter  areturn  176 areturn  
  2.32%         interpreter  method entry point (kind = accessor)  
  2.01%         interpreter  invokeinterface  185 invokeinterface  
  2.01%         interpreter  checkcast  192 checkcast  
  1.94%              kernel  [unknown] 
  1.78%         interpreter  lreturn  173 lreturn  
  1.75%         interpreter  getstatic  178 getstatic  
  1.42%         interpreter  ifeq  153 ifeq  
  1.27%         interpreter  fast_aload_0  220 fast_aload_0  
  1.12%         interpreter  aload_1  43 aload_1  
 30.47%  <...other 282 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 74.58%         interpreter
 16.84%               JVMCI
  5.77%           libjvm.so
  1.94%              kernel
  0.34%             Unknown
  0.20%        libc-2.28.so
  0.13%  libpthread-2.28.so
  0.11%       perf-6428.map
  0.04%        runtime stub
  0.03%      hsdis-amd64.so
  0.03%           libzip.so
  0.01%          libjava.so
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:05:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (factor)  (param)  Mode  Cnt    Score     Error  Units

HighOrderFunctionKtBenchmark.sumOfSquares_lambda                                1  1000000  avgt   15  170.074 ± 389.971  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·asm                           1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline                         1  1000000  avgt   15   53.146 ±  70.971  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·asm                    1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda                       1  1000000  avgt   15  384.640 ± 511.575  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·asm                  1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline                1  1000000  avgt   15   56.931 ±  75.921  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·asm           1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef                             1  1000000  avgt   15  336.679 ± 534.146  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·asm                        1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline                      1  1000000  avgt   15   54.433 ±  82.552  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·asm                 1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction                     1  1000000  avgt   15  256.226 ± 425.201  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·asm                1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline              1  1000000  avgt   15    2.047 ±   3.482  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·asm         1  1000000  avgt           NaN              ---

Note:
    - To simplify things for analysis, we invoke this with -XX:LoopUnrollLimit=1 -XX:-TieredCompilation: this will block loop unrolling from complicating
      the disssembly, and disabling tiered compilation would guarantee compilation with the final optimizing compiler.
    - We don’t care about performance numbers but the optimizations.