# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction
# Parameters: (factor = 1, param = 1000000)

# Run progress: 0.00% complete, ETA 00:04:00
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1298.546 ms/op
# Warmup Iteration   2: 954.041 ms/op
# Warmup Iteration   3: 916.438 ms/op
# Warmup Iteration   4: 919.953 ms/op
# Warmup Iteration   5: 846.302 ms/op
Iteration   1: 1.061 ms/op
Iteration   2: 0.840 ms/op
Iteration   3: 0.930 ms/op
Iteration   4: 0.899 ms/op
Iteration   5: 0.997 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 4.17% complete, ETA 00:05:57
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1022.468 ms/op
# Warmup Iteration   2: 1005.695 ms/op
# Warmup Iteration   3: 1008.098 ms/op
# Warmup Iteration   4: 1034.119 ms/op
# Warmup Iteration   5: 1033.663 ms/op
Iteration   1: 1020.015 ms/op
Iteration   2: 626.880 ms/op
Iteration   3: 5.785 ms/op
Iteration   4: 0.844 ms/op
Iteration   5: 0.834 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 8.33% complete, ETA 00:05:12
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 889.747 ms/op
# Warmup Iteration   2: 1001.587 ms/op
# Warmup Iteration   3: 926.331 ms/op
# Warmup Iteration   4: 960.793 ms/op
# Warmup Iteration   5: 557.460 ms/op
Iteration   1: 2.359 ms/op
Iteration   2: 0.792 ms/op
Iteration   3: 0.804 ms/op
Iteration   4: 0.792 ms/op
Iteration   5: 0.792 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction":
  110.975 ±(99.9%) 319.280 ms/op [Average]
  (min, avg, max) = (0.792, 110.975, 1020.015), stdev = 298.655
  CI (99.9%): [≈ 0, 430.255] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·asm":
PrintAssembly processed: 56798 total address lines.
Perf output processed (skipped 9.603 seconds):
 Column 1: cycles (14862 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007fe9980ca5d6: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fe9980ca5d9: mov    r11,rax
             0x00007fe9980ca5dc: mov    rax,r14
         ╭   0x00007fe9980ca5df: jmp    0x00007fe9980ca5fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fe9980ca5e4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007fe9980ca5ea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.08%  │↗  0x00007fe9980ca5f0: test   DWORD PTR [rip+0xd4e8a10],eax        # 0x00007fe9a55b3006
         ││                                                ;   {poll}
 10.10%  ││  0x00007fe9980ca5f6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.63%  ││  0x00007fe9980ca5f9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.51%  ↘│  0x00007fe9980ca5fc: mov    r8,rax
  0.98%   │  0x00007fe9980ca5ff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  9.47%   │  0x00007fe9980ca603: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.93%   │  0x00007fe9980ca606: cmp    r10,rax
          ╰  0x00007fe9980ca609: jne    0x00007fe9980ca5f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fe9980ca60b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fe9980ca60e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fe9980ca613: add    rsp,0x18
             0x00007fe9980ca617: test   DWORD PTR [rip+0xd4e89e9],eax        # 0x00007fe9a55b3006
                                                           ;   {poll_return}
             0x00007fe9980ca61d: vzeroupper 
....................................................................................................
 25.71%  <total for region 1>

....[Hottest Regions]...............................................................................
 25.71%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.42%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.38%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.25%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.19%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.01%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.70%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.44%         interpreter  invokevirtual  182 invokevirtual  (39 bytes) 
  1.31%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.29%              kernel  [unknown] (6 bytes) 
  1.22%         interpreter  areturn  176 areturn  (8 bytes) 
  1.10%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.08%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.02%         interpreter  goto  167 goto  (70 bytes) 
  0.99%         interpreter  ireturn  172 ireturn  (37 bytes) 
  0.96%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  0.93%         interpreter  invokevirtual  182 invokevirtual  (253 bytes) 
  0.87%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.83%         interpreter  lload  22 lload  (32 bytes) 
  0.77%         interpreter  invoke return entry points  (63 bytes) 
 45.55%  <...other 789 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 25.71%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  9.25%         interpreter  method entry point (kind = zerolocals)  
  6.08%         interpreter  invokevirtual  182 invokevirtual  
  3.88%              kernel  [unknown] 
  3.34%         interpreter  ireturn  172 ireturn  
  3.30%         interpreter  invoke return entry points  
  2.38%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.17%         interpreter  method entry point (kind = accessor)  
  2.13%         interpreter  invokeinterface  185 invokeinterface  
  2.01%         interpreter  areturn  176 areturn  
  1.92%         interpreter  getstatic  178 getstatic  
  1.82%         interpreter  invokespecial  183 invokespecial  
  1.68%         interpreter  invokestatic  184 invokestatic  
  1.46%         interpreter  checkcast  192 checkcast  
  1.43%         interpreter  goto  167 goto  
  1.06%         interpreter  fast_aload_0  220 fast_aload_0  
  1.02%         interpreter  ifeq  153 ifeq  
  0.94%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  0.92%         interpreter  return  177 return  
  0.91%         interpreter  aload_1  43 aload_1  
 26.60%  <...other 287 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 62.12%         interpreter
 26.17%               JVMCI
  6.88%           libjvm.so
  3.88%              kernel
  0.26%        libc-2.28.so
  0.20%  libpthread-2.28.so
  0.20%             Unknown
  0.15%      perf-12412.map
  0.08%      hsdis-amd64.so
  0.04%        runtime stub
  0.03%          libjava.so
....................................................................................................
100.00%  <totals>

PrintAssembly processed: 50052 total address lines.
Perf output processed (skipped 7.056 seconds):
 Column 1: cycles (15838 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007f92c00c93d6: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f92c00c93d9: mov    r11,rax
             0x00007f92c00c93dc: mov    rax,r14
         ╭   0x00007f92c00c93df: jmp    0x00007f92c00c93fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f92c00c93e4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f92c00c93ea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.53%  │↗  0x00007f92c00c93f0: test   DWORD PTR [rip+0xa802c10],eax        # 0x00007f92ca8cc006
         ││                                                ;   {poll}
  4.11%  ││  0x00007f92c00c93f6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.28%  ││  0x00007f92c00c93f9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.67%  ↘│  0x00007f92c00c93fc: mov    r8,rax
  0.44%   │  0x00007f92c00c93ff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.38%   │  0x00007f92c00c9403: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.87%   │  0x00007f92c00c9406: cmp    r10,rax
          ╰  0x00007f92c00c9409: jne    0x00007f92c00c93f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f92c00c940b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f92c00c940e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f92c00c9413: add    rsp,0x18
             0x00007f92c00c9417: test   DWORD PTR [rip+0xa802be9],eax        # 0x00007f92ca8cc006
                                                           ;   {poll_return}
             0x00007f92c00c941d: vzeroupper 
....................................................................................................
 11.27%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.27%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  4.29%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.39%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.35%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.31%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.10%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.08%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.80%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.71%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.53%         interpreter  lload  22 lload  (32 bytes) 
  1.42%         interpreter  goto  167 goto  (79 bytes) 
  1.42%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.40%         interpreter  areturn  176 areturn  (4 bytes) 
  1.29%              kernel  [unknown] (6 bytes) 
  1.22%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.21%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.14%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.08%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.06%         interpreter  invoke return entry points  (112 bytes) 
  1.04%         interpreter  areturn  176 areturn  (23 bytes) 
 53.88%  <...other 728 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.32%         interpreter  method entry point (kind = zerolocals)  
 11.27%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  5.79%         interpreter  invokevirtual  182 invokevirtual  
  3.91%         interpreter  invoke return entry points  
  3.47%         interpreter  ireturn  172 ireturn  
  3.26%         interpreter  invokeinterface  185 invokeinterface  
  2.77%         interpreter  invokespecial  183 invokespecial  
  2.69%         interpreter  areturn  176 areturn  
  2.47%              kernel  [unknown] 
  2.36%         interpreter  method entry point (kind = accessor)  
  2.24%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.14%         interpreter  invokestatic  184 invokestatic  
  2.04%         interpreter  checkcast  192 checkcast  
  1.91%         interpreter  goto  167 goto  
  1.83%         interpreter  getstatic  178 getstatic  
  1.62%         interpreter  lload  22 lload  
  1.45%         interpreter  lreturn  173 lreturn  
  1.42%         interpreter  fast_aload_0  220 fast_aload_0  
  1.36%         interpreter  ifeq  153 ifeq  
  1.35%         interpreter  return  177 return  
 33.31%  <...other 300 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.71%         interpreter
 12.45%               JVMCI
  6.31%           libjvm.so
  2.47%              kernel
  0.27%        libc-2.28.so
  0.27%      perf-12468.map
  0.23%             Unknown
  0.15%  libpthread-2.28.so
  0.06%      hsdis-amd64.so
  0.03%        runtime stub
  0.02%          libjava.so
  0.01%                    
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 56775 total address lines.
Perf output processed (skipped 8.474 seconds):
 Column 1: cycles (14915 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007f53cc0c9616: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f53cc0c9619: mov    r11,rax
             0x00007f53cc0c961c: mov    rax,r14
         ╭   0x00007f53cc0c961f: jmp    0x00007f53cc0c963c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f53cc0c9624: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f53cc0c962a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.91%  │↗  0x00007f53cc0c9630: test   DWORD PTR [rip+0xacd09d0],eax        # 0x00007f53d6d9a006
         ││                                                ;   {poll}
  8.84%  ││  0x00007f53cc0c9636: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.62%  ││  0x00007f53cc0c9639: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.54%  ↘│  0x00007f53cc0c963c: mov    r8,rax
  1.21%   │  0x00007f53cc0c963f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  9.19%   │  0x00007f53cc0c9643: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.84%   │  0x00007f53cc0c9646: cmp    r10,rax
          ╰  0x00007f53cc0c9649: jne    0x00007f53cc0c9630  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f53cc0c964b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f53cc0c964e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f53cc0c9653: add    rsp,0x18
             0x00007f53cc0c9657: test   DWORD PTR [rip+0xacd09a9],eax        # 0x00007f53d6d9a006
                                                           ;   {poll_return}
             0x00007f53cc0c965d: vzeroupper 
....................................................................................................
 24.14%  <total for region 1>

....[Hottest Regions]...............................................................................
 24.14%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.58%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.06%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.37%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.36%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.19%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.04%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.79%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.50%         interpreter  lload  22 lload  (32 bytes) 
  1.37%         interpreter  goto  167 goto  (66 bytes) 
  1.27%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.24%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.20%         interpreter  areturn  176 areturn  (4 bytes) 
  1.19%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.07%         interpreter  ireturn  172 ireturn  (40 bytes) 
  0.84%         interpreter  invokevirtual  182 invokevirtual  (129 bytes) 
  0.80%         interpreter  invoke return entry points  (63 bytes) 
  0.79%         interpreter  checkcast  192 checkcast  (40 bytes) 
  0.78%         interpreter  method entry point (kind = accessor)  (114 bytes) 
  0.77%              kernel  [unknown] (6 bytes) 
 45.65%  <...other 762 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 24.14%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  9.42%         interpreter  method entry point (kind = zerolocals)  
  5.67%         interpreter  invokevirtual  182 invokevirtual  
  3.47%         interpreter  ireturn  172 ireturn  
  3.29%         interpreter  invoke return entry points  
  2.86%              kernel  [unknown] 
  2.51%         interpreter  invokeinterface  185 invokeinterface  
  2.35%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.08%         interpreter  areturn  176 areturn  
  2.06%         interpreter  method entry point (kind = accessor)  
  2.04%         interpreter  invokestatic  184 invokestatic  
  2.00%         interpreter  getstatic  178 getstatic  
  1.89%         interpreter  goto  167 goto  
  1.70%         interpreter  invokespecial  183 invokespecial  
  1.54%         interpreter  lload  22 lload  
  1.46%         interpreter  checkcast  192 checkcast  
  1.06%         interpreter  ifeq  153 ifeq  
  1.03%         interpreter  aload_1  43 aload_1  
  0.92%         interpreter  fast_aload_0  220 fast_aload_0  
  0.86%         interpreter  return  177 return  
 27.65%  <...other 303 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 64.40%         interpreter
 24.75%               JVMCI
  6.86%           libjvm.so
  2.86%              kernel
  0.28%        libc-2.28.so
  0.27%      perf-12512.map
  0.22%  libpthread-2.28.so
  0.21%             Unknown
  0.07%      hsdis-amd64.so
  0.04%        runtime stub
  0.01%          libjava.so
  0.01%              [vdso]
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 12.50% complete, ETA 00:04:57
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 978.491 ms/op
# Warmup Iteration   2: 985.489 ms/op
# Warmup Iteration   3: 973.063 ms/op
# Warmup Iteration   4: 903.826 ms/op
# Warmup Iteration   5: 143.858 ms/op
Iteration   1: 0.853 ms/op
Iteration   2: 0.825 ms/op
Iteration   3: 0.829 ms/op
Iteration   4: 0.838 ms/op
Iteration   5: 0.853 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 16.67% complete, ETA 00:04:48
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1018.882 ms/op
# Warmup Iteration   2: 1001.632 ms/op
# Warmup Iteration   3: 972.599 ms/op
# Warmup Iteration   4: 964.610 ms/op
# Warmup Iteration   5: 1007.392 ms/op
Iteration   1: 576.382 ms/op
Iteration   2: 2.072 ms/op
Iteration   3: 0.842 ms/op
Iteration   4: 0.872 ms/op
Iteration   5: 0.781 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 20.83% complete, ETA 00:04:29
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1067.632 ms/op
# Warmup Iteration   2: 1031.334 ms/op
# Warmup Iteration   3: 1085.036 ms/op
# Warmup Iteration   4: 961.622 ms/op
# Warmup Iteration   5: 912.805 ms/op
Iteration   1: 148.639 ms/op
Iteration   2: 0.903 ms/op
Iteration   3: 0.835 ms/op
Iteration   4: 0.817 ms/op
Iteration   5: 0.868 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline":
  49.147 ±(99.9%) 161.144 ms/op [Average]
  (min, avg, max) = (0.781, 49.147, 576.382), stdev = 150.734
  CI (99.9%): [≈ 0, 210.291] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·asm":
PrintAssembly processed: 57292 total address lines.
Perf output processed (skipped 9.519 seconds):
 Column 1: cycles (14901 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 

             0x00007f0bc40ca016: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007f0bc40ca019: mov    r11,rax
             0x00007f0bc40ca01c: mov    rax,r14
         ╭   0x00007f0bc40ca01f: jmp    0x00007f0bc40ca03c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007f0bc40ca024: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f0bc40ca02a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.19%  │↗  0x00007f0bc40ca030: test   DWORD PTR [rip+0xc72bfd0],eax        # 0x00007f0bd07f6006
         ││                                                ;   {poll}
 10.29%  ││  0x00007f0bc40ca036: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.60%  ││  0x00007f0bc40ca039: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.83%  ↘│  0x00007f0bc40ca03c: mov    r8,rax
  1.10%   │  0x00007f0bc40ca03f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
 10.05%   │  0x00007f0bc40ca043: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  2.15%   │  0x00007f0bc40ca046: cmp    r10,rax
          ╰  0x00007f0bc40ca049: jne    0x00007f0bc40ca030  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007f0bc40ca04b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007f0bc40ca04e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f0bc40ca053: add    rsp,0x18
             0x00007f0bc40ca057: test   DWORD PTR [rip+0xc72bfa9],eax        # 0x00007f0bd07f6006
                                                           ;   {poll_return}
             0x00007f0bc40ca05d: vzeroupper 
....................................................................................................
 27.21%  <total for region 1>

....[Hottest Regions]...............................................................................
 27.21%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 
  3.32%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.07%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.23%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.17%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.15%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (61 bytes) 
  1.60%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.32%         interpreter  areturn  176 areturn  (8 bytes) 
  1.20%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.19%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.18%         interpreter  goto  167 goto  (66 bytes) 
  1.17%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.11%         interpreter  lload  22 lload  (32 bytes) 
  1.09%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.09%         interpreter  invokeinterface  185 invokeinterface  (109 bytes) 
  1.07%         interpreter  aload  25 aload  (31 bytes) 
  0.96%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.93%              kernel  [unknown] (6 bytes) 
  0.89%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  0.88%         interpreter  invokevirtual  182 invokevirtual  (166 bytes) 
 44.16%  <...other 767 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 27.21%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 
  8.82%         interpreter  method entry point (kind = zerolocals)  
  5.53%         interpreter  invokevirtual  182 invokevirtual  
  3.72%         interpreter  ireturn  172 ireturn  
  3.13%         interpreter  invoke return entry points  
  2.81%              kernel  [unknown] 
  2.34%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.19%         interpreter  invokeinterface  185 invokeinterface  
  2.02%         interpreter  method entry point (kind = accessor)  
  1.98%         interpreter  areturn  176 areturn  
  1.98%         interpreter  getstatic  178 getstatic  
  1.73%         interpreter  invokestatic  184 invokestatic  
  1.61%         interpreter  invokespecial  183 invokespecial  
  1.56%         interpreter  goto  167 goto  
  1.36%         interpreter  checkcast  192 checkcast  
  1.25%         interpreter  aload  25 aload  
  1.14%         interpreter  lload  22 lload  
  1.03%         interpreter  aload_1  43 aload_1  
  1.02%         interpreter  ifeq  153 ifeq  
  1.01%         interpreter  return  177 return  
 26.54%  <...other 306 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 62.12%         interpreter
 27.57%               JVMCI
  6.46%           libjvm.so
  2.81%              kernel
  0.30%        libc-2.28.so
  0.21%             Unknown
  0.21%  libpthread-2.28.so
  0.17%      perf-12569.map
  0.07%      hsdis-amd64.so
  0.03%        runtime stub
  0.03%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50655 total address lines.
Perf output processed (skipped 7.765 seconds):
 Column 1: cycles (15490 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 

             0x00007f8c980c9456: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007f8c980c9459: mov    r11,rax
             0x00007f8c980c945c: mov    rax,r14
         ╭   0x00007f8c980c945f: jmp    0x00007f8c980c947c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007f8c980c9464: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f8c980c946a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  0.80%  │↗  0x00007f8c980c9470: test   DWORD PTR [rip+0xb52ab90],eax        # 0x00007f8ca35f4006
         ││                                                ;   {poll}
  6.82%  ││  0x00007f8c980c9476: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.45%  ││  0x00007f8c980c9479: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.17%  ↘│  0x00007f8c980c947c: mov    r8,rax
  0.74%   │  0x00007f8c980c947f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  6.77%   │  0x00007f8c980c9483: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  1.13%   │  0x00007f8c980c9486: cmp    r10,rax
          ╰  0x00007f8c980c9489: jne    0x00007f8c980c9470  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007f8c980c948b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007f8c980c948e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f8c980c9493: add    rsp,0x18
             0x00007f8c980c9497: test   DWORD PTR [rip+0xb52ab69],eax        # 0x00007f8ca35f4006
                                                           ;   {poll_return}
             0x00007f8c980c949d: vzeroupper 
....................................................................................................
 17.88%  <total for region 1>

....[Hottest Regions]...............................................................................
 17.88%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 
  4.02%         interpreter  method entry point (kind = zerolocals)  (174 bytes) 
  3.32%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.16%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.32%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.14%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.68%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.39%         interpreter  lload  22 lload  (32 bytes) 
  1.38%         interpreter  goto  167 goto  (79 bytes) 
  1.34%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.34%         interpreter  invokeinterface  185 invokeinterface  (137 bytes) 
  1.21%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.17%         interpreter  areturn  176 areturn  (4 bytes) 
  1.17%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.13%         interpreter  aload  25 aload  (31 bytes) 
  1.12%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.09%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.05%              kernel  [unknown] (6 bytes) 
  1.01%         interpreter  areturn  176 areturn  (23 bytes) 
  1.00%         interpreter  fast_aload_0  220 fast_aload_0  (22 bytes) 
 50.08%  <...other 690 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 17.88%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 
 10.84%         interpreter  method entry point (kind = zerolocals)  
  5.60%         interpreter  invokevirtual  182 invokevirtual  
  3.75%         interpreter  ireturn  172 ireturn  
  3.71%         interpreter  invoke return entry points  
  2.85%         interpreter  invokeinterface  185 invokeinterface  
  2.33%         interpreter  areturn  176 areturn  
  2.31%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.23%         interpreter  invokespecial  183 invokespecial  
  2.19%         interpreter  method entry point (kind = accessor)  
  2.10%         interpreter  invokestatic  184 invokestatic  
  2.09%              kernel  [unknown] 
  2.02%         interpreter  getstatic  178 getstatic  
  1.99%         interpreter  goto  167 goto  
  1.52%         interpreter  checkcast  192 checkcast  
  1.43%         interpreter  lload  22 lload  
  1.35%         interpreter  aload  25 aload  
  1.34%         interpreter  fast_aload_0  220 fast_aload_0  
  1.23%         interpreter  ifeq  153 ifeq  
  1.11%         interpreter  return  177 return  
 30.12%  <...other 285 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 71.43%         interpreter
 18.65%               JVMCI
  6.87%           libjvm.so
  2.09%              kernel
  0.23%      perf-12608.map
  0.23%             Unknown
  0.20%  libpthread-2.28.so
  0.19%        libc-2.28.so
  0.05%      hsdis-amd64.so
  0.03%        runtime stub
  0.03%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 56302 total address lines.
Perf output processed (skipped 8.916 seconds):
 Column 1: cycles (15256 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 

             0x00007f0ab40c9b96: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
             0x00007f0ab40c9b99: mov    r11,rax
             0x00007f0ab40c9b9c: mov    rax,r14
         ╭   0x00007f0ab40c9b9f: jmp    0x00007f0ab40c9bbc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
         │   0x00007f0ab40c9ba4: nop    WORD PTR [rax+rax*1+0x0]
         │   0x00007f0ab40c9baa: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  0.83%  │↗  0x00007f0ab40c9bb0: test   DWORD PTR [rip+0xc354450],eax        # 0x00007f0ac041e006
         ││                                                ;   {poll}
  8.09%  ││  0x00007f0ab40c9bb6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@67 (line 144)
  0.55%  ││  0x00007f0ab40c9bb9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@33 (line 145)
  1.42%  ↘│  0x00007f0ab40c9bbc: mov    r8,rax
  1.02%   │  0x00007f0ab40c9bbf: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@2 (line 30)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_anonymousFunction$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@42 (line 145)
  8.06%   │  0x00007f0ab40c9bc3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@53 (line 145)
  1.47%   │  0x00007f0ab40c9bc6: cmp    r10,rax
          ╰  0x00007f0ab40c9bc9: jne    0x00007f0ab40c9bb0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@61 (line 144)
             0x00007f0ab40c9bcb: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline@75 (line 147)
             0x00007f0ab40c9bce: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f0ab40c9bd3: add    rsp,0x18
             0x00007f0ab40c9bd7: test   DWORD PTR [rip+0xc354429],eax        # 0x00007f0ac041e006
                                                           ;   {poll_return}
             0x00007f0ab40c9bdd: vzeroupper 
....................................................................................................
 21.44%  <total for region 1>

....[Hottest Regions]...............................................................................
 21.44%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 (22 bytes) 
  3.45%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  3.04%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.49%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.16%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.09%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.78%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.61%         interpreter  goto  167 goto  (116 bytes) 
  1.58%         interpreter  lload  22 lload  (32 bytes) 
  1.40%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.35%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.27%         interpreter  areturn  176 areturn  (4 bytes) 
  1.27%         interpreter  aload  25 aload  (31 bytes) 
  1.26%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.22%              kernel  [unknown] (6 bytes) 
  1.22%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.20%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  0.92%         interpreter  ireturn  172 ireturn  (40 bytes) 
  0.88%         interpreter  invokevirtual  182 invokevirtual  (147 bytes) 
  0.88%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
 47.49%  <...other 761 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 21.44%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_anonymousFunction_inline, version 97 
  9.31%         interpreter  method entry point (kind = zerolocals)  
  5.75%         interpreter  invokevirtual  182 invokevirtual  
  3.41%         interpreter  invoke return entry points  
  3.28%         interpreter  ireturn  172 ireturn  
  3.18%              kernel  [unknown] 
  2.68%         interpreter  invokeinterface  185 invokeinterface  
  2.35%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.27%         interpreter  getstatic  178 getstatic  
  2.18%         interpreter  goto  167 goto  
  2.15%         interpreter  areturn  176 areturn  
  2.12%         interpreter  invokestatic  184 invokestatic  
  2.07%         interpreter  method entry point (kind = accessor)  
  1.78%         interpreter  invokespecial  183 invokespecial  
  1.67%         interpreter  lload  22 lload  
  1.66%         interpreter  checkcast  192 checkcast  
  1.51%         interpreter  aload  25 aload  
  1.25%         interpreter  ifeq  153 ifeq  
  1.07%         interpreter  fast_aload_0  220 fast_aload_0  
  1.00%         interpreter  return  177 return  
 27.86%  <...other 305 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 66.82%         interpreter
 22.03%               JVMCI
  6.92%           libjvm.so
  3.18%              kernel
  0.24%             Unknown
  0.23%        libc-2.28.so
  0.22%      perf-12646.map
  0.19%  libpthread-2.28.so
  0.10%      hsdis-amd64.so
  0.05%        runtime stub
  0.02%          libjava.so
....................................................................................................
100.00%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 25.00% complete, ETA 00:04:15
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1083.748 ms/op
# Warmup Iteration   2: 1071.454 ms/op
# Warmup Iteration   3: 1111.489 ms/op
# Warmup Iteration   4: 1145.969 ms/op
# Warmup Iteration   5: 1171.905 ms/op
Iteration   1: 1140.333 ms/op
Iteration   2: 1110.173 ms/op
Iteration   3: 1196.089 ms/op
Iteration   4: 2.305 ms/op
Iteration   5: 0.879 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 29.17% complete, ETA 00:03:57
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1258.089 ms/op
# Warmup Iteration   2: 1065.167 ms/op
# Warmup Iteration   3: 1119.746 ms/op
# Warmup Iteration   4: 1144.327 ms/op
# Warmup Iteration   5: 1159.209 ms/op
Iteration   1: 1158.150 ms/op
Iteration   2: 272.656 ms/op
Iteration   3: 1.654 ms/op
Iteration   4: 0.903 ms/op
Iteration   5: 0.871 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 33.33% complete, ETA 00:03:41
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1145.999 ms/op
# Warmup Iteration   2: 1047.642 ms/op
# Warmup Iteration   3: 1070.661 ms/op
# Warmup Iteration   4: 1109.136 ms/op
# Warmup Iteration   5: 1098.588 ms/op
Iteration   1: 1139.055 ms/op
Iteration   2: 1173.115 ms/op
Iteration   3: 207.602 ms/op
Iteration   4: 1.711 ms/op
Iteration   5: 0.849 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda":
  493.756 ±(99.9%) 601.975 ms/op [Average]
  (min, avg, max) = (0.849, 493.756, 1196.089), stdev = 563.088
  CI (99.9%): [≈ 0, 1095.731] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·asm":
PrintAssembly processed: 49123 total address lines.
Perf output processed (skipped 6.445 seconds):
 Column 1: cycles (16309 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  6.84%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (20 bytes) 
  4.83%         interpreter  method entry point (kind = zerolocals)  (139 bytes) 
  4.05%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.55%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.24%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.65%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.51%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  2.09%         interpreter  lreturn  173 lreturn  (8 bytes) 
  1.86%         interpreter  new  187 new  (199 bytes) 
  1.61%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.53%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.35%              kernel  [unknown] (6 bytes) 
  1.26%         interpreter  invokeinterface  185 invokeinterface  (122 bytes) 
  1.24%         interpreter  areturn  176 areturn  (23 bytes) 
  1.23%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.22%         interpreter  invoke return entry points  (112 bytes) 
  1.20%         interpreter  areturn  176 areturn  (8 bytes) 
  1.18%         interpreter  fast_aload_0  220 fast_aload_0  (31 bytes) 
  1.18%         interpreter  ldc2_w  20 ldc2_w  (116 bytes) 
  1.17%         interpreter  getstatic  178 getstatic  (99 bytes) 
 54.21%  <...other 790 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.74%         interpreter  method entry point (kind = zerolocals)  
  6.84%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
  6.04%         interpreter  invokevirtual  182 invokevirtual  
  4.67%         interpreter  ireturn  172 ireturn  
  4.37%         interpreter  invoke return entry points  
  3.33%         interpreter  invokespecial  183 invokespecial  
  3.09%              kernel  [unknown] 
  2.84%         interpreter  method entry point (kind = accessor)  
  2.72%         interpreter  areturn  176 areturn  
  2.69%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.67%         interpreter  invokeinterface  185 invokeinterface  
  2.31%         interpreter  lreturn  173 lreturn  
  2.06%         interpreter  invokestatic  184 invokestatic  
  1.93%         interpreter  getstatic  178 getstatic  
  1.89%         interpreter  checkcast  192 checkcast  
  1.89%         interpreter  new  187 new  
  1.55%         interpreter  return  177 return  
  1.51%         interpreter  fast_aload_0  220 fast_aload_0  
  1.34%         interpreter  goto  167 goto  
  1.20%         interpreter  ifeq  153 ifeq  
 32.31%  <...other 320 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 81.24%         interpreter
  7.99%               JVMCI
  6.82%           libjvm.so
  3.09%              kernel
  0.25%             Unknown
  0.21%        libc-2.28.so
  0.17%  libpthread-2.28.so
  0.16%      perf-12701.map
  0.03%        runtime stub
  0.03%      hsdis-amd64.so
  0.02%          libjava.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50128 total address lines.
Perf output processed (skipped 7.713 seconds):
 Column 1: cycles (15795 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fa81fc7f7dc: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fa81fc7f7df: mov    r8,r11
             0x00007fa81fc7f7e2: mov    r11,r14
         ╭   0x00007fa81fc7f7e5: jmp    0x00007fa81fc7f7fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fa81fc7f7ea: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.01%  │↗  0x00007fa81fc7f7f0: test   DWORD PTR [rip+0x9d73810],eax        # 0x00007fa8299f3006
         ││                                                ;   {poll}
  0.58%  ││  0x00007fa81fc7f7f6: inc    r11                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  3.77%  ││  0x00007fa81fc7f7f9: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  2.37%  ↘│  0x00007fa81fc7f7fc: mov    r9,r11
  0.01%   │  0x00007fa81fc7f7ff: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@2 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  0.40%   │  0x00007fa81fc7f803: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@11 (line 75)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_capturingLambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  3.64%   │  0x00007fa81fc7f807: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  2.56%   │  0x00007fa81fc7f80a: cmp    r10,r11
          ╰  0x00007fa81fc7f80d: jne    0x00007fa81fc7f7f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fa81fc7f80f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fa81fc7f812: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fa81fc7f817: add    rsp,0x18
             0x00007fa81fc7f81b: test   DWORD PTR [rip+0x9d737e5],eax        # 0x00007fa8299f3006
                                                           ;   {poll_return}
             0x00007fa81fc7f821: vzeroupper 
....................................................................................................
 13.35%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.35%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 
  3.68%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.46%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.08%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.30%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  2.25%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.80%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.51%         interpreter  goto  167 goto  (66 bytes) 
  1.45%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.41%         interpreter  lload  22 lload  (32 bytes) 
  1.41%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.33%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.30%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.20%         interpreter  areturn  176 areturn  (8 bytes) 
  1.13%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.11%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.06%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.06%         interpreter  areturn  176 areturn  (23 bytes) 
  1.05%         interpreter  method entry point (kind = accessor)  (115 bytes) 
  1.05%         interpreter  invokevirtual  182 invokevirtual  (171 bytes) 
 54.00%  <...other 784 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.35%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
 10.56%         interpreter  method entry point (kind = zerolocals)  
  6.03%         interpreter  invokevirtual  182 invokevirtual  
  4.12%         interpreter  invoke return entry points  
  3.53%         interpreter  ireturn  172 ireturn  
  3.16%         interpreter  invokeinterface  185 invokeinterface  
  2.67%         interpreter  method entry point (kind = accessor)  
  2.54%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.53%         interpreter  invokespecial  183 invokespecial  
  2.51%         interpreter  areturn  176 areturn  
  2.31%         interpreter  invokestatic  184 invokestatic  
  2.04%              kernel  [unknown] 
  2.04%         interpreter  checkcast  192 checkcast  
  2.01%         interpreter  getstatic  178 getstatic  
  2.01%         interpreter  goto  167 goto  
  1.55%         interpreter  lload  22 lload  
  1.39%         interpreter  ifeq  153 ifeq  
  1.37%         interpreter  fast_aload_0  220 fast_aload_0  
  1.11%         interpreter  new  187 new  
  1.08%         interpreter  aload_1  43 aload_1  
 32.09%  <...other 329 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 75.42%         interpreter
 14.40%               JVMCI
  7.17%           libjvm.so
  2.04%              kernel
  0.21%             Unknown
  0.20%        libc-2.28.so
  0.20%      perf-12752.map
  0.18%  libpthread-2.28.so
  0.07%      hsdis-amd64.so
  0.07%        runtime stub
  0.02%          libjava.so
  0.01%              [vdso]
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49187 total address lines.
Perf output processed (skipped 6.392 seconds):
 Column 1: cycles (16063 events)

WARNING: No hottest code region above the threshold (10.00%) for disassembly.
Use "hotThreshold" profiler option to lower the filter threshold.

....[Hottest Regions]...............................................................................
  7.82%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 (26 bytes) 
  3.90%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.76%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.64%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.99%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.27%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (69 bytes) 
  2.23%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  1.76%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.67%         interpreter  lload  22 lload  (32 bytes) 
  1.66%         interpreter  areturn  176 areturn  (8 bytes) 
  1.60%         interpreter  goto  167 goto  (70 bytes) 
  1.49%         interpreter  invokeinterface  185 invokeinterface  (100 bytes) 
  1.46%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.28%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.23%         interpreter  new  187 new  (199 bytes) 
  1.21%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.14%         interpreter  areturn  176 areturn  (23 bytes) 
  1.11%         interpreter  invoke return entry points  (112 bytes) 
  1.10%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.08%         interpreter  invoke return entry points  (105 bytes) 
 55.59%  <...other 791 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.59%         interpreter  method entry point (kind = zerolocals)  
  7.82%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 98 
  5.70%         interpreter  invokevirtual  182 invokevirtual  
  4.54%         interpreter  invoke return entry points  
  4.31%         interpreter  ireturn  172 ireturn  
  3.05%         interpreter  areturn  176 areturn  
  3.04%         interpreter  invokeinterface  185 invokeinterface  
  3.01%         interpreter  invokespecial  183 invokespecial  
  2.76%         interpreter  method entry point (kind = accessor)  
  2.45%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.33%         interpreter  invokestatic  184 invokestatic  
  2.14%         interpreter  goto  167 goto  
  2.13%              kernel  [unknown] 
  1.92%         interpreter  checkcast  192 checkcast  
  1.80%         interpreter  getstatic  178 getstatic  
  1.77%         interpreter  lload  22 lload  
  1.49%         interpreter  return  177 return  
  1.49%         interpreter  fast_aload_0  220 fast_aload_0  
  1.41%         interpreter  ifeq  153 ifeq  
  1.26%         interpreter  new  187 new  
 33.97%  <...other 332 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 80.84%         interpreter
  9.25%               JVMCI
  6.73%           libjvm.so
  2.13%              kernel
  0.32%             Unknown
  0.26%        libc-2.28.so
  0.18%  libpthread-2.28.so
  0.17%      perf-12815.map
  0.08%      hsdis-amd64.so
  0.04%        runtime stub
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 37.50% complete, ETA 00:03:25
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 138.273 ms/op
# Warmup Iteration   2: 141.789 ms/op
# Warmup Iteration   3: 144.369 ms/op
# Warmup Iteration   4: 148.913 ms/op
# Warmup Iteration   5: 158.785 ms/op
Iteration   1: 147.486 ms/op
Iteration   2: 144.755 ms/op
Iteration   3: 2.849 ms/op
Iteration   4: 0.830 ms/op
Iteration   5: 0.859 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 41.67% complete, ETA 00:03:08
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 145.245 ms/op
# Warmup Iteration   2: 138.418 ms/op
# Warmup Iteration   3: 149.209 ms/op
# Warmup Iteration   4: 149.773 ms/op
# Warmup Iteration   5: 153.638 ms/op
Iteration   1: 153.590 ms/op
Iteration   2: 152.975 ms/op
Iteration   3: 4.350 ms/op
Iteration   4: 0.880 ms/op
Iteration   5: 0.918 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 45.83% complete, ETA 00:02:53
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 150.221 ms/op
# Warmup Iteration   2: 139.451 ms/op
# Warmup Iteration   3: 149.604 ms/op
# Warmup Iteration   4: 157.718 ms/op
# Warmup Iteration   5: 151.478 ms/op
Iteration   1: 151.831 ms/op
Iteration   2: 134.966 ms/op
Iteration   3: 9.617 ms/op
Iteration   4: 0.954 ms/op
Iteration   5: 0.849 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline":
  60.514 ±(99.9%) 78.851 ms/op [Average]
  (min, avg, max) = (0.830, 60.514, 153.590), stdev = 73.757
  CI (99.9%): [≈ 0, 139.364] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·asm":
PrintAssembly processed: 48703 total address lines.
Perf output processed (skipped 6.330 seconds):
 Column 1: cycles (15162 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f253c0c6a30: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007f253c0c6a33: mov    r8,rax
             0x00007f253c0c6a36: mov    rax,r14
         ╭   0x00007f253c0c6a39: jmp    0x00007f253c0c6a4c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007f253c0c6a3e: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  0.02%  │↗  0x00007f253c0c6a40: test   DWORD PTR [rip+0xc7db5c0],eax        # 0x00007f25488a2006
         ││                                                ;   {poll}
  0.88%  ││  0x00007f253c0c6a46: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
         ││  0x00007f253c0c6a49: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  5.06%  ↘│  0x00007f253c0c6a4c: mov    r9,rax
          │  0x00007f253c0c6a4f: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  0.84%   │  0x00007f253c0c6a53: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.09%   │  0x00007f253c0c6a57: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  5.44%   │  0x00007f253c0c6a5a: cmp    r10,rax
          ╰  0x00007f253c0c6a5d: jne    0x00007f253c0c6a40  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f253c0c6a5f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007f253c0c6a62: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f253c0c6a67: add    rsp,0x18
             0x00007f253c0c6a6b: test   DWORD PTR [rip+0xc7db595],eax        # 0x00007f25488a2006
                                                           ;   {poll_return}
             0x00007f253c0c6a71: vzeroupper 
....................................................................................................
 12.34%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.34%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 (26 bytes) 
  6.05%         interpreter  lload  22 lload  (32 bytes) 
  4.54%         interpreter  lstore  55 lstore  (21 bytes) 
  3.69%         interpreter  method entry point (kind = zerolocals)  (134 bytes) 
  3.31%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.39%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.28%         interpreter  ireturn  172 ireturn  (4 bytes) 
  2.14%         interpreter  goto  167 goto  (83 bytes) 
  2.10%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.10%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  1.56%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.29%         interpreter  lmul  105 lmul  (20 bytes) 
  1.29%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.27%              kernel  [unknown] (6 bytes) 
  1.27%         interpreter  ladd  97 ladd  (16 bytes) 
  1.26%         interpreter  areturn  176 areturn  (4 bytes) 
  1.17%         interpreter  lcmp  148 lcmp  (29 bytes) 
  1.05%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.03%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.01%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
 46.86%  <...other 704 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.34%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 88 
  9.69%         interpreter  method entry point (kind = zerolocals)  
  6.07%         interpreter  lload  22 lload  
  5.22%         interpreter  invokevirtual  182 invokevirtual  
  4.54%         interpreter  lstore  55 lstore  
  3.61%         interpreter  ireturn  172 ireturn  
  3.00%         interpreter  goto  167 goto  
  2.71%         interpreter  invoke return entry points  
  2.49%         interpreter  method entry point (kind = accessor)  
  2.47%              kernel  [unknown] 
  2.32%         interpreter  areturn  176 areturn  
  2.27%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.15%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  1.88%         interpreter  invokeinterface  185 invokeinterface  
  1.77%         interpreter  invokespecial  183 invokespecial  
  1.68%         interpreter  getstatic  178 getstatic  
  1.53%         interpreter  ifeq  153 ifeq  
  1.29%         interpreter  lmul  105 lmul  
  1.27%         interpreter  ladd  97 ladd  
  1.17%         interpreter  checkcast  192 checkcast  
 30.52%  <...other 287 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 78.13%         interpreter
 12.57%               JVMCI
  5.95%           libjvm.so
  2.47%              kernel
  0.26%        libc-2.28.so
  0.23%             Unknown
  0.14%  libpthread-2.28.so
  0.14%      perf-12860.map
  0.05%      hsdis-amd64.so
  0.03%        runtime stub
  0.01%           libzip.so
  0.01%          libjava.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 48725 total address lines.
Perf output processed (skipped 6.045 seconds):
 Column 1: cycles (15438 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f98e00c69b0: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007f98e00c69b3: mov    r8,rax
             0x00007f98e00c69b6: mov    rax,r14
         ╭   0x00007f98e00c69b9: jmp    0x00007f98e00c69cc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007f98e00c69be: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  0.08%  │↗  0x00007f98e00c69c0: test   DWORD PTR [rip+0xb792640],eax        # 0x00007f98eb859006
         ││                                                ;   {poll}
  0.70%  ││  0x00007f98e00c69c6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
  0.01%  ││  0x00007f98e00c69c9: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  4.70%  ↘│  0x00007f98e00c69cc: mov    r9,rax
  0.03%   │  0x00007f98e00c69cf: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  0.65%   │  0x00007f98e00c69d3: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.31%   │  0x00007f98e00c69d7: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  5.26%   │  0x00007f98e00c69da: cmp    r10,rax
          ╰  0x00007f98e00c69dd: jne    0x00007f98e00c69c0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f98e00c69df: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007f98e00c69e2: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f98e00c69e7: add    rsp,0x18
             0x00007f98e00c69eb: test   DWORD PTR [rip+0xb792615],eax        # 0x00007f98eb859006
                                                           ;   {poll_return}
             0x00007f98e00c69f1: vzeroupper 
....................................................................................................
 11.74%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.74%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (26 bytes) 
  6.13%         interpreter  lload  22 lload  (32 bytes) 
  4.50%         interpreter  lstore  55 lstore  (26 bytes) 
  3.69%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.30%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.66%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.21%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.20%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  2.03%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.00%         interpreter  goto  167 goto  (70 bytes) 
  1.58%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.44%         interpreter  lmul  105 lmul  (20 bytes) 
  1.37%         interpreter  ladd  97 ladd  (16 bytes) 
  1.31%         interpreter  ireturn  172 ireturn  (104 bytes) 
  1.24%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
  1.24%         interpreter  areturn  176 areturn  (8 bytes) 
  1.14%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.12%         interpreter  lconst_1  10 lconst_1  (37 bytes) 
  1.11%         interpreter  lcmp  148 lcmp  (29 bytes) 
  1.11%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
 46.86%  <...other 723 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.74%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 
  9.91%         interpreter  method entry point (kind = zerolocals)  
  6.14%         interpreter  lload  22 lload  
  5.14%         interpreter  invokevirtual  182 invokevirtual  
  4.50%         interpreter  lstore  55 lstore  
  3.76%         interpreter  ireturn  172 ireturn  
  2.82%         interpreter  invoke return entry points  
  2.69%         interpreter  goto  167 goto  
  2.44%         interpreter  method entry point (kind = accessor)  
  2.30%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  2.22%         interpreter  areturn  176 areturn  
  2.20%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.03%         interpreter  invokeinterface  185 invokeinterface  
  1.79%         interpreter  getstatic  178 getstatic  
  1.72%              kernel  [unknown] 
  1.61%         interpreter  ifeq  153 ifeq  
  1.59%         interpreter  invokespecial  183 invokespecial  
  1.44%         interpreter  lmul  105 lmul  
  1.37%         interpreter  ladd  97 ladd  
  1.28%         interpreter  fast_aload_0  220 fast_aload_0  
 31.32%  <...other 308 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 79.15%         interpreter
 11.89%               JVMCI
  6.25%           libjvm.so
  1.72%              kernel
  0.25%             Unknown
  0.23%        libc-2.28.so
  0.19%  libpthread-2.28.so
  0.13%      perf-12916.map
  0.08%      hsdis-amd64.so
  0.05%          libjava.so
  0.05%        runtime stub
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 48753 total address lines.
Perf output processed (skipped 6.094 seconds):
 Column 1: cycles (15413 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (26 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f48afeaac30: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
             0x00007f48afeaac33: mov    r8,rax
             0x00007f48afeaac36: mov    rax,r14
         ╭   0x00007f48afeaac39: jmp    0x00007f48afeaac4c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
         │   0x00007f48afeaac3e: xchg   ax,ax              ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  0.05%  │↗  0x00007f48afeaac40: test   DWORD PTR [rip+0x9f663c0],eax        # 0x00007f48b9e11006
         ││                                                ;   {poll}
  0.58%  ││  0x00007f48afeaac46: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@69 (line 139)
  0.01%  ││  0x00007f48afeaac49: mov    r8,r9              ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@27 (line 140)
  4.50%  ↘│  0x00007f48afeaac4c: mov    r9,rax
  0.04%   │  0x00007f48afeaac4f: imul   r9,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@42 (line 82)
  0.71%   │  0x00007f48afeaac53: imul   r9,r11             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@48 (line 82)
  0.30%   │  0x00007f48afeaac57: add    r9,r8              ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@55 (line 82)
  4.90%   │  0x00007f48afeaac5a: cmp    r10,rax
          ╰  0x00007f48afeaac5d: jne    0x00007f48afeaac40  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@63 (line 139)
             0x00007f48afeaac5f: mov    rax,r9             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline@77 (line 142)
             0x00007f48afeaac62: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f48afeaac67: add    rsp,0x18
             0x00007f48afeaac6b: test   DWORD PTR [rip+0x9f66395],eax        # 0x00007f48b9e11006
                                                           ;   {poll_return}
             0x00007f48afeaac71: vzeroupper 
....................................................................................................
 11.09%  <total for region 1>

....[Hottest Regions]...............................................................................
 11.09%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 (26 bytes) 
  6.38%         interpreter  lload  22 lload  (32 bytes) 
  4.22%         interpreter  lstore  55 lstore  (21 bytes) 
  3.50%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.31%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.50%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.31%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (65 bytes) 
  2.28%         interpreter  goto  167 goto  (70 bytes) 
  2.26%         interpreter  ireturn  172 ireturn  (0 bytes) 
  1.99%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.54%         interpreter  areturn  176 areturn  (8 bytes) 
  1.45%         interpreter  ladd  97 ladd  (19 bytes) 
  1.32%         interpreter  lmul  105 lmul  (30 bytes) 
  1.27%         interpreter  lcmp  148 lcmp  (24 bytes) 
  1.27%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.23%         interpreter  iconst_0  3 iconst_0  (10 bytes) 
  1.17%         interpreter  getstatic  178 getstatic  (99 bytes) 
  1.17%         interpreter  ifeq  153 ifeq  (50 bytes) 
  1.16%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.13%         interpreter  ireturn  172 ireturn  (37 bytes) 
 47.42%  <...other 734 warm regions...>
....................................................................................................
 99.98%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 11.09%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_capturingLambda_inline, version 89 
  9.59%         interpreter  method entry point (kind = zerolocals)  
  6.42%         interpreter  lload  22 lload  
  4.89%         interpreter  invokevirtual  182 invokevirtual  
  4.22%         interpreter  lstore  55 lstore  
  3.76%         interpreter  ireturn  172 ireturn  
  3.18%         interpreter  goto  167 goto  
  2.55%         interpreter  invoke return entry points  
  2.45%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  2.41%         interpreter  areturn  176 areturn  
  2.17%         interpreter  method entry point (kind = accessor)  
  2.16%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  1.95%         interpreter  ifeq  153 ifeq  
  1.89%         interpreter  invokeinterface  185 invokeinterface  
  1.77%         interpreter  getstatic  178 getstatic  
  1.75%              kernel  [unknown] 
  1.58%         interpreter  invokespecial  183 invokespecial  
  1.45%         interpreter  ladd  97 ladd  
  1.32%         interpreter  lmul  105 lmul  
  1.29%         interpreter  iconst_0  3 iconst_0  
 32.09%  <...other 316 warm methods...>
....................................................................................................
 99.98%  <totals>

....[Distribution by Source]........................................................................
 79.50%         interpreter
 11.31%               JVMCI
  6.36%           libjvm.so
  1.75%              kernel
  0.32%             Unknown
  0.27%        libc-2.28.so
  0.19%  libpthread-2.28.so
  0.12%      perf-12959.map
  0.07%      hsdis-amd64.so
  0.05%        runtime stub
  0.03%          libjava.so
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.98%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 50.00% complete, ETA 00:02:37
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 938.590 ms/op
# Warmup Iteration   2: 1021.470 ms/op
# Warmup Iteration   3: 975.517 ms/op
# Warmup Iteration   4: 1038.117 ms/op
# Warmup Iteration   5: 1025.788 ms/op
Iteration   1: 536.962 ms/op
Iteration   2: 7.356 ms/op
Iteration   3: 0.778 ms/op
Iteration   4: 0.786 ms/op
Iteration   5: 0.777 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 54.17% complete, ETA 00:02:24
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 960.324 ms/op
# Warmup Iteration   2: 1026.781 ms/op
# Warmup Iteration   3: 1036.540 ms/op
# Warmup Iteration   4: 1051.050 ms/op
# Warmup Iteration   5: 1036.807 ms/op
Iteration   1: 926.441 ms/op
Iteration   2: 7.198 ms/op
Iteration   3: 0.805 ms/op
Iteration   4: 0.814 ms/op
Iteration   5: 0.826 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 58.33% complete, ETA 00:02:11
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 949.221 ms/op
# Warmup Iteration   2: 1028.305 ms/op
# Warmup Iteration   3: 1031.437 ms/op
# Warmup Iteration   4: 981.259 ms/op
# Warmup Iteration   5: 939.612 ms/op
Iteration   1: 8.270 ms/op
Iteration   2: 0.790 ms/op
Iteration   3: 0.850 ms/op
Iteration   4: 0.854 ms/op
Iteration   5: 0.855 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda":
  99.624 ±(99.9%) 285.422 ms/op [Average]
  (min, avg, max) = (0.777, 99.624, 926.441), stdev = 266.984
  CI (99.9%): [≈ 0, 385.046] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·asm":
PrintAssembly processed: 50538 total address lines.
Perf output processed (skipped 7.727 seconds):
 Column 1: cycles (15318 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (30 bytes) 

             0x00007f74c40c9a8d: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f74c40c9a90: mov    r11,rax
             0x00007f74c40c9a93: mov    rax,r14
         ╭   0x00007f74c40c9a96: jmp    0x00007f74c40c9aac  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f74c40c9a9b: nop    DWORD PTR [rax+rax*1+0x0]
         │                                                 ; OopMap{rbx=Oop off=128}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.72%  │↗  0x00007f74c40c9aa0: test   DWORD PTR [rip+0xbcfc560],eax        # 0x00007f74cfdc6006
         ││                                                ;   {poll}
  6.21%  ││  0x00007f74c40c9aa6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.43%  ││  0x00007f74c40c9aa9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.10%  ↘│  0x00007f74c40c9aac: mov    r8,rax
  0.82%   │  0x00007f74c40c9aaf: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  6.11%   │  0x00007f74c40c9ab3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.40%   │  0x00007f74c40c9ab6: cmp    r10,rax
          ╰  0x00007f74c40c9ab9: jne    0x00007f74c40c9aa0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f74c40c9abb: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
  0.01%      0x00007f74c40c9abe: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f74c40c9ac3: add    rsp,0x18
             0x00007f74c40c9ac7: test   DWORD PTR [rip+0xbcfc539],eax        # 0x00007f74cfdc6006
                                                           ;   {poll_return}
             0x00007f74c40c9acd: vzeroupper 
             0x00007f74c40c9ad0: ret                       ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f74c40c9ad1: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f74c40c9ad6: add    rsp,0x18
             0x00007f74c40c9ada: test   DWORD PTR [rip+0xbcfc526],eax        # 0x00007f74cfdc6006
....................................................................................................
 16.80%  <total for region 1>

....[Hottest Regions]...............................................................................
 16.80%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (30 bytes) 
  3.75%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.33%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.77%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.13%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.04%         interpreter  ireturn  172 ireturn  (0 bytes) 
  1.85%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.51%         interpreter  goto  167 goto  (113 bytes) 
  1.46%         interpreter  lload  22 lload  (32 bytes) 
  1.41%         interpreter  areturn  176 areturn  (8 bytes) 
  1.38%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.33%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.25%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.18%         interpreter  getstatic  178 getstatic  (94 bytes) 
  1.17%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.11%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  1.07%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  0.95%         interpreter  aload_3  45 aload_3  (26 bytes) 
  0.93%         interpreter  checkcast  192 checkcast  (40 bytes) 
  0.93%         interpreter  invoke return entry points  (87 bytes) 
 51.63%  <...other 729 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 16.80%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
 10.22%         interpreter  method entry point (kind = zerolocals)  
  5.96%         interpreter  invokevirtual  182 invokevirtual  
  3.74%         interpreter  invoke return entry points  
  3.54%         interpreter  ireturn  172 ireturn  
  2.92%         interpreter  invokeinterface  185 invokeinterface  
  2.47%         interpreter  areturn  176 areturn  
  2.27%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.23%         interpreter  invokestatic  184 invokestatic  
  2.21%         interpreter  invokespecial  183 invokespecial  
  2.16%         interpreter  method entry point (kind = accessor)  
  2.06%              kernel  [unknown] 
  2.03%         interpreter  goto  167 goto  
  2.02%         interpreter  getstatic  178 getstatic  
  1.66%         interpreter  checkcast  192 checkcast  
  1.53%         interpreter  lload  22 lload  
  1.33%         interpreter  ifeq  153 ifeq  
  1.14%         interpreter  fast_iaccess_0  221 fast_iaccess_0  
  1.12%         interpreter  fast_aload_0  220 fast_aload_0  
  1.02%         interpreter  aload_3  45 aload_3  
 31.56%  <...other 310 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 72.36%         interpreter
 17.80%               JVMCI
  6.67%           libjvm.so
  2.06%              kernel
  0.46%      perf-13025.map
  0.22%        libc-2.28.so
  0.19%             Unknown
  0.12%  libpthread-2.28.so
  0.05%        runtime stub
  0.03%      hsdis-amd64.so
  0.02%          libjava.so
  0.01%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50669 total address lines.
Perf output processed (skipped 6.882 seconds):
 Column 1: cycles (17743 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007f25940c9b8d: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f25940c9b90: mov    r11,rax
             0x00007f25940c9b93: mov    rax,r14
         ╭   0x00007f25940c9b96: jmp    0x00007f25940c9bac  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f25940c9b9b: nop    DWORD PTR [rax+rax*1+0x0]
         │                                                 ; OopMap{rbx=Oop off=128}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.70%  │↗  0x00007f25940c9ba0: test   DWORD PTR [rip+0xa2e2460],eax        # 0x00007f259e3ac006
         ││                                                ;   {poll}
  5.24%  ││  0x00007f25940c9ba6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.37%  ││  0x00007f25940c9ba9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.07%  ↘│  0x00007f25940c9bac: mov    r8,rax
  0.51%   │  0x00007f25940c9baf: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.48%   │  0x00007f25940c9bb3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.22%   │  0x00007f25940c9bb6: cmp    r10,rax
          ╰  0x00007f25940c9bb9: jne    0x00007f25940c9ba0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f25940c9bbb: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f25940c9bbe: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f25940c9bc3: add    rsp,0x18
             0x00007f25940c9bc7: test   DWORD PTR [rip+0xa2e2439],eax        # 0x00007f259e3ac006
                                                           ;   {poll_return}
             0x00007f25940c9bcd: vzeroupper 
....................................................................................................
 14.60%  <total for region 1>

....[Hottest Regions]...............................................................................
 14.60%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.96%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.18%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.83%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.44%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.02%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.69%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.43%         interpreter  goto  167 goto  (66 bytes) 
  1.40%         interpreter  invokeinterface  185 invokeinterface  (137 bytes) 
  1.39%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.36%         interpreter  areturn  176 areturn  (8 bytes) 
  1.32%         interpreter  ireturn  172 ireturn  (104 bytes) 
  1.22%         interpreter  lload  22 lload  (32 bytes) 
  1.20%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.20%         interpreter  new  187 new  (199 bytes) 
  1.17%         interpreter  getstatic  178 getstatic  (94 bytes) 
  1.13%              kernel  [unknown] (6 bytes) 
  1.13%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
  1.05%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.04%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
 53.24%  <...other 750 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 14.60%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
 10.27%         interpreter  method entry point (kind = zerolocals)  
  5.60%         interpreter  invokevirtual  182 invokevirtual  
  3.73%         interpreter  invoke return entry points  
  3.49%         interpreter  ireturn  172 ireturn  
  2.85%         interpreter  invokeinterface  185 invokeinterface  
  2.68%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.60%         interpreter  invokespecial  183 invokespecial  
  2.59%         interpreter  areturn  176 areturn  
  2.36%              kernel  [unknown] 
  2.23%         interpreter  invokestatic  184 invokestatic  
  2.13%         interpreter  method entry point (kind = accessor)  
  1.91%         interpreter  goto  167 goto  
  1.87%         interpreter  getstatic  178 getstatic  
  1.74%         interpreter  checkcast  192 checkcast  
  1.44%         interpreter  return  177 return  
  1.35%         interpreter  fast_aload_0  220 fast_aload_0  
  1.32%         interpreter  ifeq  153 ifeq  
  1.30%         interpreter  lload  22 lload  
  1.22%         interpreter  new  187 new  
 32.72%  <...other 315 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 74.46%         interpreter
 15.44%               JVMCI
  6.69%           libjvm.so
  2.36%              kernel
  0.26%      perf-13063.map
  0.25%             Unknown
  0.23%  libpthread-2.28.so
  0.18%        libc-2.28.so
  0.06%        runtime stub
  0.05%      hsdis-amd64.so
  0.02%          libjava.so
  0.01%              [vdso]
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 51793 total address lines.
Perf output processed (skipped 8.548 seconds):
 Column 1: cycles (15093 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 

             0x00007fc557c7f58d: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fc557c7f590: mov    r11,rax
             0x00007fc557c7f593: mov    rax,r14
         ╭   0x00007fc557c7f596: jmp    0x00007fc557c7f5ac  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fc557c7f59b: nop    DWORD PTR [rax+rax*1+0x0]
         │                                                 ; OopMap{rbx=Oop off=128}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.88%  │↗  0x00007fc557c7f5a0: test   DWORD PTR [rip+0x9e40a60],eax        # 0x00007fc561ac0006
         ││                                                ;   {poll}
  8.26%  ││  0x00007fc557c7f5a6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.57%  ││  0x00007fc557c7f5a9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.60%  ↘│  0x00007fc557c7f5ac: mov    r8,rax
  0.93%   │  0x00007fc557c7f5af: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@2 (line 50)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_lambda$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  8.43%   │  0x00007fc557c7f5b3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.74%   │  0x00007fc557c7f5b6: cmp    r10,rax
          ╰  0x00007fc557c7f5b9: jne    0x00007fc557c7f5a0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fc557c7f5bb: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fc557c7f5be: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fc557c7f5c3: add    rsp,0x18
             0x00007fc557c7f5c7: test   DWORD PTR [rip+0x9e40a39],eax        # 0x00007fc561ac0006
                                                           ;   {poll_return}
             0x00007fc557c7f5cd: vzeroupper 
....................................................................................................
 22.41%  <total for region 1>

....[Hottest Regions]...............................................................................
 22.41%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 (22 bytes) 
  3.22%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  2.90%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.80%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.21%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.15%         interpreter  ireturn  172 ireturn  (0 bytes) 
  2.05%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  1.82%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.42%         interpreter  lload  22 lload  (32 bytes) 
  1.36%         interpreter  areturn  176 areturn  (8 bytes) 
  1.35%         interpreter  goto  167 goto  (66 bytes) 
  1.25%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.19%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.19%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.04%         interpreter  ireturn  172 ireturn  (37 bytes) 
  0.91%         interpreter  invokevirtual  182 invokevirtual  (124 bytes) 
  0.90%         interpreter  fast_aload_0  220 fast_aload_0  (31 bytes) 
  0.90%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.89%         interpreter  method entry point (kind = accessor)  (115 bytes) 
  0.88%         interpreter  invoke return entry points  (112 bytes) 
 47.13%  <...other 695 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 22.41%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 97 
  9.27%         interpreter  method entry point (kind = zerolocals)  
  5.41%         interpreter  invokevirtual  182 invokevirtual  
  3.82%         interpreter  invoke return entry points  
  3.45%         interpreter  ireturn  172 ireturn  
  2.54%         interpreter  invokeinterface  185 invokeinterface  
  2.38%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.37%         interpreter  areturn  176 areturn  
  2.30%         interpreter  method entry point (kind = accessor)  
  2.17%         interpreter  invokestatic  184 invokestatic  
  2.00%         interpreter  getstatic  178 getstatic  
  1.97%         interpreter  goto  167 goto  
  1.85%              kernel  [unknown] 
  1.72%         interpreter  invokespecial  183 invokespecial  
  1.50%         interpreter  lload  22 lload  
  1.46%         interpreter  checkcast  192 checkcast  
  1.17%         interpreter  fast_aload_0  220 fast_aload_0  
  1.17%         interpreter  ifeq  153 ifeq  
  1.01%         interpreter  return  177 return  
  1.00%         interpreter  aload_1  43 aload_1  
 29.01%  <...other 278 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 66.91%         interpreter
 23.01%               JVMCI
  7.20%           libjvm.so
  1.85%              kernel
  0.26%      perf-13101.map
  0.25%        libc-2.28.so
  0.22%             Unknown
  0.15%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.05%        runtime stub
  0.03%          libjava.so
  0.02%           libzip.so
  0.01%        libverify.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 62.50% complete, ETA 00:01:58
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 126.116 ms/op
# Warmup Iteration   2: 123.180 ms/op
# Warmup Iteration   3: 122.723 ms/op
# Warmup Iteration   4: 124.225 ms/op
# Warmup Iteration   5: 126.347 ms/op
Iteration   1: 139.497 ms/op
Iteration   2: 139.003 ms/op
Iteration   3: 0.761 ms/op
Iteration   4: 0.767 ms/op
Iteration   5: 0.758 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 66.67% complete, ETA 00:01:44
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 132.962 ms/op
# Warmup Iteration   2: 135.012 ms/op
# Warmup Iteration   3: 137.872 ms/op
# Warmup Iteration   4: 137.172 ms/op
# Warmup Iteration   5: 136.932 ms/op
Iteration   1: 139.348 ms/op
Iteration   2: 123.950 ms/op
Iteration   3: 0.922 ms/op
Iteration   4: 0.688 ms/op
Iteration   5: 0.689 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 70.83% complete, ETA 00:01:31
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 125.932 ms/op
# Warmup Iteration   2: 131.158 ms/op
# Warmup Iteration   3: 141.080 ms/op
# Warmup Iteration   4: 139.708 ms/op
# Warmup Iteration   5: 138.491 ms/op
Iteration   1: 138.530 ms/op
Iteration   2: 138.011 ms/op
Iteration   3: 1.966 ms/op
Iteration   4: 0.781 ms/op
Iteration   5: 0.746 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline":
  55.094 ±(99.9%) 73.557 ms/op [Average]
  (min, avg, max) = (0.688, 55.094, 139.497), stdev = 68.805
  CI (99.9%): [≈ 0, 128.651] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·asm":
PrintAssembly processed: 49882 total address lines.
Perf output processed (skipped 6.129 seconds):
 Column 1: cycles (15751 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007fa48c0c6c75: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007fa48c0c6c78: mov    r10,rax
             0x00007fa48c0c6c7b: mov    rax,r13
         ╭   0x00007fa48c0c6c7e: jmp    0x00007fa48c0c6c9c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007fa48c0c6c83: nop    DWORD PTR [rax+0x0]
         │   0x00007fa48c0c6c8a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  2.34%  │↗  0x00007fa48c0c6c90: test   DWORD PTR [rip+0x9df9370],eax        # 0x00007fa495ec0006
         ││                                                ;   {poll}
  2.23%  ││  0x00007fa48c0c6c96: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  2.27%  ││  0x00007fa48c0c6c99: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  2.10%  ↘│  0x00007fa48c0c6c9c: mov    r11,rax
  2.27%   │  0x00007fa48c0c6c9f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  2.03%   │  0x00007fa48c0c6ca3: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  2.14%   │  0x00007fa48c0c6ca6: cmp    r14,rax
          ╰  0x00007fa48c0c6ca9: jne    0x00007fa48c0c6c90  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007fa48c0c6cab: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007fa48c0c6cae: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fa48c0c6cb3: add    rsp,0x18
             0x00007fa48c0c6cb7: test   DWORD PTR [rip+0x9df9349],eax        # 0x00007fa495ec0006
                                                           ;   {poll_return}
             0x00007fa48c0c6cbd: vzeroupper 
....................................................................................................
 15.37%  <total for region 1>

....[Hottest Regions]...............................................................................
 15.37%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  5.62%         interpreter  lload  22 lload  (32 bytes) 
  3.54%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.52%         interpreter  lstore  55 lstore  (21 bytes) 
  3.23%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.41%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.05%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.04%         interpreter  goto  167 goto  (68 bytes) 
  1.99%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.84%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.26%         interpreter  lcmp  148 lcmp  (24 bytes) 
  1.24%         interpreter  ladd  97 ladd  (16 bytes) 
  1.21%         interpreter  iconst_0  3 iconst_0  (21 bytes) 
  1.14%         interpreter  areturn  176 areturn  (4 bytes) 
  1.14%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.12%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.08%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.07%         interpreter  lmul  105 lmul  (12 bytes) 
  1.02%         interpreter  fast_iaccess_0  221 fast_iaccess_0  (52 bytes) 
  0.98%              kernel  [unknown] (6 bytes) 
 47.12%  <...other 683 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 15.37%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
  9.43%         interpreter  method entry point (kind = zerolocals)  
  5.65%         interpreter  lload  22 lload  
  5.47%         interpreter  invokevirtual  182 invokevirtual  
  3.52%         interpreter  lstore  55 lstore  
  3.44%         interpreter  ireturn  172 ireturn  
  2.81%         interpreter  goto  167 goto  
  2.54%         interpreter  invoke return entry points  
  2.22%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.22%         interpreter  method entry point (kind = accessor)  
  2.16%         interpreter  invokeinterface  185 invokeinterface  
  2.15%         interpreter  areturn  176 areturn  
  1.94%         interpreter  getstatic  178 getstatic  
  1.94%              kernel  [unknown] 
  1.59%         interpreter  invokespecial  183 invokespecial  
  1.47%         interpreter  ifeq  153 ifeq  
  1.27%         interpreter  iconst_0  3 iconst_0  
  1.26%         interpreter  lcmp  148 lcmp  
  1.26%         interpreter  checkcast  192 checkcast  
  1.24%         interpreter  ladd  97 ladd  
 31.04%  <...other 281 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 76.10%         interpreter
 15.55%               JVMCI
  5.55%           libjvm.so
  1.94%              kernel
  0.25%             Unknown
  0.20%        libc-2.28.so
  0.16%      perf-13148.map
  0.13%  libpthread-2.28.so
  0.06%      hsdis-amd64.so
  0.03%          libjava.so
  0.02%        runtime stub
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49871 total address lines.
Perf output processed (skipped 6.109 seconds):
 Column 1: cycles (15722 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007f09e40c6b35: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007f09e40c6b38: mov    r10,rax
             0x00007f09e40c6b3b: mov    rax,r13
         ╭   0x00007f09e40c6b3e: jmp    0x00007f09e40c6b5c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007f09e40c6b43: nop    DWORD PTR [rax+0x0]
         │   0x00007f09e40c6b4a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.99%  │↗  0x00007f09e40c6b50: test   DWORD PTR [rip+0xb4294b0],eax        # 0x00007f09ef4f0006
         ││                                                ;   {poll}
  2.08%  ││  0x00007f09e40c6b56: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  2.08%  ││  0x00007f09e40c6b59: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.90%  ↘│  0x00007f09e40c6b5c: mov    r11,rax
  2.02%   │  0x00007f09e40c6b5f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  2.11%   │  0x00007f09e40c6b63: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  1.97%   │  0x00007f09e40c6b66: cmp    r14,rax
          ╰  0x00007f09e40c6b69: jne    0x00007f09e40c6b50  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007f09e40c6b6b: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007f09e40c6b6e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f09e40c6b73: add    rsp,0x18
             0x00007f09e40c6b77: test   DWORD PTR [rip+0xb429489],eax        # 0x00007f09ef4f0006
                                                           ;   {poll_return}
             0x00007f09e40c6b7d: vzeroupper 
....................................................................................................
 14.15%  <total for region 1>

....[Hottest Regions]...............................................................................
 14.15%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  6.47%         interpreter  lload  22 lload  (32 bytes) 
  3.71%         interpreter  lstore  55 lstore  (26 bytes) 
  3.52%         interpreter  method entry point (kind = zerolocals)  (146 bytes) 
  3.05%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.26%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.22%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.14%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.05%         interpreter  goto  167 goto  (79 bytes) 
  1.67%         interpreter  invokevirtual  182 invokevirtual  (114 bytes) 
  1.34%         interpreter  areturn  176 areturn  (8 bytes) 
  1.23%         interpreter  ladd  97 ladd  (16 bytes) 
  1.22%         interpreter  iconst_0  3 iconst_0  (20 bytes) 
  1.22%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.20%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.14%              kernel  [unknown] (6 bytes) 
  1.14%         interpreter  lcmp  148 lcmp  (24 bytes) 
  1.14%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.14%         interpreter  lmul  105 lmul  (12 bytes) 
  0.96%         interpreter  ifeq  153 ifeq  (40 bytes) 
 47.00%  <...other 686 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 14.15%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
  9.18%         interpreter  method entry point (kind = zerolocals)  
  6.49%         interpreter  lload  22 lload  
  5.48%         interpreter  invokevirtual  182 invokevirtual  
  3.71%         interpreter  lstore  55 lstore  
  3.70%         interpreter  ireturn  172 ireturn  
  2.93%         interpreter  goto  167 goto  
  2.70%         interpreter  invoke return entry points  
  2.32%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.23%         interpreter  areturn  176 areturn  
  2.23%              kernel  [unknown] 
  2.18%         interpreter  method entry point (kind = accessor)  
  1.95%         interpreter  getstatic  178 getstatic  
  1.87%         interpreter  invokeinterface  185 invokeinterface  
  1.82%         interpreter  invokespecial  183 invokespecial  
  1.64%         interpreter  ifeq  153 ifeq  
  1.30%         interpreter  checkcast  192 checkcast  
  1.29%         interpreter  iconst_0  3 iconst_0  
  1.23%         interpreter  ladd  97 ladd  
  1.14%         interpreter  lcmp  148 lcmp  
 30.45%  <...other 289 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 76.57%         interpreter
 14.39%               JVMCI
  5.88%           libjvm.so
  2.23%              kernel
  0.25%             Unknown
  0.20%        libc-2.28.so
  0.18%      perf-13186.map
  0.17%  libpthread-2.28.so
  0.04%      hsdis-amd64.so
  0.03%        runtime stub
  0.03%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 48918 total address lines.
Perf output processed (skipped 6.109 seconds):
 Column 1: cycles (15722 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 

             0x00007f9dac0c6c75: inc    r13                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
             0x00007f9dac0c6c78: mov    r10,rax
             0x00007f9dac0c6c7b: mov    rax,r13
         ╭   0x00007f9dac0c6c7e: jmp    0x00007f9dac0c6c9c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
         │   0x00007f9dac0c6c83: nop    DWORD PTR [rax+0x0]
         │   0x00007f9dac0c6c8a: nop    WORD PTR [rax+rax*1+0x0]  ; OopMap{off=112}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.84%  │↗  0x00007f9dac0c6c90: test   DWORD PTR [rip+0xd5f4370],eax        # 0x00007f9db96bb006
         ││                                                ;   {poll}
  1.90%  ││  0x00007f9dac0c6c96: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@63 (line 129)
  1.77%  ││  0x00007f9dac0c6c99: mov    r10,r11            ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@27 (line 130)
  1.79%  ↘│  0x00007f9dac0c6c9c: mov    r11,rax
  1.76%   │  0x00007f9dac0c6c9f: imul   r11,rax            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@42 (line 57)
  1.63%   │  0x00007f9dac0c6ca3: add    r11,r10            ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@49 (line 57)
  1.67%   │  0x00007f9dac0c6ca6: cmp    r14,rax
          ╰  0x00007f9dac0c6ca9: jne    0x00007f9dac0c6c90  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@57 (line 129)
             0x00007f9dac0c6cab: mov    rax,r11            ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline@71 (line 132)
             0x00007f9dac0c6cae: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f9dac0c6cb3: add    rsp,0x18
             0x00007f9dac0c6cb7: test   DWORD PTR [rip+0xd5f4349],eax        # 0x00007f9db96bb006
                                                           ;   {poll_return}
             0x00007f9dac0c6cbd: vzeroupper 
....................................................................................................
 12.36%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.36%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 (22 bytes) 
  6.79%         interpreter  lload  22 lload  (32 bytes) 
  4.20%         interpreter  lstore  55 lstore  (30 bytes) 
  3.96%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.22%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.61%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.46%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.32%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.16%         interpreter  goto  167 goto  (70 bytes) 
  2.08%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  1.41%         interpreter  lmul  105 lmul  (12 bytes) 
  1.41%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.34%         interpreter  areturn  176 areturn  (4 bytes) 
  1.33%         interpreter  ladd  97 ladd  (16 bytes) 
  1.32%         interpreter  iconst_0  3 iconst_0  (20 bytes) 
  1.24%         interpreter  lcmp  148 lcmp  (29 bytes) 
  1.16%         interpreter  ireturn  172 ireturn  (40 bytes) 
  1.10%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.06%         interpreter  ifeq  153 ifeq  (40 bytes) 
  1.05%         interpreter  lconst_1  10 lconst_1  (27 bytes) 
 45.41%  <...other 730 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.36%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_lambda_inline, version 89 
 10.01%         interpreter  method entry point (kind = zerolocals)  
  6.81%         interpreter  lload  22 lload  
  4.75%         interpreter  invokevirtual  182 invokevirtual  
  4.20%         interpreter  lstore  55 lstore  
  3.86%         interpreter  ireturn  172 ireturn  
  3.11%         interpreter  goto  167 goto  
  2.68%         interpreter  invoke return entry points  
  2.49%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.32%         interpreter  areturn  176 areturn  
  2.17%         interpreter  method entry point (kind = accessor)  
  2.00%              kernel  [unknown] 
  1.96%         interpreter  invokeinterface  185 invokeinterface  
  1.81%         interpreter  getstatic  178 getstatic  
  1.79%         interpreter  ifeq  153 ifeq  
  1.68%         interpreter  invokespecial  183 invokespecial  
  1.41%         interpreter  lmul  105 lmul  
  1.36%         interpreter  iconst_0  3 iconst_0  
  1.33%         interpreter  ladd  97 ladd  
  1.24%         interpreter  lcmp  148 lcmp  
 30.66%  <...other 307 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 78.30%         interpreter
 12.49%               JVMCI
  6.34%           libjvm.so
  2.00%              kernel
  0.34%             Unknown
  0.20%        libc-2.28.so
  0.11%  libpthread-2.28.so
  0.11%      perf-13225.map
  0.03%      hsdis-amd64.so
  0.03%        runtime stub
  0.03%           libzip.so
  0.01%          libjava.so
  0.01%              [vdso]
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef
# Parameters: (factor = 1, param = 1000000)

# Run progress: 75.00% complete, ETA 00:01:17
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1153.444 ms/op
# Warmup Iteration   2: 1206.700 ms/op
# Warmup Iteration   3: 1253.805 ms/op
# Warmup Iteration   4: 1240.296 ms/op
# Warmup Iteration   5: 1231.769 ms/op
Iteration   1: 1187.150 ms/op
Iteration   2: 364.117 ms/op
Iteration   3: 1.832 ms/op
Iteration   4: 0.839 ms/op
Iteration   5: 0.870 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 79.17% complete, ETA 00:01:04
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1142.505 ms/op
# Warmup Iteration   2: 1165.283 ms/op
# Warmup Iteration   3: 1173.440 ms/op
# Warmup Iteration   4: 1190.227 ms/op
# Warmup Iteration   5: 1185.446 ms/op
Iteration   1: 1189.137 ms/op
Iteration   2: 210.903 ms/op
Iteration   3: 1.070 ms/op
Iteration   4: 0.879 ms/op
Iteration   5: 0.873 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 83.33% complete, ETA 00:00:51
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1082.911 ms/op
# Warmup Iteration   2: 1109.079 ms/op
# Warmup Iteration   3: 1104.198 ms/op
# Warmup Iteration   4: 1105.976 ms/op
# Warmup Iteration   5: 1116.524 ms/op
Iteration   1: 1107.704 ms/op
Iteration   2: 1086.031 ms/op
Iteration   3: 152.256 ms/op
Iteration   4: 0.852 ms/op
Iteration   5: 0.870 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef":
  353.692 ±(99.9%) 538.609 ms/op [Average]
  (min, avg, max) = (0.839, 353.692, 1189.137), stdev = 503.816
  CI (99.9%): [≈ 0, 892.302] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·asm":
PrintAssembly processed: 50122 total address lines.
Perf output processed (skipped 6.807 seconds):
 Column 1: cycles (15906 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fc8a80c99e1: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007fc8a80c99e4: mov    r11,rax
             0x00007fc8a80c99e7: mov    rax,r14
         ╭   0x00007fc8a80c99ea: jmp    0x00007fc8a80c99fc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007fc8a80c99ef: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.56%  │↗  0x00007fc8a80c99f0: test   DWORD PTR [rip+0xbe8b610],eax        # 0x00007fc8b3f55006
         ││                                                ;   {poll}
  4.67%  ││  0x00007fc8a80c99f6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.28%  ││  0x00007fc8a80c99f9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.95%  ↘│  0x00007fc8a80c99fc: mov    r8,rax
  0.41%   │  0x00007fc8a80c99ff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.86%   │  0x00007fc8a80c9a03: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.94%   │  0x00007fc8a80c9a06: cmp    r10,rax
          ╰  0x00007fc8a80c9a09: jne    0x00007fc8a80c99f0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007fc8a80c9a0b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007fc8a80c9a0e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fc8a80c9a13: add    rsp,0x18
             0x00007fc8a80c9a17: test   DWORD PTR [rip+0xbe8b5e9],eax        # 0x00007fc8b3f55006
                                                           ;   {poll_return}
             0x00007fc8a80c9a1d: vzeroupper 
....................................................................................................
 12.67%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.67%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 
  4.24%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  3.43%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.12%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.22%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.21%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (65 bytes) 
  1.89%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.50%         interpreter  goto  167 goto  (66 bytes) 
  1.50%         interpreter  invokeinterface  185 invokeinterface  (137 bytes) 
  1.43%         interpreter  areturn  176 areturn  (8 bytes) 
  1.35%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.31%         interpreter  lload  22 lload  (32 bytes) 
  1.31%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.22%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.20%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.19%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.14%              kernel  [unknown] (6 bytes) 
  1.11%         interpreter  fast_aload_0  220 fast_aload_0  (22 bytes) 
  1.09%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.07%         interpreter  invoke return entry points  (112 bytes) 
 53.79%  <...other 711 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.67%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
 11.13%         interpreter  method entry point (kind = zerolocals)  
  5.70%         interpreter  invokevirtual  182 invokevirtual  
  4.29%         interpreter  invoke return entry points  
  3.68%         interpreter  ireturn  172 ireturn  
  3.11%         interpreter  invokeinterface  185 invokeinterface  
  3.07%         interpreter  invokespecial  183 invokespecial  
  2.65%         interpreter  areturn  176 areturn  
  2.39%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.36%         interpreter  invokestatic  184 invokestatic  
  2.23%              kernel  [unknown] 
  2.17%         interpreter  method entry point (kind = accessor)  
  2.06%         interpreter  goto  167 goto  
  2.02%         interpreter  getstatic  178 getstatic  
  1.68%         interpreter  checkcast  192 checkcast  
  1.46%         interpreter  lload  22 lload  
  1.41%         interpreter  fast_aload_0  220 fast_aload_0  
  1.36%         interpreter  return  177 return  
  1.35%         interpreter  ifeq  153 ifeq  
  1.25%         interpreter  aload_1  43 aload_1  
 31.94%  <...other 290 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 76.39%         interpreter
 13.64%               JVMCI
  6.66%           libjvm.so
  2.23%              kernel
  0.36%      perf-13271.map
  0.22%        libc-2.28.so
  0.22%             Unknown
  0.19%  libpthread-2.28.so
  0.04%      hsdis-amd64.so
  0.03%          libjava.so
  0.01%           libzip.so
  0.01%           libnet.so
  0.01%        runtime stub
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 50691 total address lines.
Perf output processed (skipped 6.508 seconds):
 Column 1: cycles (15957 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f47580c9a61: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f47580c9a64: mov    r11,rax
             0x00007f47580c9a67: mov    rax,r14
         ╭   0x00007f47580c9a6a: jmp    0x00007f47580c9a7c  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f47580c9a6f: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.57%  │↗  0x00007f47580c9a70: test   DWORD PTR [rip+0xc1be590],eax        # 0x00007f4764288006
         ││                                                ;   {poll}
  5.26%  ││  0x00007f47580c9a76: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.38%  ││  0x00007f47580c9a79: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  1.05%  ↘│  0x00007f47580c9a7c: mov    r8,rax
  0.58%   │  0x00007f47580c9a7f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  5.45%   │  0x00007f47580c9a83: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  1.18%   │  0x00007f47580c9a86: cmp    r10,rax
          ╰  0x00007f47580c9a89: jne    0x00007f47580c9a70  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f47580c9a8b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f47580c9a8e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f47580c9a93: add    rsp,0x18
             0x00007f47580c9a97: test   DWORD PTR [rip+0xc1be569],eax        # 0x00007f4764288006
                                                           ;   {poll_return}
             0x00007f47580c9a9d: vzeroupper 
....................................................................................................
 14.48%  <total for region 1>

....[Hottest Regions]...............................................................................
 14.48%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 
  4.36%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.32%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.25%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.20%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.02%         interpreter  ireturn  172 ireturn  (0 bytes) 
  1.85%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.75%              kernel  [unknown] (6 bytes) 
  1.74%         interpreter  invokestatic  184 invokestatic  (77 bytes) 
  1.54%         interpreter  lload  22 lload  (32 bytes) 
  1.42%         interpreter  invokeinterface  185 invokeinterface  (122 bytes) 
  1.33%         interpreter  areturn  176 areturn  (8 bytes) 
  1.27%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.25%         interpreter  goto  167 goto  (83 bytes) 
  1.17%         interpreter  invoke return entry points  (112 bytes) 
  1.17%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.07%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.04%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.02%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.00%         interpreter  areturn  176 areturn  (23 bytes) 
 51.78%  <...other 763 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 14.48%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
 11.27%         interpreter  method entry point (kind = zerolocals)  
  6.69%               JVMCI  java.util.HashMap::get, version 109 
  5.73%         interpreter  invokevirtual  182 invokevirtual  
  4.14%         interpreter  invoke return entry points  
  3.32%         interpreter  ireturn  172 ireturn  
  3.08%              kernel  [unknown] 
  3.00%         interpreter  invokeinterface  185 invokeinterface  
  2.54%         interpreter  areturn  176 areturn  
  2.52%         interpreter  invokespecial  183 invokespecial  
  2.52%         interpreter  invokestatic  184 invokestatic  
  2.32%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  1.99%         interpreter  method entry point (kind = accessor)  
  1.90%         interpreter  getstatic  178 getstatic  
  1.81%         interpreter  goto  167 goto  
  1.76%         interpreter  checkcast  192 checkcast  
  1.57%         interpreter  lload  22 lload  
  1.31%         interpreter  fast_aload_0  220 fast_aload_0  
  1.20%         interpreter  ifeq  153 ifeq  
  1.16%         interpreter  return  177 return  
 25.69%  <...other 165 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 73.75%         interpreter
 22.23%               JVMCI
  3.08%              kernel
  0.34%             Unknown
  0.23%        libc-2.28.so
  0.16%  libpthread-2.28.so
  0.14%      perf-13312.map
  0.04%        runtime stub
  0.03%           libjvm.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 49249 total address lines.
Perf output processed (skipped 6.188 seconds):
 Column 1: cycles (15960 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 

                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f5adbc7fde1: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
             0x00007f5adbc7fde4: mov    r11,rax
             0x00007f5adbc7fde7: mov    rax,r14
         ╭   0x00007f5adbc7fdea: jmp    0x00007f5adbc7fdfc  ;*lload {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
         │   0x00007f5adbc7fdef: nop                       ; OopMap{rbx=Oop off=144}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.49%  │↗  0x00007f5adbc7fdf0: test   DWORD PTR [rip+0x9dc5210],eax        # 0x00007f5ae5a45006
         ││                                                ;   {poll}
  3.67%  ││  0x00007f5adbc7fdf6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@50 (line 112)
  0.24%  ││  0x00007f5adbc7fdf9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@17 (line 113)
  0.77%  ↘│  0x00007f5adbc7fdfc: mov    r8,rax
  0.39%   │  0x00007f5adbc7fdff: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::access$square@2 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 63)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark$sumOfSquares_methodRef$1::invoke@8 (line 22)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@25 (line 113)
  4.07%   │  0x00007f5adbc7fe03: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@36 (line 113)
  0.72%   │  0x00007f5adbc7fe06: cmp    r10,rax
          ╰  0x00007f5adbc7fe09: jne    0x00007f5adbc7fdf0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@44 (line 112)
             0x00007f5adbc7fe0b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares@58 (line 115)
             0x00007f5adbc7fe0e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f5adbc7fe13: add    rsp,0x18
             0x00007f5adbc7fe17: test   DWORD PTR [rip+0x9dc51e9],eax        # 0x00007f5ae5a45006
                                                           ;   {poll_return}
             0x00007f5adbc7fe1d: vzeroupper 
....................................................................................................
 10.36%  <total for region 1>

....[Hottest Regions]...............................................................................
 10.36%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 (22 bytes) 
  4.93%         interpreter  method entry point (kind = zerolocals)  (115 bytes) 
  3.72%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  3.38%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.41%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.98%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  1.68%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.60%         interpreter  invokeinterface  185 invokeinterface  (95 bytes) 
  1.48%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.44%         interpreter  areturn  176 areturn  (4 bytes) 
  1.41%         interpreter  invokestatic  184 invokestatic  (43 bytes) 
  1.39%              kernel  [unknown] (6 bytes) 
  1.32%         interpreter  lload  22 lload  (32 bytes) 
  1.32%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.22%         interpreter  goto  167 goto  (70 bytes) 
  1.17%         interpreter  invoke return entry points  (112 bytes) 
  1.16%         interpreter  new  187 new  (199 bytes) 
  1.09%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.09%         interpreter  invokevirtual  182 invokevirtual  (1 bytes) 
  1.09%         interpreter  fast_aload_0  220 fast_aload_0  (35 bytes) 
 54.76%  <...other 749 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.39%         interpreter  method entry point (kind = zerolocals)  
 10.36%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares, version 99 
  5.80%         interpreter  invokevirtual  182 invokevirtual  
  4.09%         interpreter  invoke return entry points  
  3.79%         interpreter  ireturn  172 ireturn  
  3.40%         interpreter  invokeinterface  185 invokeinterface  
  2.93%         interpreter  invokespecial  183 invokespecial  
  2.63%         interpreter  areturn  176 areturn  
  2.46%              kernel  [unknown] 
  2.43%         interpreter  invokestatic  184 invokestatic  
  2.36%         interpreter  method entry point (kind = accessor)  
  2.14%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  1.80%         interpreter  goto  167 goto  
  1.79%         interpreter  getstatic  178 getstatic  
  1.75%         interpreter  checkcast  192 checkcast  
  1.60%         interpreter  ifeq  153 ifeq  
  1.47%         interpreter  return  177 return  
  1.42%         interpreter  lload  22 lload  
  1.39%         interpreter  fast_aload_0  220 fast_aload_0  
  1.23%         interpreter  lreturn  173 lreturn  
 32.78%  <...other 314 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 78.07%         interpreter
 11.60%               JVMCI
  6.95%           libjvm.so
  2.46%              kernel
  0.23%        libc-2.28.so
  0.23%      perf-13350.map
  0.21%             Unknown
  0.13%  libpthread-2.28.so
  0.04%        runtime stub
  0.04%          libjava.so
  0.03%      hsdis-amd64.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>



# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: -XX:-TieredCompilation
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 87.50% complete, ETA 00:00:38
# Fork: 1 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 155.637 ms/op
# Warmup Iteration   2: 157.383 ms/op
# Warmup Iteration   3: 170.112 ms/op
# Warmup Iteration   4: 174.201 ms/op
# Warmup Iteration   5: 175.649 ms/op
Iteration   1: 173.632 ms/op
Iteration   2: 174.546 ms/op
Iteration   3: 2.866 ms/op
Iteration   4: 0.858 ms/op
Iteration   5: 0.862 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 91.67% complete, ETA 00:00:25
# Fork: 2 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 149.651 ms/op
# Warmup Iteration   2: 167.418 ms/op
# Warmup Iteration   3: 170.154 ms/op
# Warmup Iteration   4: 173.201 ms/op
# Warmup Iteration   5: 172.966 ms/op
Iteration   1: 173.762 ms/op
Iteration   2: 172.090 ms/op
Iteration   3: 2.400 ms/op
Iteration   4: 0.850 ms/op
Iteration   5: 0.853 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 

# Run progress: 95.83% complete, ETA 00:00:12
# Fork: 3 of 3
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 164.467 ms/op
# Warmup Iteration   2: 160.420 ms/op
# Warmup Iteration   3: 151.469 ms/op
# Warmup Iteration   4: 154.509 ms/op
# Warmup Iteration   5: 176.557 ms/op
Iteration   1: 173.531 ms/op
Iteration   2: 174.587 ms/op
Iteration   3: 1.467 ms/op
Iteration   4: 0.867 ms/op
Iteration   5: 0.857 ms/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline":
  70.269 ±(99.9%) 93.449 ms/op [Average]
  (min, avg, max) = (0.850, 70.269, 174.587), stdev = 87.412
  CI (99.9%): [≈ 0, 163.717] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·asm":
PrintAssembly processed: 48973 total address lines.
Perf output processed (skipped 6.051 seconds):
 Column 1: cycles (15373 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007f315beab729: cmp    r10,r14
             0x00007f315beab72c: je     0x00007f315beab771  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f315beab732: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007f315beab735: mov    r11,rax
             0x00007f315beab738: mov    rax,r14
         ╭   0x00007f315beab73b: jmp    0x00007f315beab74c  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.52%  │↗  0x00007f315beab740: test   DWORD PTR [rip+0x9e648c0],eax        # 0x00007f3165d10006
         ││                                                ;   {poll}
  4.38%  ││  0x00007f315beab746: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.40%  ││  0x00007f315beab749: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.91%  ↘│  0x00007f315beab74c: mov    r8,rax
  0.55%   │  0x00007f315beab74f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  4.61%   │  0x00007f315beab753: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  0.92%   │  0x00007f315beab756: cmp    r10,rax
          ╰  0x00007f315beab759: jne    0x00007f315beab740  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f315beab75b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007f315beab75e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f315beab763: add    rsp,0x18
             0x00007f315beab767: test   DWORD PTR [rip+0x9e64899],eax        # 0x00007f3165d10006
                                                           ;   {poll_return}
             0x00007f315beab76d: vzeroupper 
....................................................................................................
 12.27%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.27%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  3.86%         interpreter  method entry point (kind = zerolocals)  (165 bytes) 
  3.45%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.08%         interpreter  lstore  55 lstore  (21 bytes) 
  3.00%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.76%         interpreter  lload  22 lload  (32 bytes) 
  2.36%         interpreter  lreturn  173 lreturn  (4 bytes) 
  2.30%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.24%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.13%         interpreter  ireturn  172 ireturn  (8 bytes) 
  2.08%         interpreter  goto  167 goto  (75 bytes) 
  1.55%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.46%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.33%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.27%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.21%              kernel  [unknown] (6 bytes) 
  1.17%         interpreter  lcmp  148 lcmp  (29 bytes) 
  1.16%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.13%         interpreter  getstatic  178 getstatic  (76 bytes) 
  1.09%         interpreter  iconst_0  3 iconst_0  (11 bytes) 
 49.09%  <...other 707 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.27%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
 10.66%         interpreter  method entry point (kind = zerolocals)  
  5.14%         interpreter  invokevirtual  182 invokevirtual  
  3.51%         interpreter  ireturn  172 ireturn  
  3.26%         interpreter  invokespecial  183 invokespecial  
  3.08%         interpreter  lstore  55 lstore  
  3.05%         interpreter  lreturn  173 lreturn  
  2.95%         interpreter  goto  167 goto  
  2.83%         interpreter  lload  22 lload  
  2.75%         interpreter  invoke return entry points  
  2.45%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.32%         interpreter  checkcast  192 checkcast  
  2.27%              kernel  [unknown] 
  2.13%         interpreter  method entry point (kind = accessor)  
  2.08%         interpreter  areturn  176 areturn  
  1.95%         interpreter  invokeinterface  185 invokeinterface  
  1.85%         interpreter  getstatic  178 getstatic  
  1.55%         interpreter  ifeq  153 ifeq  
  1.17%         interpreter  lcmp  148 lcmp  
  1.13%         interpreter  iconst_0  3 iconst_0  
 31.61%  <...other 299 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 78.19%         interpreter
 12.44%               JVMCI
  6.08%           libjvm.so
  2.27%              kernel
  0.29%             Unknown
  0.27%        libc-2.28.so
  0.20%      perf-13396.map
  0.10%  libpthread-2.28.so
  0.05%      hsdis-amd64.so
  0.05%          libjava.so
  0.04%        runtime stub
  0.03%           libzip.so
....................................................................................................
 99.99%  <totals>

PrintAssembly processed: 48967 total address lines.
Perf output processed (skipped 5.994 seconds):
 Column 1: cycles (15309 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007f22400c77a9: cmp    r10,r14
             0x00007f22400c77ac: je     0x00007f22400c77f1  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f22400c77b2: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007f22400c77b5: mov    r11,rax
             0x00007f22400c77b8: mov    rax,r14
         ╭   0x00007f22400c77bb: jmp    0x00007f22400c77cc  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.48%  │↗  0x00007f22400c77c0: test   DWORD PTR [rip+0xc8f7840],eax        # 0x00007f224c9bf006
         ││                                                ;   {poll}
  4.35%  ││  0x00007f22400c77c6: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.34%  ││  0x00007f22400c77c9: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.90%  ↘│  0x00007f22400c77cc: mov    r8,rax
  0.54%   │  0x00007f22400c77cf: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  4.87%   │  0x00007f22400c77d3: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  1.21%   │  0x00007f22400c77d6: cmp    r10,rax
          ╰  0x00007f22400c77d9: jne    0x00007f22400c77c0  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007f22400c77db: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007f22400c77de: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007f22400c77e3: add    rsp,0x18
             0x00007f22400c77e7: test   DWORD PTR [rip+0xc8f7819],eax        # 0x00007f224c9bf006
                                                           ;   {poll_return}
             0x00007f22400c77ed: vzeroupper 
....................................................................................................
 12.69%  <total for region 1>

....[Hottest Regions]...............................................................................
 12.69%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  3.96%         interpreter  method entry point (kind = zerolocals)  (130 bytes) 
  3.33%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  3.27%         interpreter  lstore  55 lstore  (30 bytes) 
  2.89%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.85%         interpreter  lload  22 lload  (32 bytes) 
  2.12%         interpreter  lreturn  173 lreturn  (4 bytes) 
  2.12%         interpreter  goto  167 goto  (70 bytes) 
  2.12%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.04%         interpreter  ireturn  172 ireturn  (4 bytes) 
  1.29%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.27%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.25%         interpreter  invokevirtual  182 invokevirtual  (121 bytes) 
  1.25%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.18%         interpreter  invokevirtual  182 invokevirtual  (43 bytes) 
  1.16%         interpreter  iconst_0  3 iconst_0  (20 bytes) 
  1.14%         interpreter  getstatic  178 getstatic  (93 bytes) 
  1.14%         interpreter  areturn  176 areturn  (8 bytes) 
  1.13%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.08%         interpreter  ladd  97 ladd  (29 bytes) 
 50.70%  <...other 685 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 12.69%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
 10.54%         interpreter  method entry point (kind = zerolocals)  
  4.87%         interpreter  invokevirtual  182 invokevirtual  
  3.49%         interpreter  ireturn  172 ireturn  
  3.27%         interpreter  lstore  55 lstore  
  3.04%         interpreter  invokespecial  183 invokespecial  
  2.99%         interpreter  goto  167 goto  
  2.98%         interpreter  invoke return entry points  
  2.93%         interpreter  lload  22 lload  
  2.73%         interpreter  lreturn  173 lreturn  
  2.42%         interpreter  method entry point (kind = accessor)  
  2.28%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.27%         interpreter  checkcast  192 checkcast  
  2.12%         interpreter  areturn  176 areturn  
  2.10%         interpreter  invokeinterface  185 invokeinterface  
  2.02%              kernel  [unknown] 
  1.97%         interpreter  getstatic  178 getstatic  
  1.54%         interpreter  ifeq  153 ifeq  
  1.23%         interpreter  fast_aload_0  220 fast_aload_0  
  1.22%         interpreter  iconst_0  3 iconst_0  
 31.30%  <...other 299 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 77.70%         interpreter
 12.95%               JVMCI
  6.34%           libjvm.so
  2.02%              kernel
  0.26%             Unknown
  0.20%  libpthread-2.28.so
  0.18%        libc-2.28.so
  0.18%      perf-13435.map
  0.05%        runtime stub
  0.05%      hsdis-amd64.so
  0.04%          libjava.so
  0.03%           libzip.so
  0.01%        libverify.so
....................................................................................................
100.00%  <totals>

PrintAssembly processed: 49003 total address lines.
Perf output processed (skipped 6.187 seconds):
 Column 1: cycles (15316 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
JVMCI, org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 

             0x00007fb9480c75e9: cmp    r10,r14
             0x00007fb9480c75ec: je     0x00007fb9480c7631  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007fb9480c75f2: inc    r14                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
             0x00007fb9480c75f5: mov    r11,rax
             0x00007fb9480c75f8: mov    rax,r14
         ╭   0x00007fb9480c75fb: jmp    0x00007fb9480c760c  ; OopMap{rbx=Oop off=160}
         │                                                 ;*lload {reexecute=1 rethrow=0 return_oop=0}
         │                                                 ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.58%  │↗  0x00007fb9480c7600: test   DWORD PTR [rip+0xcda5a00],eax        # 0x00007fb954e6d006
         ││                                                ;   {poll}
  5.15%  ││  0x00007fb9480c7606: inc    rax                ;*ladd {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@71 (line 134)
  0.35%  ││  0x00007fb9480c7609: mov    r11,r8             ;*lload {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@30 (line 135)
  0.85%  ↘│  0x00007fb9480c760c: mov    r8,rax
  0.52%   │  0x00007fb9480c760f: imul   r8,rax             ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::square@2 (line 107)
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@48 (line 68)
  5.48%   │  0x00007fb9480c7613: add    r8,r11             ;*ladd {reexecute=0 rethrow=0 return_oop=0}
          │                                                ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@57 (line 68)
  0.97%   │  0x00007fb9480c7616: cmp    r10,rax
          ╰  0x00007fb9480c7619: jne    0x00007fb9480c7600  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@65 (line 134)
             0x00007fb9480c761b: mov    rax,r8             ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline@79 (line 137)
             0x00007fb9480c761e: mov    rbp,QWORD PTR [rsp+0x10]
             0x00007fb9480c7623: add    rsp,0x18
             0x00007fb9480c7627: test   DWORD PTR [rip+0xcda59d9],eax        # 0x00007fb954e6d006
                                                           ;   {poll_return}
             0x00007fb9480c762d: vzeroupper 
....................................................................................................
 13.91%  <total for region 1>

....[Hottest Regions]...............................................................................
 13.91%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 (22 bytes) 
  4.05%         interpreter  method entry point (kind = zerolocals)  (134 bytes) 
  3.32%         interpreter  lstore  55 lstore  (30 bytes) 
  3.14%         interpreter  method entry point (kind = zerolocals)  (14 bytes) 
  2.87%         interpreter  method entry point (kind = zerolocals)  (211 bytes) 
  2.78%         interpreter  lload  22 lload  (32 bytes) 
  2.30%         interpreter  invokevirtual  182 invokevirtual  (77 bytes) 
  2.14%         interpreter  fast_aaccess_0  222 fast_aaccess_0  (56 bytes) 
  2.02%         interpreter  goto  167 goto  (112 bytes) 
  1.96%         interpreter  ireturn  172 ireturn  (8 bytes) 
  1.83%         interpreter  lreturn  173 lreturn  (4 bytes) 
  1.48%         interpreter  invokevirtual  182 invokevirtual  (114 bytes) 
  1.36%         interpreter  invokespecial  183 invokespecial  (43 bytes) 
  1.36%         interpreter  invokespecial  183 invokespecial  (91 bytes) 
  1.36%         interpreter  checkcast  192 checkcast  (40 bytes) 
  1.34%         interpreter  areturn  176 areturn  (8 bytes) 
  1.19%         interpreter  ireturn  172 ireturn  (37 bytes) 
  1.14%         interpreter  iconst_0  3 iconst_0  (11 bytes) 
  1.10%         interpreter  ladd  97 ladd  (16 bytes) 
  1.08%              kernel  [unknown] (6 bytes) 
 48.26%  <...other 675 warm regions...>
....................................................................................................
 99.99%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 13.91%               JVMCI  org.ib.benchmark.HighOrderFunctionKtBenchmark::sumOfSquares_methodRef_inline, version 90 
 10.41%         interpreter  method entry point (kind = zerolocals)  
  4.98%         interpreter  invokevirtual  182 invokevirtual  
  3.49%         interpreter  ireturn  172 ireturn  
  3.33%         interpreter  invoke return entry points  
  3.32%         interpreter  lstore  55 lstore  
  3.24%         interpreter  invokespecial  183 invokespecial  
  2.85%         interpreter  lload  22 lload  
  2.65%         interpreter  goto  167 goto  
  2.38%         interpreter  method entry point (kind = accessor)  
  2.35%         interpreter  lreturn  173 lreturn  
  2.34%         interpreter  fast_aaccess_0  222 fast_aaccess_0  
  2.31%         interpreter  areturn  176 areturn  
  2.19%              kernel  [unknown] 
  2.18%         interpreter  invokeinterface  185 invokeinterface  
  2.09%         interpreter  checkcast  192 checkcast  
  1.65%         interpreter  getstatic  178 getstatic  
  1.40%         interpreter  ifeq  153 ifeq  
  1.18%         interpreter  iconst_0  3 iconst_0  
  1.14%         interpreter  fast_aload_0  220 fast_aload_0  
 30.61%  <...other 276 warm methods...>
....................................................................................................
 99.99%  <totals>

....[Distribution by Source]........................................................................
 77.10%         interpreter
 14.10%               JVMCI
  5.58%           libjvm.so
  2.19%              kernel
  0.29%             Unknown
  0.25%        libc-2.28.so
  0.18%  libpthread-2.28.so
  0.18%      perf-13475.map
  0.05%        runtime stub
  0.03%      hsdis-amd64.so
  0.03%          libjava.so
  0.01%           libzip.so
....................................................................................................
 99.99%  <totals>



# Run complete. Total time: 00:05:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                (factor)  (param)  Mode  Cnt    Score     Error  Units
HighOrderFunctionKtBenchmark.sumOfSquares_lambda                                1  1000000  avgt   15   99.624 ± 285.422  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·asm                           1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline                         1  1000000  avgt   15   55.094 ±  73.557  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·asm                    1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda                       1  1000000  avgt   15  493.756 ± 601.975  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·asm                  1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline                1  1000000  avgt   15   60.514 ±  78.851  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·asm           1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef                             1  1000000  avgt   15  353.692 ± 538.609  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·asm                        1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline                      1  1000000  avgt   15   70.269 ±  93.449  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·asm                 1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction                     1  1000000  avgt   15  110.975 ± 319.280  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·asm                1  1000000  avgt           NaN              ---

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline              1  1000000  avgt   15   49.147 ± 161.144  ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·asm         1  1000000  avgt           NaN              ---

Few thoughts:
    - Graal JIT Compiler is able to inline everything, no difference in performance, as opposite to the JIT C2