# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction
# Parameters: (factor = 1, param = 1000000)

# Run progress: 0.00% complete, ETA 00:04:00
# Fork: 1 of 3
# Warmup Iteration   1: 43.879 ms/op
# Warmup Iteration   2: 1.815 ms/op
# Warmup Iteration   3: 0.961 ms/op
# Warmup Iteration   4: 1.650 ms/op
# Warmup Iteration   5: 0.964 ms/op
Iteration   1: 0.900 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.561 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.883 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.416 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.807 ms/op
                 ·gc.alloc.rate:      1.008 MB/sec
                 ·gc.alloc.rate.norm: 1279.639 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.849 ms/op
                 ·gc.alloc.rate:      24.679 MB/sec
                 ·gc.alloc.rate.norm: 32963.142 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.806 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.380 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 4.17% complete, ETA 00:05:55
# Fork: 2 of 3
# Warmup Iteration   1: 24.439 ms/op
# Warmup Iteration   2: 1.424 ms/op
# Warmup Iteration   3: 0.891 ms/op
# Warmup Iteration   4: 0.972 ms/op
# Warmup Iteration   5: 0.934 ms/op
Iteration   1: 0.879 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.548 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.904 ms/op
                 ·gc.alloc.rate:      7.071 MB/sec
                 ·gc.alloc.rate.norm: 10052.047 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.854 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.403 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.839 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.362 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.834 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.393 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 8.33% complete, ETA 00:05:38
# Fork: 3 of 3
# Warmup Iteration   1: 4.568 ms/op
# Warmup Iteration   2: 1.068 ms/op
# Warmup Iteration   3: 0.919 ms/op
# Warmup Iteration   4: 0.859 ms/op
# Warmup Iteration   5: 0.831 ms/op
Iteration   1: 0.877 ms/op
                 ·gc.alloc.rate:      0.429 MB/sec
                 ·gc.alloc.rate.norm: 592.231 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.827 ms/op
                 ·gc.alloc.rate:      0.045 MB/sec
                 ·gc.alloc.rate.norm: 58.958 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.847 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.399 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.884 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.382 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.911 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.430 B/op
                 ·gc.count:           ≈ 0 counts



Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction":
  0.860 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.806, 0.860, 0.911), stdev = 0.034
  CI (99.9%): [0.824, 0.896] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·gc.alloc.rate":
  2.216 ±(99.9%) 6.920 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 2.216, 24.679), stdev = 6.473
  CI (99.9%): [≈ 0, 9.136] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·gc.alloc.rate.norm":
  2996.686 ±(99.9%) 9279.924 B/op [Average]
  (min, avg, max) = (0.362, 2996.686, 32963.142), stdev = 8680.447
  CI (99.9%): [≈ 0, 12276.610] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 12.50% complete, ETA 00:05:22
# Fork: 1 of 3
# Warmup Iteration   1: 3.561 ms/op
# Warmup Iteration   2: 1.007 ms/op
# Warmup Iteration   3: 0.836 ms/op
# Warmup Iteration   4: 0.823 ms/op
# Warmup Iteration   5: 0.834 ms/op
Iteration   1: 0.827 ms/op
                 ·gc.alloc.rate:      0.112 MB/sec
                 ·gc.alloc.rate.norm: 145.203 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.841 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.524 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.834 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.393 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.834 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.360 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.833 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.393 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 16.67% complete, ETA 00:05:06
# Fork: 2 of 3
# Warmup Iteration   1: 3.128 ms/op
# Warmup Iteration   2: 0.854 ms/op
# Warmup Iteration   3: 0.789 ms/op
# Warmup Iteration   4: 0.794 ms/op
# Warmup Iteration   5: 0.790 ms/op
Iteration   1: 0.794 ms/op
                 ·gc.alloc.rate:      0.112 MB/sec
                 ·gc.alloc.rate.norm: 139.515 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.792 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.373 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.791 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.373 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.826 ms/op
                 ·gc.alloc.rate:      0.128 MB/sec
                 ·gc.alloc.rate.norm: 166.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.818 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.386 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 20.83% complete, ETA 00:04:51
# Fork: 3 of 3
# Warmup Iteration   1: 3.819 ms/op
# Warmup Iteration   2: 0.949 ms/op
# Warmup Iteration   3: 0.822 ms/op
# Warmup Iteration   4: 0.856 ms/op
# Warmup Iteration   5: 0.825 ms/op
Iteration   1: 0.825 ms/op
                 ·gc.alloc.rate:      0.112 MB/sec
                 ·gc.alloc.rate.norm: 144.976 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.822 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.513 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.825 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.389 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.823 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.356 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.788 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.372 B/op
                 ·gc.count:           ≈ 0 counts



Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline":
  0.818 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.788, 0.818, 0.841), stdev = 0.018
  CI (99.9%): [0.799, 0.837] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·gc.alloc.rate":
  0.031 ±(99.9%) 0.057 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.031, 0.128), stdev = 0.053
  CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·gc.alloc.rate.norm":
  40.015 ±(99.9%) 72.922 B/op [Average]
  (min, avg, max) = (0.356, 40.015, 166.097), stdev = 68.211
  CI (99.9%): [≈ 0, 112.937] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 25.00% complete, ETA 00:04:36
# Fork: 1 of 3
# Warmup Iteration   1: 5.437 ms/op
# Warmup Iteration   2: 0.750 ms/op
# Warmup Iteration   3: 0.618 ms/op
# Warmup Iteration   4: 0.618 ms/op
# Warmup Iteration   5: 0.630 ms/op
Iteration   1: 0.606 ms/op
                 ·gc.alloc.rate:      0.899 MB/sec
                 ·gc.alloc.rate.norm: 857.872 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.610 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.288 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.609 ms/op
                 ·gc.alloc.rate:      2.577 MB/sec
                 ·gc.alloc.rate.norm: 2470.305 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.607 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.262 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.607 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.286 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 29.17% complete, ETA 00:04:20
# Fork: 2 of 3
# Warmup Iteration   1: 4.487 ms/op
# Warmup Iteration   2: 0.725 ms/op
# Warmup Iteration   3: 0.655 ms/op
# Warmup Iteration   4: 0.640 ms/op
# Warmup Iteration   5: 0.637 ms/op
Iteration   1: 0.631 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.393 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.629 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.297 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.624 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.294 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.627 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.271 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.636 ms/op
                 ·gc.alloc.rate:      3.933 MB/sec
                 ·gc.alloc.rate.norm: 3938.733 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 33.33% complete, ETA 00:04:05
# Fork: 3 of 3
# Warmup Iteration   1: 3.005 ms/op
# Warmup Iteration   2: 0.671 ms/op
# Warmup Iteration   3: 0.618 ms/op
# Warmup Iteration   4: 0.623 ms/op
# Warmup Iteration   5: 0.613 ms/op
Iteration   1: 0.603 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.285 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.647 ms/op
                 ·gc.alloc.rate:      8.320 MB/sec
                 ·gc.alloc.rate.norm: 8470.406 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.636 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.300 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.634 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.274 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.636 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.300 B/op
                 ·gc.count:           ≈ 0 counts



Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda":
  0.623 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.603, 0.623, 0.647), stdev = 0.014
  CI (99.9%): [0.607, 0.638] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·gc.alloc.rate":
  1.049 ±(99.9%) 2.485 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 1.049, 8.320), stdev = 2.324
  CI (99.9%): [≈ 0, 3.534] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·gc.alloc.rate.norm":
  1049.371 ±(99.9%) 2516.628 B/op [Average]
  (min, avg, max) = (0.262, 1049.371, 8470.406), stdev = 2354.055
  CI (99.9%): [≈ 0, 3565.999] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 37.50% complete, ETA 00:03:49
# Fork: 1 of 3
# Warmup Iteration   1: 1.535 ms/op
# Warmup Iteration   2: 0.717 ms/op
# Warmup Iteration   3: 0.611 ms/op
# Warmup Iteration   4: 0.615 ms/op
# Warmup Iteration   5: 0.617 ms/op
Iteration   1: 0.606 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.286 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.608 ms/op
                 ·gc.alloc.rate:      0.156 MB/sec
                 ·gc.alloc.rate.norm: 148.838 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.609 ms/op
                 ·gc.alloc.rate:      0.824 MB/sec
                 ·gc.alloc.rate.norm: 788.564 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.608 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.262 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.611 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.288 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 41.67% complete, ETA 00:03:34
# Fork: 2 of 3
# Warmup Iteration   1: 1.556 ms/op
# Warmup Iteration   2: 0.725 ms/op
# Warmup Iteration   3: 0.633 ms/op
# Warmup Iteration   4: 0.631 ms/op
# Warmup Iteration   5: 0.608 ms/op
Iteration   1: 0.608 ms/op
                 ·gc.alloc.rate:      0.126 MB/sec
                 ·gc.alloc.rate.norm: 120.588 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.636 ms/op
                 ·gc.alloc.rate:      1.075 MB/sec
                 ·gc.alloc.rate.norm: 1075.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.608 ms/op
                 ·gc.alloc.rate:      0.094 MB/sec
                 ·gc.alloc.rate.norm: 89.457 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.608 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.263 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.611 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.288 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 45.83% complete, ETA 00:03:19
# Fork: 3 of 3
# Warmup Iteration   1: 2.527 ms/op
# Warmup Iteration   2: 0.665 ms/op
# Warmup Iteration   3: 0.608 ms/op
# Warmup Iteration   4: 0.633 ms/op
# Warmup Iteration   5: 0.608 ms/op
Iteration   1: 0.605 ms/op
                 ·gc.alloc.rate:      0.162 MB/sec
                 ·gc.alloc.rate.norm: 154.320 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.609 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.448 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.619 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.292 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.637 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.275 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.616 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.290 B/op
                 ·gc.count:           ≈ 0 counts



Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline":
  0.613 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.605, 0.613, 0.637), stdev = 0.010
  CI (99.9%): [0.602, 0.624] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·gc.alloc.rate":
  0.163 ±(99.9%) 0.351 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.163, 1.075), stdev = 0.329
  CI (99.9%): [≈ 0, 0.514] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·gc.alloc.rate.norm":
  158.632 ±(99.9%) 346.246 B/op [Average]
  (min, avg, max) = (0.262, 158.632, 1075.024), stdev = 323.878
  CI (99.9%): [≈ 0, 504.878] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda
# Parameters: (factor = 1, param = 1000000)

# Run progress: 50.00% complete, ETA 00:03:03
# Fork: 1 of 3
# Warmup Iteration   1: 3.358 ms/op
# Warmup Iteration   2: 0.756 ms/op
# Warmup Iteration   3: 0.627 ms/op
# Warmup Iteration   4: 0.612 ms/op
# Warmup Iteration   5: 0.586 ms/op
Iteration   1: 0.565 ms/op
                 ·gc.alloc.rate:      0.159 MB/sec
                 ·gc.alloc.rate.norm: 141.116 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.564 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.352 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.568 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.268 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.564 ms/op
                 ·gc.alloc.rate:      2.583 MB/sec
                 ·gc.alloc.rate.norm: 2290.483 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.562 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.265 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 54.17% complete, ETA 00:02:48
# Fork: 2 of 3
# Warmup Iteration   1: 2.852 ms/op
# Warmup Iteration   2: 0.643 ms/op
# Warmup Iteration   3: 0.629 ms/op
# Warmup Iteration   4: 0.615 ms/op
# Warmup Iteration   5: 0.717 ms/op
Iteration   1: 0.578 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.273 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.546 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.258 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.565 ms/op
                 ·gc.alloc.rate:      0.100 MB/sec
                 ·gc.alloc.rate.norm: 88.447 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.566 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.244 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.565 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.267 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 58.33% complete, ETA 00:02:33
# Fork: 3 of 3
# Warmup Iteration   1: 2.765 ms/op
# Warmup Iteration   2: 0.643 ms/op
# Warmup Iteration   3: 0.572 ms/op
# Warmup Iteration   4: 0.581 ms/op
# Warmup Iteration   5: 0.551 ms/op
Iteration   1: 0.534 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.252 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.534 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.252 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.532 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.251 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.528 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.228 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.540 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.272 B/op
                 ·gc.count:           ≈ 0 counts



Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda":
  0.554 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.528, 0.554, 0.578), stdev = 0.016
  CI (99.9%): [0.537, 0.572] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·gc.alloc.rate":
  0.190 ±(99.9%) 0.710 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.190, 2.583), stdev = 0.664
  CI (99.9%): [≈ 0, 0.899] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·gc.alloc.rate.norm":
  168.215 ±(99.9%) 629.204 B/op [Average]
  (min, avg, max) = (0.228, 168.215, 2290.483), stdev = 588.558
  CI (99.9%): [≈ 0, 797.419] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 62.50% complete, ETA 00:02:17
# Fork: 1 of 3
# Warmup Iteration   1: 1.176 ms/op
# Warmup Iteration   2: 0.702 ms/op
# Warmup Iteration   3: 0.525 ms/op
# Warmup Iteration   4: 0.524 ms/op
# Warmup Iteration   5: 0.555 ms/op
Iteration   1: 0.555 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.346 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.553 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.323 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.551 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.260 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.552 ms/op
                 ·gc.alloc.rate:      0.129 MB/sec
                 ·gc.alloc.rate.norm: 112.088 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.528 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.249 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 66.67% complete, ETA 00:02:02
# Fork: 2 of 3
# Warmup Iteration   1: 1.348 ms/op
# Warmup Iteration   2: 0.559 ms/op
# Warmup Iteration   3: 0.590 ms/op
# Warmup Iteration   4: 0.525 ms/op
# Warmup Iteration   5: 0.526 ms/op
Iteration   1: 0.526 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.248 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.526 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.328 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.554 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.261 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.564 ms/op
                 ·gc.alloc.rate:      0.131 MB/sec
                 ·gc.alloc.rate.norm: 115.833 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.563 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.266 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 70.83% complete, ETA 00:01:47
# Fork: 3 of 3
# Warmup Iteration   1: 1.224 ms/op
# Warmup Iteration   2: 0.650 ms/op
# Warmup Iteration   3: 0.525 ms/op
# Warmup Iteration   4: 0.532 ms/op
# Warmup Iteration   5: 0.538 ms/op
Iteration   1: 0.533 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.251 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.533 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.392 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.532 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.251 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.526 ms/op
                 ·gc.alloc.rate:      0.133 MB/sec
                 ·gc.alloc.rate.norm: 110.333 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.529 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.250 B/op
                 ·gc.count:           ≈ 0 counts



Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline":
  0.542 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.526, 0.542, 0.564), stdev = 0.015
  CI (99.9%): [0.526, 0.557] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·gc.alloc.rate":
  0.026 ±(99.9%) 0.058 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.026, 0.133), stdev = 0.054
  CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·gc.alloc.rate.norm":
  22.779 ±(99.9%) 49.794 B/op [Average]
  (min, avg, max) = (0.248, 22.779, 115.833), stdev = 46.577
  CI (99.9%): [≈ 0, 72.573] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef
# Parameters: (factor = 1, param = 1000000)

# Run progress: 75.00% complete, ETA 00:01:31
# Fork: 1 of 3
# Warmup Iteration   1: 2.533 ms/op
# Warmup Iteration   2: 0.673 ms/op
# Warmup Iteration   3: 0.632 ms/op
# Warmup Iteration   4: 0.644 ms/op
# Warmup Iteration   5: 0.609 ms/op
Iteration   1: 0.564 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.266 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.561 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.265 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.544 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.257 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.602 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.260 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.569 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.269 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 79.17% complete, ETA 00:01:16
# Fork: 2 of 3
# Warmup Iteration   1: 2.827 ms/op
# Warmup Iteration   2: 0.804 ms/op
# Warmup Iteration   3: 0.654 ms/op
# Warmup Iteration   4: 0.683 ms/op
# Warmup Iteration   5: 0.646 ms/op
Iteration   1: 0.609 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.287 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.570 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.356 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.581 ms/op
                 ·gc.alloc.rate:      60.027 MB/sec
                 ·gc.alloc.rate.norm: 54846.736 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.573 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.247 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.565 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.267 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 83.33% complete, ETA 00:01:01
# Fork: 3 of 3
# Warmup Iteration   1: 7.764 ms/op
# Warmup Iteration   2: 0.857 ms/op
# Warmup Iteration   3: 0.677 ms/op
# Warmup Iteration   4: 0.624 ms/op
# Warmup Iteration   5: 0.584 ms/op
Iteration   1: 0.554 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.345 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.573 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.270 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.595 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.281 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.585 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.252 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.600 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.283 B/op
                 ·gc.count:           ≈ 0 counts



Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef":
  0.576 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.544, 0.576, 0.609), stdev = 0.019
  CI (99.9%): [0.556, 0.596] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·gc.alloc.rate":
  4.002 ±(99.9%) 16.569 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 4.002, 60.027), stdev = 15.499
  CI (99.9%): [≈ 0, 20.571] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·gc.alloc.rate.norm":
  3656.709 ±(99.9%) 15139.283 B/op [Average]
  (min, avg, max) = (0.247, 3656.709, 54846.736), stdev = 14161.294
  CI (99.9%): [≈ 0, 18795.992] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·gc.count":
  ≈ 0 counts


# JMH version: 1.21
# VM version: JDK 1.8.0_202, Java HotSpot(TM) GraalVM EE 1.0.0-rc13, 25.202-b08-jvmci-0.55
# VM invoker: /usr/lib/jvm/graalvm-ee-1.0.0-rc13/jre/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline
# Parameters: (factor = 1, param = 1000000)

# Run progress: 87.50% complete, ETA 00:00:45
# Fork: 1 of 3
# Warmup Iteration   1: 2.162 ms/op
# Warmup Iteration   2: 0.870 ms/op
# Warmup Iteration   3: 0.673 ms/op
# Warmup Iteration   4: 0.683 ms/op
# Warmup Iteration   5: 0.670 ms/op
Iteration   1: 0.691 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.326 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.633 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.369 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.702 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.331 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.640 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.276 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.612 ms/op
                 ·gc.alloc.rate:      0.132 MB/sec
                 ·gc.alloc.rate.norm: 126.792 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 91.67% complete, ETA 00:00:30
# Fork: 2 of 3
# Warmup Iteration   1: 1.809 ms/op
# Warmup Iteration   2: 0.695 ms/op
# Warmup Iteration   3: 0.656 ms/op
# Warmup Iteration   4: 0.669 ms/op
# Warmup Iteration   5: 0.676 ms/op
Iteration   1: 0.652 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.307 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.687 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.506 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.642 ms/op
                 ·gc.alloc.rate:      0.335 MB/sec
                 ·gc.alloc.rate.norm: 338.598 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.638 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.275 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.646 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.305 B/op
                 ·gc.count:           ≈ 0 counts


# Run progress: 95.83% complete, ETA 00:00:15
# Fork: 3 of 3
# Warmup Iteration   1: 2.311 ms/op
# Warmup Iteration   2: 0.682 ms/op
# Warmup Iteration   3: 0.654 ms/op
# Warmup Iteration   4: 0.637 ms/op
# Warmup Iteration   5: 0.630 ms/op
Iteration   1: 0.604 ms/op
                 ·gc.alloc.rate:      0.093 MB/sec
                 ·gc.alloc.rate.norm: 88.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.604 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
                 ·gc.alloc.rate.norm: 0.376 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.605 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.286 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.649 ms/op
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.280 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.632 ms/op
                 ·gc.alloc.rate:                   6.111 MB/sec
                 ·gc.alloc.rate.norm:              6082.564 B/op
                 ·gc.churn.PS_Eden_Space:          69.922 MB/sec
                 ·gc.churn.PS_Eden_Space.norm:     69595.752 B/op
                 ·gc.churn.PS_Survivor_Space:      0.102 MB/sec
                 ·gc.churn.PS_Survivor_Space.norm: 101.300 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         5.000 ms



Result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline":
  0.643 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.604, 0.643, 0.702), stdev = 0.031
  CI (99.9%): [0.609, 0.676] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.alloc.rate":
  0.445 ±(99.9%) 1.679 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.445, 6.111), stdev = 1.570
  CI (99.9%): [≈ 0, 2.123] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.alloc.rate.norm":
  442.640 ±(99.9%) 1670.833 B/op [Average]
  (min, avg, max) = (0.275, 442.640, 6082.564), stdev = 1562.898
  CI (99.9%): [≈ 0, 2113.473] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.churn.PS_Eden_Space":
  4.661 ±(99.9%) 19.301 MB/sec [Average]
  (min, avg, max) = (≈ 0, 4.661, 69.922), stdev = 18.054
  CI (99.9%): [≈ 0, 23.962] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.churn.PS_Eden_Space.norm":
  4639.717 ±(99.9%) 19210.535 B/op [Average]
  (min, avg, max) = (≈ 0, 4639.717, 69595.752), stdev = 17969.546
  CI (99.9%): [≈ 0, 23850.251] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.churn.PS_Survivor_Space":
  0.007 ±(99.9%) 0.028 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.007, 0.102), stdev = 0.026
  CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.churn.PS_Survivor_Space.norm":
  6.753 ±(99.9%) 27.962 B/op [Average]
  (min, avg, max) = (≈ 0, 6.753, 101.300), stdev = 26.155
  CI (99.9%): [≈ 0, 34.715] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.067, 1.000), stdev = 0.258
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "org.ib.benchmark.HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.time":
  5.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.333, 5.000), stdev = 1.291
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# Run complete. Total time: 00:06:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    (factor)  (param)  Mode  Cnt     Score       Error   Units
HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline                                             1  1000000  avgt   15     0.542 ±     0.016   ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·gc.alloc.rate                              1  1000000  avgt   15     0.026 ±     0.058  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·gc.alloc.rate.norm                         1  1000000  avgt   15    22.779 ±    49.794    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda_inline:·gc.count                                   1  1000000  avgt   15       ≈ 0              counts

HighOrderFunctionKtBenchmark.sumOfSquares_lambda                                                    1  1000000  avgt   15     0.554 ±     0.017   ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·gc.alloc.rate                                     1  1000000  avgt   15     0.190 ±     0.710  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·gc.alloc.rate.norm                                1  1000000  avgt   15   168.215 ±   629.204    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_lambda:·gc.count                                          1  1000000  avgt   15       ≈ 0              counts

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline                                    1  1000000  avgt   15     0.613 ±     0.011   ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·gc.alloc.rate                     1  1000000  avgt   15     0.163 ±     0.351  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·gc.alloc.rate.norm                1  1000000  avgt   15   158.632 ±   346.246    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda_inline:·gc.count                          1  1000000  avgt   15       ≈ 0              counts

HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda                                           1  1000000  avgt   15     0.623 ±     0.015   ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·gc.alloc.rate                            1  1000000  avgt   15     1.049 ±     2.485  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·gc.alloc.rate.norm                       1  1000000  avgt   15  1049.371 ±  2516.628    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_capturingLambda:·gc.count                                 1  1000000  avgt   15       ≈ 0              counts

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction                                         1  1000000  avgt   15     0.860 ±     0.036   ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·gc.alloc.rate                          1  1000000  avgt   15     2.216 ±     6.920  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·gc.alloc.rate.norm                     1  1000000  avgt   15  2996.686 ±  9279.924    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction:·gc.count                               1  1000000  avgt   15       ≈ 0              counts

HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline                                  1  1000000  avgt   15     0.818 ±     0.019   ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·gc.alloc.rate                   1  1000000  avgt   15     0.031 ±     0.057  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·gc.alloc.rate.norm              1  1000000  avgt   15    40.015 ±    72.922    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_anonymousFunction_inline:·gc.count                        1  1000000  avgt   15       ≈ 0              counts

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef                                                 1  1000000  avgt   15     0.576 ±     0.020   ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·gc.alloc.rate                                  1  1000000  avgt   15     4.002 ±    16.569  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·gc.alloc.rate.norm                             1  1000000  avgt   15  3656.709 ± 15139.283    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef:·gc.count                                       1  1000000  avgt   15       ≈ 0              counts

HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline                                          1  1000000  avgt   15     0.643 ±     0.033   ms/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.alloc.rate                           1  1000000  avgt   15     0.445 ±     1.679  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.alloc.rate.norm                      1  1000000  avgt   15   442.640 ±  1670.833    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.churn.PS_Eden_Space                  1  1000000  avgt   15     4.661 ±    19.301  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.churn.PS_Eden_Space.norm             1  1000000  avgt   15  4639.717 ± 19210.535    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.churn.PS_Survivor_Space              1  1000000  avgt   15     0.007 ±     0.028  MB/sec
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.churn.PS_Survivor_Space.norm         1  1000000  avgt   15     6.753 ±    27.962    B/op
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.count                                1  1000000  avgt   15     1.000              counts
HighOrderFunctionKtBenchmark.sumOfSquares_methodRef_inline:·gc.time                                 1  1000000  avgt   15     5.000                  ms
