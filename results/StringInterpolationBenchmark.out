# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.StringInterpolationJavaBenchmark.fruitsPrice
# Parameters: (currency = EUR, fruits = apples, length = 2, price = 1.59, quantity = 1, shape = Rectangle, unit = m2, width = 3)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 3
# Warmup Iteration   1: 103.803 ns/op
# Warmup Iteration   2: 94.942 ns/op
# Warmup Iteration   3: 86.450 ns/op
# Warmup Iteration   4: 87.353 ns/op
# Warmup Iteration   5: 92.215 ns/op
Iteration   1: 90.060 ns/op
Iteration   2: 92.880 ns/op
Iteration   3: 88.068 ns/op
Iteration   4: 85.185 ns/op
Iteration   5: 92.849 ns/op

# Run progress: 8.33% complete, ETA 00:01:53
# Fork: 2 of 3
# Warmup Iteration   1: 116.824 ns/op
# Warmup Iteration   2: 99.697 ns/op
# Warmup Iteration   3: 89.790 ns/op
# Warmup Iteration   4: 87.216 ns/op
# Warmup Iteration   5: 92.639 ns/op
Iteration   1: 100.180 ns/op
Iteration   2: 91.808 ns/op
Iteration   3: 92.156 ns/op
Iteration   4: 85.976 ns/op
Iteration   5: 84.643 ns/op

# Run progress: 16.67% complete, ETA 00:01:42
# Fork: 3 of 3
# Warmup Iteration   1: 111.024 ns/op
# Warmup Iteration   2: 94.002 ns/op
# Warmup Iteration   3: 87.945 ns/op
# Warmup Iteration   4: 85.833 ns/op
# Warmup Iteration   5: 93.126 ns/op
Iteration   1: 88.444 ns/op
Iteration   2: 96.563 ns/op
Iteration   3: 95.720 ns/op
Iteration   4: 86.905 ns/op
Iteration   5: 93.619 ns/op


Result "org.ib.benchmark.StringInterpolationJavaBenchmark.fruitsPrice":
  91.004 ±(99.9%) 4.828 ns/op [Average]
  (min, avg, max) = (84.643, 91.004, 100.180), stdev = 4.516
  CI (99.9%): [86.176, 95.832] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.StringInterpolationJavaBenchmark.shapeArea
# Parameters: (currency = EUR, fruits = apples, length = 2, price = 1.59, quantity = 1, shape = Rectangle, unit = m2, width = 3)

# Run progress: 25.00% complete, ETA 00:01:32
# Fork: 1 of 3
# Warmup Iteration   1: 64.770 ns/op
# Warmup Iteration   2: 67.059 ns/op
# Warmup Iteration   3: 62.455 ns/op
# Warmup Iteration   4: 56.471 ns/op
# Warmup Iteration   5: 56.055 ns/op
Iteration   1: 56.901 ns/op
Iteration   2: 63.098 ns/op
Iteration   3: 60.725 ns/op
Iteration   4: 61.057 ns/op
Iteration   5: 54.901 ns/op

# Run progress: 33.33% complete, ETA 00:01:22
# Fork: 2 of 3
# Warmup Iteration   1: 71.837 ns/op
# Warmup Iteration   2: 123.236 ns/op
# Warmup Iteration   3: 78.158 ns/op
# Warmup Iteration   4: 59.821 ns/op
# Warmup Iteration   5: 61.561 ns/op
Iteration   1: 69.397 ns/op
Iteration   2: 65.949 ns/op
Iteration   3: 58.067 ns/op
Iteration   4: 64.363 ns/op
Iteration   5: 66.031 ns/op

# Run progress: 41.67% complete, ETA 00:01:12
# Fork: 3 of 3
# Warmup Iteration   1: 82.780 ns/op
# Warmup Iteration   2: 69.711 ns/op
# Warmup Iteration   3: 60.985 ns/op
# Warmup Iteration   4: 58.206 ns/op
# Warmup Iteration   5: 59.571 ns/op
Iteration   1: 58.434 ns/op
Iteration   2: 62.608 ns/op
Iteration   3: 63.953 ns/op
Iteration   4: 67.684 ns/op
Iteration   5: 68.448 ns/op


Result "org.ib.benchmark.StringInterpolationJavaBenchmark.shapeArea":
  62.774 ±(99.9%) 4.691 ns/op [Average]
  (min, avg, max) = (54.901, 62.774, 69.397), stdev = 4.388
  CI (99.9%): [58.084, 67.465] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.StringInterpolationKtBenchmark.fruitsPrice
# Parameters: (currency = EUR, fruits = apples, length = 2, price = 1.59, quantity = 1, shape = Rectangle, unit = m2, width = 3)

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 1 of 3
# Warmup Iteration   1: 160.413 ns/op
# Warmup Iteration   2: 172.752 ns/op
# Warmup Iteration   3: 123.634 ns/op
# Warmup Iteration   4: 133.875 ns/op
# Warmup Iteration   5: 121.245 ns/op
Iteration   1: 131.425 ns/op
Iteration   2: 128.577 ns/op
Iteration   3: 127.317 ns/op
Iteration   4: 119.016 ns/op
Iteration   5: 120.298 ns/op

# Run progress: 58.33% complete, ETA 00:00:51
# Fork: 2 of 3
# Warmup Iteration   1: 137.076 ns/op
# Warmup Iteration   2: 127.283 ns/op
# Warmup Iteration   3: 129.911 ns/op
# Warmup Iteration   4: 122.012 ns/op
# Warmup Iteration   5: 130.268 ns/op
Iteration   1: 133.434 ns/op
Iteration   2: 121.196 ns/op
Iteration   3: 138.633 ns/op
Iteration   4: 125.087 ns/op
Iteration   5: 119.896 ns/op

# Run progress: 66.67% complete, ETA 00:00:41
# Fork: 3 of 3
# Warmup Iteration   1: 155.940 ns/op
# Warmup Iteration   2: 147.479 ns/op
# Warmup Iteration   3: 128.626 ns/op
# Warmup Iteration   4: 127.630 ns/op
# Warmup Iteration   5: 122.211 ns/op
Iteration   1: 122.689 ns/op
Iteration   2: 121.472 ns/op
Iteration   3: 126.956 ns/op
Iteration   4: 135.607 ns/op
Iteration   5: 124.936 ns/op


Result "org.ib.benchmark.StringInterpolationKtBenchmark.fruitsPrice":
  126.436 ±(99.9%) 6.504 ns/op [Average]
  (min, avg, max) = (119.016, 126.436, 138.633), stdev = 6.083
  CI (99.9%): [119.932, 132.940] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.StringInterpolationKtBenchmark.shapeArea
# Parameters: (currency = EUR, fruits = apples, length = 2, price = 1.59, quantity = 1, shape = Rectangle, unit = m2, width = 3)

# Run progress: 75.00% complete, ETA 00:00:30
# Fork: 1 of 3
# Warmup Iteration   1: 96.411 ns/op
# Warmup Iteration   2: 84.166 ns/op
# Warmup Iteration   3: 77.930 ns/op
# Warmup Iteration   4: 90.331 ns/op
# Warmup Iteration   5: 81.949 ns/op
Iteration   1: 72.549 ns/op
Iteration   2: 75.333 ns/op
Iteration   3: 75.568 ns/op
Iteration   4: 75.152 ns/op
Iteration   5: 72.206 ns/op

# Run progress: 83.33% complete, ETA 00:00:20
# Fork: 2 of 3
# Warmup Iteration   1: 84.081 ns/op
# Warmup Iteration   2: 81.458 ns/op
# Warmup Iteration   3: 80.794 ns/op
# Warmup Iteration   4: 74.147 ns/op
# Warmup Iteration   5: 74.633 ns/op
Iteration   1: 76.917 ns/op
Iteration   2: 76.915 ns/op
Iteration   3: 72.453 ns/op
Iteration   4: 77.112 ns/op
Iteration   5: 74.652 ns/op

# Run progress: 91.67% complete, ETA 00:00:10
# Fork: 3 of 3
# Warmup Iteration   1: 88.439 ns/op
# Warmup Iteration   2: 96.817 ns/op
# Warmup Iteration   3: 83.251 ns/op
# Warmup Iteration   4: 78.153 ns/op
# Warmup Iteration   5: 74.855 ns/op
Iteration   1: 85.347 ns/op
Iteration   2: 86.080 ns/op
Iteration   3: 78.429 ns/op
Iteration   4: 72.251 ns/op
Iteration   5: 73.992 ns/op


Result "org.ib.benchmark.StringInterpolationKtBenchmark.shapeArea":
  76.330 ±(99.9%) 4.574 ns/op [Average]
  (min, avg, max) = (72.206, 76.330, 86.080), stdev = 4.279
  CI (99.9%): [71.756, 80.905] (assumes normal distribution)


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     (currency)  (fruits)  (length)  (price)  (quantity)    (shape)  (unit)  (width)  Mode  Cnt    Score   Error  Units
StringInterpolationJavaBenchmark.fruitsPrice         EUR    apples         2     1.59           1  Rectangle      m2        3  avgt   15   91.004 ± 4.828  ns/op
StringInterpolationJavaBenchmark.shapeArea           EUR    apples         2     1.59           1  Rectangle      m2        3  avgt   15   62.774 ± 4.691  ns/op
StringInterpolationKtBenchmark.fruitsPrice           EUR    apples         2     1.59           1  Rectangle      m2        3  avgt   15  126.436 ± 6.504  ns/op
StringInterpolationKtBenchmark.shapeArea             EUR    apples         2     1.59           1  Rectangle      m2        3  avgt   15   76.330 ± 4.574  ns/op

Few thoughts:
    - Starting JDK 9, Java uses StringConcatFactory.makeConcatWithConstants() (i.e. Indify String Concatenation) - which replaces the concatenation at byte-code level by an InvokeDynamic call
    - Kotlin, since it generates Java 8 bytecode, relies on StringBuilder()
    - Forcing the Java compiler to generate Java 8 bytecode the performance becomes almost the same
    - Kotlin does not benefit of new bytecode optimizations, added since Java 9!
