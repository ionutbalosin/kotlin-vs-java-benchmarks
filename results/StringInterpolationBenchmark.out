# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.StringInterpolationJavaBenchmark.concatenation
# Parameters: (currency = EUR, fruits = apples, length = 2, price = 1.59, quantity = 1, width = 3)

# Run progress: 0.00% complete, ETA 00:02:00
# Fork: 1 of 3
# Warmup Iteration   1: 96.596 ns/op
# Warmup Iteration   2: 84.793 ns/op
# Warmup Iteration   3: 79.059 ns/op
# Warmup Iteration   4: 84.174 ns/op
# Warmup Iteration   5: 85.441 ns/op
Iteration   1: 82.112 ns/op
Iteration   2: 79.544 ns/op
Iteration   3: 82.548 ns/op
Iteration   4: 85.506 ns/op
Iteration   5: 85.524 ns/op

# Run progress: 8.33% complete, ETA 00:01:53
# Fork: 2 of 3
# Warmup Iteration   1: 91.921 ns/op
# Warmup Iteration   2: 84.535 ns/op
# Warmup Iteration   3: 81.212 ns/op
# Warmup Iteration   4: 79.120 ns/op
# Warmup Iteration   5: 77.957 ns/op
Iteration   1: 83.702 ns/op
Iteration   2: 77.143 ns/op
Iteration   3: 76.918 ns/op
Iteration   4: 76.618 ns/op
Iteration   5: 76.930 ns/op

# Run progress: 16.67% complete, ETA 00:01:42
# Fork: 3 of 3
# Warmup Iteration   1: 92.500 ns/op
# Warmup Iteration   2: 85.510 ns/op
# Warmup Iteration   3: 78.423 ns/op
# Warmup Iteration   4: 78.281 ns/op
# Warmup Iteration   5: 78.371 ns/op
Iteration   1: 78.148 ns/op
Iteration   2: 82.938 ns/op
Iteration   3: 82.334 ns/op
Iteration   4: 78.946 ns/op
Iteration   5: 81.325 ns/op


Result "org.ib.benchmark.StringInterpolationJavaBenchmark.concatenation":
  80.682 ±(99.9%) 3.352 ns/op [Average]
  (min, avg, max) = (76.618, 80.682, 85.524), stdev = 3.135
  CI (99.9%): [77.331, 84.034] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.StringInterpolationJavaBenchmark.expression
# Parameters: (currency = EUR, fruits = apples, length = 2, price = 1.59, quantity = 1, width = 3)

# Run progress: 25.00% complete, ETA 00:01:32
# Fork: 1 of 3
# Warmup Iteration   1: 45.334 ns/op
# Warmup Iteration   2: 39.206 ns/op
# Warmup Iteration   3: 37.655 ns/op
# Warmup Iteration   4: 35.923 ns/op
# Warmup Iteration   5: 37.366 ns/op
Iteration   1: 40.362 ns/op
Iteration   2: 47.215 ns/op
Iteration   3: 44.579 ns/op
Iteration   4: 44.670 ns/op
Iteration   5: 44.500 ns/op

# Run progress: 33.33% complete, ETA 00:01:22
# Fork: 2 of 3
# Warmup Iteration   1: 57.317 ns/op
# Warmup Iteration   2: 43.638 ns/op
# Warmup Iteration   3: 42.736 ns/op
# Warmup Iteration   4: 43.159 ns/op
# Warmup Iteration   5: 44.008 ns/op
Iteration   1: 40.669 ns/op
Iteration   2: 39.913 ns/op
Iteration   3: 40.965 ns/op
Iteration   4: 38.312 ns/op
Iteration   5: 38.914 ns/op

# Run progress: 41.67% complete, ETA 00:01:12
# Fork: 3 of 3
# Warmup Iteration   1: 43.008 ns/op
# Warmup Iteration   2: 42.316 ns/op
# Warmup Iteration   3: 41.915 ns/op
# Warmup Iteration   4: 41.908 ns/op
# Warmup Iteration   5: 47.923 ns/op
Iteration   1: 42.722 ns/op
Iteration   2: 40.767 ns/op
Iteration   3: 41.477 ns/op
Iteration   4: 41.532 ns/op
Iteration   5: 45.373 ns/op


Result "org.ib.benchmark.StringInterpolationJavaBenchmark.expression":
  42.131 ±(99.9%) 2.769 ns/op [Average]
  (min, avg, max) = (38.312, 42.131, 47.215), stdev = 2.590
  CI (99.9%): [39.363, 44.900] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.StringInterpolationKtBenchmark.concatenation
# Parameters: (currency = EUR, fruits = apples, length = 2, price = 1.59, quantity = 1, width = 3)

# Run progress: 50.00% complete, ETA 00:01:01
# Fork: 1 of 3
# Warmup Iteration   1: 146.242 ns/op
# Warmup Iteration   2: 125.030 ns/op
# Warmup Iteration   3: 119.759 ns/op
# Warmup Iteration   4: 111.821 ns/op
# Warmup Iteration   5: 130.393 ns/op
Iteration   1: 114.027 ns/op
Iteration   2: 116.635 ns/op
Iteration   3: 123.523 ns/op
Iteration   4: 133.656 ns/op
Iteration   5: 122.583 ns/op

# Run progress: 58.33% complete, ETA 00:00:51
# Fork: 2 of 3
# Warmup Iteration   1: 128.360 ns/op
# Warmup Iteration   2: 121.686 ns/op
# Warmup Iteration   3: 112.276 ns/op
# Warmup Iteration   4: 113.148 ns/op
# Warmup Iteration   5: 109.649 ns/op
Iteration   1: 113.559 ns/op
Iteration   2: 120.373 ns/op
Iteration   3: 115.792 ns/op
Iteration   4: 117.825 ns/op
Iteration   5: 138.490 ns/op

# Run progress: 66.67% complete, ETA 00:00:41
# Fork: 3 of 3
# Warmup Iteration   1: 155.600 ns/op
# Warmup Iteration   2: 151.448 ns/op
# Warmup Iteration   3: 121.858 ns/op
# Warmup Iteration   4: 126.265 ns/op
# Warmup Iteration   5: 109.605 ns/op
Iteration   1: 124.620 ns/op
Iteration   2: 110.141 ns/op
Iteration   3: 110.736 ns/op
Iteration   4: 110.276 ns/op
Iteration   5: 122.120 ns/op


Result "org.ib.benchmark.StringInterpolationKtBenchmark.concatenation":
  119.624 ±(99.9%) 8.852 ns/op [Average]
  (min, avg, max) = (110.141, 119.624, 138.490), stdev = 8.280
  CI (99.9%): [110.772, 128.476] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 11.0.2, Java HotSpot(TM) 64-Bit Server VM, 11.0.2+9-LTS
# VM invoker: /usr/lib/jvm/jdk-11.0.2/bin/java
# VM options: <none>
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.ib.benchmark.StringInterpolationKtBenchmark.expression
# Parameters: (currency = EUR, fruits = apples, length = 2, price = 1.59, quantity = 1, width = 3)

# Run progress: 75.00% complete, ETA 00:00:30
# Fork: 1 of 3
# Warmup Iteration   1: 57.020 ns/op
# Warmup Iteration   2: 54.456 ns/op
# Warmup Iteration   3: 49.684 ns/op
# Warmup Iteration   4: 48.392 ns/op
# Warmup Iteration   5: 46.488 ns/op
Iteration   1: 48.795 ns/op
Iteration   2: 50.479 ns/op
Iteration   3: 46.730 ns/op
Iteration   4: 50.774 ns/op
Iteration   5: 50.591 ns/op

# Run progress: 83.33% complete, ETA 00:00:20
# Fork: 2 of 3
# Warmup Iteration   1: 54.520 ns/op
# Warmup Iteration   2: 50.872 ns/op
# Warmup Iteration   3: 49.972 ns/op
# Warmup Iteration   4: 47.128 ns/op
# Warmup Iteration   5: 49.126 ns/op
Iteration   1: 46.137 ns/op
Iteration   2: 47.498 ns/op
Iteration   3: 47.745 ns/op
Iteration   4: 47.231 ns/op
Iteration   5: 46.361 ns/op

# Run progress: 91.67% complete, ETA 00:00:10
# Fork: 3 of 3
# Warmup Iteration   1: 55.914 ns/op
# Warmup Iteration   2: 49.130 ns/op
# Warmup Iteration   3: 48.330 ns/op
# Warmup Iteration   4: 44.922 ns/op
# Warmup Iteration   5: 47.421 ns/op
Iteration   1: 47.112 ns/op
Iteration   2: 46.420 ns/op
Iteration   3: 45.972 ns/op
Iteration   4: 47.625 ns/op
Iteration   5: 46.013 ns/op


Result "org.ib.benchmark.StringInterpolationKtBenchmark.expression":
  47.699 ±(99.9%) 1.807 ns/op [Average]
  (min, avg, max) = (45.972, 47.699, 50.774), stdev = 1.690
  CI (99.9%): [45.892, 49.506] (assumes normal distribution)


# Run complete. Total time: 00:02:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       (currency)  (fruits)  (length)  (price)  (quantity)  (width)  Mode  Cnt    Score   Error  Units
StringInterpolationJavaBenchmark.concatenation         EUR    apples         2     1.59           1        3  avgt   15   80.682 ± 3.352  ns/op
StringInterpolationJavaBenchmark.expression            EUR    apples         2     1.59           1        3  avgt   15   42.131 ± 2.769  ns/op
StringInterpolationKtBenchmark.concatenation           EUR    apples         2     1.59           1        3  avgt   15  119.624 ± 8.852  ns/op
StringInterpolationKtBenchmark.expression              EUR    apples         2     1.59           1        3  avgt   15   47.699 ± 1.807  ns/op

Few thoughts:
    - Starting JDK 9, Java uses StringConcatFactory.makeConcatWithConstants() (i.e. Indify String Concatenation) - which replaces the concatenation at byte-code level by an InvokeDynamic call
    - Kotlin, since it generates Java 8 bytecode, relies on StringBuilder()
    - Forcing the Java compiler to generate Java 8 bytecode the performance becomes almost the same
    - Kotlin does not benefit of new bytecode optimizations, added since Java 9!
